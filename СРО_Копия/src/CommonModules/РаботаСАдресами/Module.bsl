#Область ПрограммныйИнтерфейс

// Возвращает наименование субъекта РФ для адреса или пустую строку, если субъект не определен.
// Если переданная строка не содержит информации об адресе, то будет вызвано исключение.
//
// Параметры:
//    XMLСтрока - Строка - Строка XML соответствующая XDTO пакету Адрес.
//
// Возвращаемое значение:
//    Строка - Наименование региона.
//
Функция РегионАдресаКонтактнойИнформации(Знач XMLСтрока) Экспорт
	
	Если ПустаяСтрока(XMLСтрока) Тогда
		Возврат "";
	КонецЕсли;
	
	ПространствоИмен = УправлениеКонтактнойИнформациейКлиентСервер.ПространствоИмен();
	Чтение = Новый ЧтениеXML;
	Чтение.УстановитьСтроку(XMLСтрока);
	XDTOАдрес = ФабрикаXDTO.ПрочитатьXML(Чтение, ФабрикаXDTO.Тип(ПространствоИмен, "КонтактнаяИнформация"));
	Адрес = XDTOАдрес.Состав;
	Если Адрес = Неопределено Или Адрес.Тип() <> ФабрикаXDTO.Тип(ПространствоИмен, "Адрес") Тогда
		ВызватьИсключение НСтр("ru = 'Невозможно определить субъекта РФ, ожидается адрес.'");
	КонецЕсли;
	
	АдресРФ = Обработки.РасширенныйВводКонтактнойИнформации.НациональныйАдрес(Адрес);
	Возврат ?(АдресРФ = Неопределено ИЛИ АдресРФ.Свойства().Получить("СубъектРФ") = Неопределено, "", СокрЛП(АдресРФ.СубъектРФ));
	
КонецФункции

// Возвращает наименование города для адреса РФ или пустую строку для иностранного адреса.
// Если переданная строка не содержит информации об адресе, то будет вызвано исключение.
//
// Параметры:
//    XMLСтрока - Строка - Строка XML соответствующая XDTO пакету Адрес.
//
// Возвращаемое значение:
//    Строка - Наименование города.
//
Функция ГородАдресаКонтактнойИнформации(Знач XMLСтрока) Экспорт
	
	Если ПустаяСтрока(XMLСтрока) Тогда
		Возврат "";
	КонецЕсли;
	
	ПространствоИмен = УправлениеКонтактнойИнформациейКлиентСервер.ПространствоИмен();
	Чтение = Новый ЧтениеXML;
	Чтение.УстановитьСтроку(XMLСтрока);
	XDTOАдрес = ФабрикаXDTO.ПрочитатьXML(Чтение, ФабрикаXDTO.Тип(ПространствоИмен, "КонтактнаяИнформация"));
	Адрес = XDTOАдрес.Состав;
	Если Адрес = Неопределено Или Адрес.Тип() <> ФабрикаXDTO.Тип(ПространствоИмен, "Адрес") Тогда
		ВызватьИсключение НСтр("ru = 'Невозможно определить город, ожидается адрес.'");
	КонецЕсли;
	
	АдресРФ = Обработки.РасширенныйВводКонтактнойИнформации.НациональныйАдрес(Адрес);
	Возврат ?(АдресРФ = Неопределено ИЛИ АдресРФ.Свойства().Получить("Город") = Неопределено, "", СокрЛП(АдресРФ.Город));
	
КонецФункции

// Возвращает сведения об адресах в виде структуру частей адреса и кодов КЛАДР.
//
// Параметры:
//   Адреса                  - Массив - XDTO объекты или строки XML соответствующие XDTO пакету Адрес.
//   ДополнительныеПараметры - Структура - Параметры контактной информации:
//       * БезПредставлений - Булево - Если Истина, то поле представления адреса будет отсутствовать.
//       * КодыКЛАДР - Булево - Если Истина, то возвращает структуру с кодами КЛАДР по всем частям адреса.
//       * ПолныеНаименованияСокращений - Булево - Если Истина, то возвращает полное наименование адресных объектов.
//       * НаименованиеВключаетСокращение - Булево - Если Истина, то поля содержат сокращениям в наименованиях адресных объектов.
// Возвращаемое значение:
//   Массив - Содержит массив структур, содержимое структуры см. описание функции СведенияОбАдресе.
//
Функция СведенияОбАдресах(Адреса, ДополнительныеПараметры = Неопределено) Экспорт
	Возврат Обработки.РасширенныйВводКонтактнойИнформации.СведенияОбАдресахВВидеСтруктуры(Адреса, ДополнительныеПараметры);
КонецФункции

// Возвращает сведения об адресах в виде структуру частей адреса и кодов КЛАДР.
//
// Параметры:
//   Адрес                  - Строка, ОбъектXDTO - XDTO объект или строка XML соответствующие XDTO пакету Адрес.
//   ДополнительныеПараметры - Структура - параметры контактной информации. 
//       * БезПредставлений - Булево - Если Истина, то поле представления адреса будет отсутствовать.
//       * КодыКЛАДР - Булево - Если Истина, то возвращает структуру с кодами КЛАДР по всем частям адреса.
//       * ПолныеНаименованияСокращений - Булево - Если Истина, то возвращает полное наименование адресных объектов.
//       * НаименованиеВключаетСокращение - Булево - Если Истина, то поля содержат сокращениям в наименованиях адресных объектов.
// Возвращаемое значение:
//   Структура - набор пар ключ-значение. Состав свойств для адреса:
//        * Страна           - Строка - текстовое представление страны.
//        * КодСтраны        - Строка - код страны по ОКСМ.
//        * Индекс           - Строка - почтовый индекс.
//        * КодРегиона       - Строка - код региона РФ.
//        * Регион           - Строка - текстовое представление региона РФ.
//        * РегионСокращение - Строка - сокращение региона.
//        * Округ            - Строка - текстовое представление округа.
//        * ОкругСокращение  - Строка - сокращение округа.
//        * Район            - Строка - текстовое представление района.
//        * РайонСокращение  - Строка - сокращение района.
//        * Город            - Строка - текстовое представление города.
//        * ГородСокращение  - Строка - сокращение города.
//        * ВнутригородскойРайон - Строка - текстовое представление внутригородского района.
//        * ВнутригородскойРайонСокращение  - Строка - сокращение внутригородского района.
//        * НаселенныйПункт  - Строка - текстовое представление населенного пункта.
//        * НаселенныйПунктСокращение - Строка - сокращение населенного пункта.
//        * Улица            - Строка - текстовое представление улицы.
//        * УлицаСокращение  - Строка - сокращение улицы.
//        * ДополнительнаяТерритория - Строка - текстовое представление дополнительной территории.
//        * ДополнительнаяТерриторияСокращение - Строка - сокращение дополнительной территории.
//        * ЭлементДополнительнойТерритории - Строка - текстовое представление элемента дополнительной территории.
//        * ЭлементДополнительнойТерриторииСокращение - Строка - сокращение элемента дополнительной территории.
//        * Здание - Структура - структура с информацией о здании адреса.
//            ** ТипЗдания - Строка  - тип объекта адресации адреса РФ согласно приказу ФНС ММВ-7-1/525 от 31.08.2011.
//            ** Номер - Строка  - текстовое представление номера дома (только для адресов РФ).
//        * Корпуса - Массив - содержит структуры(поля структуры: ТипКорпуса, Номер) с перечнем корпусов адреса.
//        * Помещения - Массив - содержит структуры(поля структуры: ТипПомещения, Номер) с перечнем помещений адреса.
//        * КодыКЛАДР           - Структура - Коды КЛАДР, если установлен параметр КодыКЛАДР.
//           ** Регион          - Строка    - Код КЛАДР региона.
//           ** Район           - Строка    - Код КЛАДР район.
//           ** Город           - Строка    - Код КЛАДР города.
//           ** НаселенныйПункт - Строка    - Код КЛАДР населенного пункта.
//           ** Улица           - Строка    - Код КЛАДР улица.
//        * ДополнительныеКоды  - Структура - Коды ОКТМО, ОКТМО, ОКАТО, КодИФНСФЛ, КодИФНСЮЛ, КодУчасткаИФНСФЛ, КодУчасткаИФНСЮЛ.
Функция СведенияОбАдресе(Адрес, ДополнительныеПараметры = Неопределено) Экспорт
	Возврат Обработки.РасширенныйВводКонтактнойИнформации.СведенияОбАдресеВВидеСтруктуры(Адрес, ДополнительныеПараметры);
КонецФункции

// Преобразует адреса нового формата XML ФИАС в адрес формата КЛАДР.
//
// Параметры:
//   Данные                  - Строка - строка XML соответствующая XDTO пакету Адрес.
//
// Возвращаемое значение:
//   Структура - набор пар ключ-значение. Состав свойств для адреса:
//        ** Страна           - Строка - Представление страны.
//        ** КодСтраны        - Строка - Код страны по ОКСМ.
//        ** Индекс           - Строка - Почтовый индекс (только для адресов РФ).
//        ** Регион           - Строка - Представление региона РФ (только для адресов РФ).
//        ** КодРегиона       - Строка - Код региона РФ (только для адресов РФ).
//        ** РегионСокращение - Строка - Сокращение региона.
//        ** Район            - Строка - Представление района (только для адресов РФ).
//        ** РайонСокращение  - Строка - Сокращение района.
//        ** Город            - Строка - Представление города (только для адресов РФ).
//        ** ГородСокращение  - Строка - Сокращение города (только для адресов РФ).
//        ** НаселенныйПункт  - Строка - Представление населенного пункта (только для адресов РФ).
//        ** НаселенныйПунктСокращение - Строка - Сокращение населенного пункта.
//        ** Улица            - Строка - Представление улицы (только для адресов РФ).
//        ** УлицаСокращение  - Строка - Сокращение улицы.
//        ** ТипДома          - Строка - Тип дома см. РаботаСАдресамиКлиентСервер.ТипыОбъектовАдресацииАдресаРФ.
//        ** Дом              - Строка - Представление дома (только для адресов РФ).
//        ** ТипКорпуса       - Строка - Тип корпуса см. РаботаСАдресамиКлиентСервер.ТипыОбъектовАдресацииАдресаРФ.
//        ** Корпус           - Строка - Представление корпуса (только для адресов РФ).
//        ** ТипКвартиры      - Строка - Тип квартиры см. РаботаСАдресамиКлиентСервер.ТипыОбъектовАдресацииАдресаРФ.
//        ** Квартира         - Строка - Представление квартиры (только для адресов РФ).
//        ** АдресРФ          - Булево - Если Истина, то адрес российский.
//        ** Представление    - Строка - Представление адреса.
//
Функция АдресВФорматеКЛАДР(Знач Данные) Экспорт
	
	Если УправлениеКонтактнойИнформациейКлиентСервер.ЭтоКонтактнаяИнформацияВXML(Данные) Тогда
		// Новый формат КИ
		Результат = УправлениеКонтактнойИнформациейКлиентСервер.СтруктураЗначенийПолей(
				ПредыдущийФорматКонтактнойИнформацииXML(Данные));
			Представление = УправлениеКонтактнойИнформацией.ПредставлениеКонтактнойИнформации(Данные);
			
	ИначеЕсли ПустаяСтрока(Данные) Тогда
		// Генерируем пустую структуру по виду
		Результат = РаботаСАдресамиКлиентСервер.СтруктураКонтактнойИнформацииПоТипу(
			Перечисления.ТипыКонтактнойИнформации.Адрес);
		Представление = "";
	КонецЕсли;
	
	Если Результат.Свойство("Страна") И СтрСравнить(Результат.Страна, ОсновнаяСтрана().Наименование) = 0 Тогда
		Результат.Вставить("АдресРФ", Истина);
	Иначе
		Результат.Вставить("АдресРФ", Ложь);
	КонецЕсли;
	Результат.Вставить("Представление", Представление);
	
	Возврат Результат;
КонецФункции

// Проверяет адрес на соответствие требованиям к адресной информации.
//
// Параметры:
//   АдресВXML          - Строка - Строка XML соответствующая XDTO пакету Адрес.
//   ПараметрыПроверки  - Структура, СправочникСсылка.ВидыКонтактнойИнформации - Флаги проверки адреса:
//          ТолькоНациональныйАдрес - Булево - Адрес должен быть только Российским. По умолчанию ИСТИНА.
//          ФорматАдреса - Строка - По какому классификатору проверять "КЛАДР" или "ФИАС". По умолчанию "КЛАДР".
// Возвращаемое значение:
//   Структура - содержит структуру с полями:
//        * Результат - Строка - Результат проверки: "Корректный", "НеПроверен", "СодержитОшибки".
//        * СписокОшибок - СписокЗначений - Информация о ошибках.
Функция ПроверитьАдрес(Знач АдресВXML, ПараметрыПроверки = Неопределено) Экспорт
	Возврат УправлениеКонтактнойИнформациейСлужебный.ПроверитьАдресВXML(АдресВXML, ПараметрыПроверки);
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Обратная совместимость.

// Преобразует данные формата XML в предыдущий формат контактной информации.
//
// Параметры:
//    Данные                 - Строка - Строка XML соответствующая XDTO пакету Адрес.
//    СокращенныйСоставПолей - Булево - Если Ложь, то из состава полей будут исключены
//                                      поля, отсутствующие в версиях БСП младше 2.1.3.
//
// Возвращаемое значение:
//    Строка - набор пар ключ-значение, разделенных переносом строки.
//
Функция ПредыдущийФорматКонтактнойИнформацииXML(Знач Данные, Знач СокращенныйСоставПолей = Ложь) Экспорт
	
	Если УправлениеКонтактнойИнформациейКлиентСервер.ЭтоКонтактнаяИнформацияВXML(Данные) Тогда
		СтарыйФормат = Обработки.РасширенныйВводКонтактнойИнформации.КонтактнаяИнформацияВСтаруюСтруктуру(Данные, СокращенныйСоставПолей);
		Возврат РаботаСАдресамиКлиентСервер.ПреобразоватьСписокПолейВСтроку(СтарыйФормат.ЗначенияПолей, Ложь);
	КонецЕсли;
	
	Возврат Данные;
КонецФункции

// Преобразует данные нового формата XML контактной информации в структуру старого формата.
//
// Параметры:
//   Данные                  - Строка - Строка XML соответствующая XDTO пакету Адрес.
//   ВидКонтактнойИнформации - СправочникСсылка.ВидыКонтактнойИнформации, Структура - Параметры контактной информации.
//     * Тип - ПеречислениеСсылка.ТипыКонтактнойИнформации - Тип контактной информации.
//
// Возвращаемое значение:
//   Структура - набор пар ключ-значение. Состав свойств для адреса:
//        ** Страна           - Строка - Представление страны.
//        ** КодСтраны        - Строка - Код страны по ОКСМ.
//        ** Индекс           - Строка - Почтовый индекс (только для адресов РФ).
//        ** Регион           - Строка - Представление региона РФ (только для адресов РФ).
//        ** КодРегиона       - Строка - Код региона РФ (только для адресов РФ).
//        ** РегионСокращение - Строка - Сокращение региона (если СтарыйСоставПолей = Ложь).
//        ** Район            - Строка - Представление района (только для адресов РФ).
//        ** РайонСокращение  - Строка - Сокращение района (если СтарыйСоставПолей = Ложь).
//        ** Город            - Строка - Представление города (только для адресов РФ).
//        ** ГородСокращение  - Строка - Сокращение города (только для адресов РФ).
//        ** НаселенныйПункт  - Строка - Представление населенного пункта (только для адресов РФ).
//        ** НаселенныйПунктСокращение - Строка - сокращение населенного пункта (если СтарыйСоставПолей = Ложь).
//        ** Улица            - Строка - Представление улицы (только для адресов РФ).
//        ** УлицаСокращение  - Строка - Сокращение улицы (если СтарыйСоставПолей = Ложь).
//        ** ТипДома          - Строка - Тип дома см. РаботаСАдресамиКлиентСервер.ТипыОбъектовАдресацииАдресаРФ.
//        ** Дом              - Строка - Представление дома (только для адресов РФ).
//        ** ТипКорпуса       - Строка - Тип корпуса см. РаботаСАдресамиКлиентСервер.ТипыОбъектовАдресацииАдресаРФ.
//        ** Корпус           - Строка - Представление корпуса (только для адресов РФ).
//        ** ТипКвартиры      - Строка - Тип квартиры см. РаботаСАдресамиКлиентСервер.ТипыОбъектовАдресацииАдресаРФ.
//        ** Квартира         - Строка - Представление квартиры (только для адресов РФ).
//       Состав свойств для телефона:
//        ** КодСтраны        - Строка - Код страны. Например, +7.
//        ** КодГорода        - Строка - Код города. Например, 495.
//        ** НомерТелефона    - Строка - Номер телефона.
//        ** Добавочный       - Строка - Добавочный номер телефона.
//
Функция ПредыдущаяСтруктураКонтактнойИнформацииXML(Знач Данные, Знач ВидКонтактнойИнформации = Неопределено) Экспорт
	
	Если УправлениеКонтактнойИнформациейКлиентСервер.ЭтоКонтактнаяИнформацияВXML(Данные) Тогда
		// Новый формат КИ
		Возврат УправлениеКонтактнойИнформациейКлиентСервер.СтруктураЗначенийПолей(
			ПредыдущийФорматКонтактнойИнформацииXML(Данные));
		
	ИначеЕсли ПустаяСтрока(Данные) И ВидКонтактнойИнформации <> Неопределено Тогда
		// Генерируем по виду
		Возврат УправлениеКонтактнойИнформациейКлиентСервер.СтруктураКонтактнойИнформацииПоТипу(
			ВидКонтактнойИнформации.Тип);
	КонецЕсли;
	
	Если ВидКонтактнойИнформации <> Неопределено
		И ((ТипЗнч(ВидКонтактнойИнформации) = Тип("Структура") И ВидКонтактнойИнформации.Свойство("Тип"))
		ИЛИ ТипЗнч(ВидКонтактнойИнформации) = Тип("СправочникСсылка.ВидыКонтактнойИнформации")) Тогда
			ТипКонтактнойИнформации = ВидКонтактнойИнформации.Тип;
	Иначе
		ТипКонтактнойИнформации = Неопределено;
	КонецЕсли;
	
	// Возвращаем полную структуру для данного вида с заполненными полями.
	Результат = РаботаСАдресамиКлиентСервер.СтруктураКонтактнойИнформацииПоТипу(ТипКонтактнойИнформации);
	СтруктураЗначенийПолей = УправлениеКонтактнойИнформациейКлиентСервер.СтруктураЗначенийПолей(Данные, ВидКонтактнойИнформации);
	Если ТипКонтактнойИнформации <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(Результат, СтруктураЗначенийПолей);
		Возврат Результат;
	КонецЕсли;
	
	Возврат СтруктураЗначенийПолей;
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Определяет страну по умолчанию.
// 
// Возвращаемое значение:
//  СправочникСсылка.СтраныМира - Ссылка на элемент справочника страны мира страны по умолчанию.
//
Функция ОсновнаяСтрана() Экспорт
	Возврат Справочники.СтраныМира.Россия;
КонецФункции

// Возвращает пространство имен для оперирования с XDTO контактной информации.
//
// Возвращаемое значение:
//      Строка - пространство имен.
//
Функция ПространствоИмен() Экспорт
	Возврат "http://www.v8.1c.ru/ssl/contactinfo_ru";
КонецФункции

// Преобразует XML. Обратная совместимость.
//
Функция ПередЧтениемXDTOКонтактнаяИнформация(ТекстXML) Экспорт
	
	Если СтрНайти(ТекстXML, "Адрес") = 0 Тогда
		Возврат ТекстXML;
	КонецЕсли;
	
	Если СтрНайти(ТекстXML, "http://www.v8.1c.ru/ssl/contactinfo_ru") > 0 Тогда
		Возврат ТекстXML;
	КонецЕсли;
	
	ТекстXML = СтрЗаменить(ТекстXML, "xsi:type=""АдресРФ""", "xmlns:rf=""http://www.v8.1c.ru/ssl/contactinfo_ru"" xsi:type=""rf:АдресРФ""");
	
	ТекстXML = СтрЗаменить(ТекстXML, "<СубъектРФ", "<rf:СубъектРФ");
	ТекстXML = СтрЗаменить(ТекстXML, "/СубъектРФ>", "/rf:СубъектРФ>");
	ТекстXML = СтрЗаменить(ТекстXML, "<СубъектРФ/>", "<rf:СубъектРФ/>");
	
	ТекстXML = СтрЗаменить(ТекстXML, "<Округ", "<rf:Округ");
	ТекстXML = СтрЗаменить(ТекстXML, "/Округ>", "/rf:Округ>");
	ТекстXML = СтрЗаменить(ТекстXML, "<Округ/>", "<rf:Округ/>");
	
	ТекстXML = СтрЗаменить(ТекстXML, "<СвРайМО", "<rf:СвРайМО");
	ТекстXML = СтрЗаменить(ТекстXML, "/СвРайМО>", "/rf:СвРайМО>");
	ТекстXML = СтрЗаменить(ТекстXML, "<СвРайМО/>", "<rf:СвРайМО/>");
	
	ТекстXML = СтрЗаменить(ТекстXML, "<Район", "<rf:Район");
	ТекстXML = СтрЗаменить(ТекстXML, "/Район>", "/rf:Район>");
	ТекстXML = СтрЗаменить(ТекстXML, "</Район>", "</rf:Район>");
	
	ТекстXML = СтрЗаменить(ТекстXML, "<Город", "<rf:Город");
	ТекстXML = СтрЗаменить(ТекстXML, "/Город>", "/rf:Город>");
	ТекстXML = СтрЗаменить(ТекстXML, "<Город/>", "<rf:Город/>");
	
	ТекстXML = СтрЗаменить(ТекстXML, "ВнутригРайон", "rf:ВнутригРайон");
	
	ТекстXML = СтрЗаменить(ТекстXML, "НаселПункт", "rf:НаселПункт");
	
	ТекстXML = СтрЗаменить(ТекстXML, "<Улица", "<rf:Улица");
	ТекстXML = СтрЗаменить(ТекстXML, "/Улица>", "/rf:Улица>");
	ТекстXML = СтрЗаменить(ТекстXML, "<Улица/>", "<rf:Улица/>");
	
	ТекстXML = СтрЗаменить(ТекстXML, "ОКТМО", "rf:ОКТМО");
	ТекстXML = СтрЗаменить(ТекстXML, "ОКАТО", "rf:ОКАТО");
	
	ТекстXML = СтрЗаменить(ТекстXML, "ДопАдрЭл", "rf:ДопАдрЭл");
	
	ТекстXML = СтрЗаменить(ТекстXML, "<Номер", "<rf:Номер");
	ТекстXML = СтрЗаменить(ТекстXML, "/Номер>", "/rf:Номер>");
	ТекстXML = СтрЗаменить(ТекстXML, "<Номер/>", "<rf:Номер/>");
	
	ТекстXML = СтрЗаменить(ТекстXML, "<Местоположение", "<rf:Местоположение");
	ТекстXML = СтрЗаменить(ТекстXML, "/Местоположение>", "/rf:Местоположение>");
	ТекстXML = СтрЗаменить(ТекстXML, "<Местоположение/>", "<rf:Местоположение/>");
	
	Возврат ТекстXML;
	
КонецФункции

Функция ПередЗаписьюXDTOКонтактнаяИнформация(ТекстXML) Экспорт
	
	Позиция = СтрНайти(ТекстXML, "АдресРФ""");
	Если Позиция > 0 Тогда
		ПозицияНачало = СтрНайти(ТекстXML, """", НаправлениеПоиска.СКонца, Позиция);
		Префикс = Сред(ТекстXML, ПозицияНачало + 1, Позиция - ПозицияНачало - 2);
		
		ТекстXML = СтрЗаменить(ТекстXML, Префикс +":", "");
		ТекстXML = СтрЗаменить(ТекстXML, " xmlns:"+ Префикс + "=""http://www.v8.1c.ru/ssl/contactinfo_ru""", "");
	КонецЕсли;
	
	Возврат ТекстXML;
КонецФункции

Функция ДополнительныеПравилаПреобразования() Экспорт
	
	КодыДополнительныхАдресныхЭлементов = Новый ТекстовыйДокумент;
	Для Каждого ДополнительныйАдресныйЭлемент Из РаботаСАдресамиКлиентСервер.ТипыОбъектовАдресацииАдресаРФ() Цикл
		КодыДополнительныхАдресныхЭлементов.ДобавитьСтроку("<data:item data:title=""" + ДополнительныйАдресныйЭлемент.Наименование + """>" + ДополнительныйАдресныйЭлемент.Код + "</data:item>");
		КодыДополнительныхАдресныхЭлементов.ДобавитьСтроку("<data:item data:title=""" + НРег(ДополнительныйАдресныйЭлемент.Наименование) + """>" + ДополнительныйАдресныйЭлемент.Код + "</data:item>");
	КонецЦикла;
	
	КодыРегионов = Новый ТекстовыйДокумент;
	ВсеРегионы = ВсеРегионы();
	Если ВсеРегионы <> Неопределено Тогда
		Для Каждого Строка Из ВсеРегионы Цикл
			КодыРегионов.ДобавитьСтроку("<data:item data:code=""" + Формат(Строка.КодСубъектаРФ, "ЧН=; ЧГ=") + """>" 
			+ Строка.Представление + "</data:item>");
		КонецЦикла;
	КонецЕсли;
	
	РасширенныйТекстПреобразования = "
	|  <xsl:template match=""/"" mode=""domestic"">
	|    <xsl:element name=""Состав"">
	|      <xsl:attribute name=""xsi:type"">АдресРФ</xsl:attribute>
	|    
	|      <xsl:element name=""СубъектРФ"">
	|        <xsl:variable name=""value"" select=""tns:Structure/tns:Property[@name='Регион']/tns:Value/text()"" />
	|
	|        <xsl:choose>
	|          <xsl:when test=""0=count($value)"">
	|            <xsl:variable name=""regioncode"" select=""tns:Structure/tns:Property[@name='КодРегиона']/tns:Value/text()""/>
	|            <xsl:variable name=""regiontitle"" select=""$enum-regioncode-nodes/data:item[@data:code=number($regioncode)]"" />
	|              <xsl:if test=""0!=count($regiontitle)"">
	|                <xsl:value-of select=""$regiontitle""/>
	|              </xsl:if>
	|          </xsl:when>
	|          <xsl:otherwise>
	|            <xsl:value-of select=""$value"" />
	|          </xsl:otherwise> 
	|        </xsl:choose>
	|
	|      </xsl:element>
	|   
	|      <xsl:element name=""Округ"">
	|        <xsl:value-of select=""tns:Structure/tns:Property[@name='Округ']/tns:Value/text()""/>
	|      </xsl:element>
	|
	|      <xsl:element name=""СвРайМО"">
	|        <xsl:element name=""Район"">
	|          <xsl:value-of select=""tns:Structure/tns:Property[@name='Район']/tns:Value/text()""/>
	|        </xsl:element>
	|      </xsl:element>
	|  
	|      <xsl:element name=""Город"">
	|        <xsl:value-of select=""tns:Structure/tns:Property[@name='Город']/tns:Value/text()""/>
	|      </xsl:element>
	|    
	|      <xsl:element name=""ВнутригРайон"">
	|        <xsl:value-of select=""tns:Structure/tns:Property[@name='ВнутригРайон']/tns:Value/text()""/>
	|      </xsl:element>
	|
	|      <xsl:element name=""НаселПункт"">
	|        <xsl:value-of select=""tns:Structure/tns:Property[@name='НаселенныйПункт']/tns:Value/text()""/>
	|      </xsl:element>
	|
	|      <xsl:element name=""Улица"">
	|        <xsl:value-of select=""tns:Structure/tns:Property[@name='Улица']/tns:Value/text()""/>
	|      </xsl:element>
	|
	|      <xsl:variable name=""index"" select=""tns:Structure/tns:Property[@name='Индекс']/tns:Value/text()"" />
	|      <xsl:if test=""0!=count($index)"">
	|        <xsl:element name=""ДопАдрЭл"">
	|          <xsl:attribute name=""ТипАдрЭл"">" + РаботаСАдресамиКлиентСервер.КодСериализацииПочтовогоИндекса() + "</xsl:attribute>
	|          <xsl:attribute name=""Значение""><xsl:value-of select=""$index""/></xsl:attribute>
	|        </xsl:element>
	|      </xsl:if>
	|
	|      <xsl:call-template name=""add-elem-number"">
	|        <xsl:with-param name=""source"" select=""tns:Structure/tns:Property[@name='ТипДома']/tns:Value/text()"" />
	|        <xsl:with-param name=""defsrc"" select=""'Дом'"" />
	|        <xsl:with-param name=""value""  select=""tns:Structure/tns:Property[@name='Дом']/tns:Value/text()"" />
	|      </xsl:call-template>
	|
	|      <xsl:call-template name=""add-elem-number"">
	|        <xsl:with-param name=""source"" select=""tns:Structure/tns:Property[@name='ТипКорпуса']/tns:Value/text()"" />
	|        <xsl:with-param name=""defsrc"" select=""'Корпус'"" />
	|        <xsl:with-param name=""value""  select=""tns:Structure/tns:Property[@name='Корпус']/tns:Value/text()"" />
	|      </xsl:call-template>
	|
	|      <xsl:call-template name=""add-elem-number"">
	|        <xsl:with-param name=""source"" select=""tns:Structure/tns:Property[@name='ТипКвартиры']/tns:Value/text()"" />
	|        <xsl:with-param name=""defsrc"" select=""'Квартира'"" />
	|        <xsl:with-param name=""value""  select=""tns:Structure/tns:Property[@name='Квартира']/tns:Value/text()"" />
	|      </xsl:call-template>
	|    
	|    </xsl:element>
	|  </xsl:template>
	|
	|  <xsl:param name=""enum-codevalue"">
	|" + КодыДополнительныхАдресныхЭлементов.ПолучитьТекст() + "
	|  </xsl:param>
	|  <xsl:variable name=""enum-codevalue-nodes"" select=""exsl:node-set($enum-codevalue)"" />
	|
	|  <xsl:param name=""enum-regioncode"">
	|" + КодыРегионов.ПолучитьТекст() + "
	|  </xsl:param>
	|  <xsl:variable name=""enum-regioncode-nodes"" select=""exsl:node-set($enum-regioncode)"" />
	|  
	|  <xsl:template name=""add-elem-number"">
	|    <xsl:param name=""source"" />
	|    <xsl:param name=""defsrc"" />
	|    <xsl:param name=""value"" />
	|
	|    <xsl:if test=""0!=count($value)"">
	|
	|      <xsl:choose>
	|        <xsl:when test=""0!=count($source)"">
	|          <xsl:variable name=""type-code"" select=""$enum-codevalue-nodes/data:item[@data:title=$source]"" />
	|          <xsl:element name=""ДопАдрЭл"">
	|            <xsl:element name=""Номер"">
	|              <xsl:attribute name=""Тип""><xsl:value-of select=""$type-code"" /></xsl:attribute>
	|              <xsl:attribute name=""Значение""><xsl:value-of select=""$value""/></xsl:attribute>
	|            </xsl:element>
	|          </xsl:element>
	|
	|        </xsl:when>
	|        <xsl:otherwise>
	|          <xsl:variable name=""type-code"" select=""$enum-codevalue-nodes/data:item[@data:title=$defsrc]"" />
	|          <xsl:element name=""ДопАдрЭл"">
	|            <xsl:element name=""Номер"">
	|              <xsl:attribute name=""Тип""><xsl:value-of select=""$type-code"" /></xsl:attribute>
	|              <xsl:attribute name=""Значение""><xsl:value-of select=""$value""/></xsl:attribute>
	|            </xsl:element>
	|          </xsl:element>
	|
	|        </xsl:otherwise>
	|      </xsl:choose>
	|
	|    </xsl:if>
	|  
	|  </xsl:template>
	|  
	|</xsl:stylesheet>";
	
	Возврат РасширенныйТекстПреобразования;
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Возвращает список всех регионов адресного классификатора.
//
// Возвращаемое значение:
//   ТаблицаЗначений - содержит колонки:
//      * КодСубъектаРФ - Число                   - Код региона.
//      * Идентификатор - УникальныйИдентификатор - Идентификатор региона.
//      * Представление - Строка                  - Наименование и сокращение региона.
//      * Загружено     - Булево                  - Истина, если классификатор по данному региону сейчас загружен.
//      * ДатаВерсии    - Дата                    - UTC версия загруженных данных.
//   Неопределено    - если нет подсистемы адресного классификатора.
// 
Функция ВсеРегионы()
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.АдресныйКлассификатор") Тогда
		МодульАдресныйКлассификаторСлужебный = ОбщегоНазначения.ОбщийМодуль("АдресныйКлассификаторСлужебный");
		Возврат МодульАдресныйКлассификаторСлужебный.СведенияОЗагрузкеСубъектовРФ();
	КонецЕсли;
	Возврат Неопределено;
	
КонецФункции

// Преобразует формат из XML в JSON
//
Функция КонтактнаяИнформацияВСтруктуруJSON(КонтактнаяИнформация, Знач Тип = Неопределено, Представление = "", ОбновлятьИдентификаторы = Истина) Экспорт
	
	Если Тип <> Неопределено И ТипЗнч(Тип) <> Тип("ПеречислениеСсылка.ТипыКонтактнойИнформации") Тогда
		Тип = УправлениеКонтактнойИнформацией.ТипВидаКонтактнойИнформации(Тип);
	КонецЕсли;
	
	Если Тип = Неопределено Тогда
		
		Если ТипЗнч(КонтактнаяИнформация) = Тип("Строка") Тогда
			Тип = УправлениеКонтактнойИнформацией.ТипКонтактнойИнформации(КонтактнаяИнформация);
		ИначеЕсли ТипЗнч(КонтактнаяИнформация) = Тип("ОбъектXDTO") Тогда
			ПространствоИмен = УправлениеКонтактнойИнформацией.ПространствоИмен();
			
			НайденТип = ?(КонтактнаяИнформация.Состав = Неопределено, Неопределено, КонтактнаяИнформация.Состав.Тип());
			Тип = УправлениеКонтактнойИнформацией.СоответствиеXDTOТиповКонтактнойИнформации(НайденТип);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если УправлениеКонтактнойИнформацией.ДоступныМодулиРаботаСАдресами() Тогда
		
		Результат = ОписаниеНовойКонтактнойИнформации(Тип);
		ОсновнаяСтрана = ОсновнаяСтрана();
	Иначе
		Результат = УправлениеКонтактнойИнформациейКлиентСервер.ОписаниеНовойКонтактнойИнформации(Тип);
		ОсновнаяСтрана = "";
	КонецЕсли;
	
	НаименованиеСтраны = "";
	Формат9Запятых = Ложь;
	
	Если ТипЗнч(КонтактнаяИнформация) = Тип("Строка") Тогда
		
		Если УправлениеКонтактнойИнформациейКлиентСервер.ЭтоКонтактнаяИнформацияВXML(КонтактнаяИнформация) Тогда
			// XML
			РезультатПреобразования = Новый Структура;
			XDTOКонтактнаяИнформация = УправлениеКонтактнойИнформациейЛокализация.КонтактнаяИнформацияИзXML(КонтактнаяИнформация, Тип, РезультатПреобразования, Представление);
			Результат.Value   = XDTOКонтактнаяИнформация.Представление;
			Результат.Comment = XDTOКонтактнаяИнформация.Комментарий;
		Иначе
			Если СтрЧислоВхождений(КонтактнаяИнформация, ",") = 9 И СтрНайти(КонтактнаяИнформация, "=") = 0 Тогда
				Формат9Запятых = Истина;
				АдресРФ        = КонтактнаяИнформация;
			Иначе
				// ключ-значение формат
				Результат = ПреобразоватьКлючЗначениеВСтруктуру(КонтактнаяИнформация, Представление);
				Возврат Результат;
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(КонтактнаяИнформация) = Тип("Структура") Тогда
		
		Возврат СтруктураАдресаВСтруктуруJSON(КонтактнаяИнформация);
		
	ИначеЕсли ТипЗнч(КонтактнаяИнформация) = Тип("ОбъектXDTO") Тогда
		
		XDTOКонтактнаяИнформация = КонтактнаяИнформация;
		Результат.Value          = XDTOКонтактнаяИнформация.Представление;
		Результат.Comment        = XDTOКонтактнаяИнформация.Комментарий;
		
	КонецЕсли;
	
	Если Тип <> Перечисления.ТипыКонтактнойИнформации.Адрес И Тип <> Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
		Возврат Результат;
	КонецЕсли;

	Если НЕ Формат9Запятых Тогда
		
		ПространствоИмен = УправлениеКонтактнойИнформациейЛокализация.ПространствоИмен();
		Состав = XDTOКонтактнаяИнформация.Состав;
		
		Если Состав = Неопределено Тогда
			Возврат Результат;
		КонецЕсли;
		
		XDTOТип = Состав.Тип();
		
		Если XDTOТип = ФабрикаXDTO.Тип(ПространствоИмен, "Адрес") Тогда
			
			Результат.Вставить("Country", Состав.Страна);
			Страна = ?(ПустаяСтрока(Состав.Страна),
					ОсновнаяСтрана,
					Справочники.СтраныМира.НайтиПоНаименованию(Состав.Страна, Истина));
			НаименованиеСтраны = Страна.Наименование;
			Результат.Вставить("CountryCode", СокрЛП(Страна.Код));
			
			АдресРФ = Состав.Состав;
			
		ИначеЕсли 
			XDTOТип = ФабрикаXDTO.Тип(УправлениеКонтактнойИнформациейЛокализация.ПространствоИмен(), "НомерТелефона")
			Или XDTOТип = ФабрикаXDTO.Тип(УправлениеКонтактнойИнформациейЛокализация.ПространствоИмен(), "НомерФакса") Тогда
			
			Результат.CountryCode = Состав.КодСтраны;
			Результат.AreaCode    = Состав.КодГорода;
			Результат.Number      = Состав.Номер;
			Результат.ExtNumber   = Состав.Добавочный;
			
			Возврат Результат;
			
		ИначеЕсли XDTOТип = ФабрикаXDTO.Тип(ПространствоИмен(), "АдресРФ") Тогда
			АдресРФ = Состав;
		Иначе
			Возврат Результат;
		КонецЕсли;
		
		Если АдресРФ = Неопределено Тогда
			Возврат Результат;
		ИначеЕсли ТипЗнч(АдресРФ) = Тип("Строка") Тогда
			
			Если СтрЧислоВхождений(АдресРФ, ",") = 9 Тогда
				
				Если УправлениеКонтактнойИнформацией.ЭтоСтранаУчастникЕАЭС(Результат.Country) Тогда
					Результат.AddressType = УправлениеКонтактнойИнформациейКлиентСервер.АдресЕАЭС();
				Иначе
					Результат.AddressType = УправлениеКонтактнойИнформациейКлиентСервер.ИностранныйАдрес();
				КонецЕсли;
				
				ЧастиАдреса = СтрРазделить(АдресРФ, ",");
				Результат.ZIPCode = ЧастиАдреса[1];
				
				НаименованиеСокращение = УправлениеКонтактнойИнформациейКлиентСервер.НаименованиеСокращение(ЧастиАдреса[2]);
				Результат.Area     = НаименованиеСокращение.Наименование;
				Результат.AreaType = НаименованиеСокращение.Сокращение;
				
				НаименованиеСокращение = УправлениеКонтактнойИнформациейКлиентСервер.НаименованиеСокращение(ЧастиАдреса[3]);
				Результат.District     = НаименованиеСокращение.Наименование;
				Результат.DistrictType = НаименованиеСокращение.Сокращение;
				
				НаименованиеСокращение = УправлениеКонтактнойИнформациейКлиентСервер.НаименованиеСокращение(ЧастиАдреса[4]);
				Результат.City         = НаименованиеСокращение.Наименование;
				Результат.CityType     = НаименованиеСокращение.Сокращение;
				
				НаименованиеСокращение = УправлениеКонтактнойИнформациейКлиентСервер.НаименованиеСокращение(ЧастиАдреса[5]);
				Результат.Locality     = НаименованиеСокращение.Наименование;
				Результат.LocalityType = НаименованиеСокращение.Сокращение;
				
				НаименованиеСокращение = УправлениеКонтактнойИнформациейКлиентСервер.НаименованиеСокращение(ЧастиАдреса[6]);
				Результат.Street       = НаименованиеСокращение.Наименование;
				Результат.StreetType   = НаименованиеСокращение.Сокращение;
				
				НаименованиеСокращение = УправлениеКонтактнойИнформациейКлиентСервер.НаименованиеСокращение(ЧастиАдреса[7]);
				Результат.HouseNumber  = НаименованиеСокращение.Сокращение;
				Результат.HouseType    = НаименованиеСокращение.Наименование;
				
				Если ЗначениеЗаполнено(ЧастиАдреса[8]) Тогда
					НаименованиеСокращение = УправлениеКонтактнойИнформациейКлиентСервер.НаименованиеСокращение(ЧастиАдреса[8]);
					Результат.Buildings.Добавить(УправлениеКонтактнойИнформациейКлиентСервер.ЗначениеСтроенияИлиПомещения(
						НаименованиеСокращение.Наименование, НаименованиеСокращение.Сокращение));
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ЧастиАдреса[9]) Тогда
					НаименованиеСокращение = УправлениеКонтактнойИнформациейКлиентСервер.НаименованиеСокращение(ЧастиАдреса[9]);
					Результат.Apartments.Добавить(УправлениеКонтактнойИнформациейКлиентСервер.ЗначениеСтроенияИлиПомещения(
						НаименованиеСокращение.Наименование, НаименованиеСокращение.Сокращение));
				КонецЕсли;
			КонецЕсли;
		Иначе
			
			Если ЗначениеЗаполнено(АдресРФ.Адрес_по_документу) Или (ПустаяСтрока(АдресРФ.СубъектРФ) И ЗначениеЗаполнено(Результат.Value)) Тогда
				Результат.AddressType = УправлениеКонтактнойИнформациейКлиентСервер.АдресВСвободнойФорме();
			Иначе
				Результат.AddressType = РаботаСАдресамиКлиентСервер.АдминистративноТерриториальныйАдрес();
			КонецЕсли;
			
			Результат.Country = НаименованиеСтраны;
			Результат.ZIPCode = Обработки.РасширенныйВводКонтактнойИнформации.ПочтовыйИндексАдреса(АдресРФ);
			Результат.OKTMO = Формат(АдресРФ.ОКТМО, "ЧГ=0");
			Результат.OKATO = Формат(АдресРФ.ОКАТО, "ЧГ=0");
			
			СубъектРФ = УправлениеКонтактнойИнформациейКлиентСервер.НаименованиеСокращение(АдресРФ.СубъектРФ);
			Результат.Area     = Строка(СубъектРФ.Наименование);
			Результат.AreaType = Строка(СубъектРФ.Сокращение);
			
			РайонАдреса = УправлениеКонтактнойИнформациейКлиентСервер.НаименованиеСокращение(РайонАдреса(АдресРФ));
			Результат.District     = Строка(РайонАдреса.Наименование);
			Результат.DistrictType = Строка(РайонАдреса.Сокращение);
			
			Город = УправлениеКонтактнойИнформациейКлиентСервер.НаименованиеСокращение(АдресРФ.Город);
			Результат.City     = Строка(Город.Наименование);
			Результат.CityType = Строка(Город.Сокращение);
			
			НаселПункт = УправлениеКонтактнойИнформациейКлиентСервер.НаименованиеСокращение(АдресРФ.НаселПункт);
			Результат.Locality     = Строка(НаселПункт.Наименование);
			Результат.LocalityType = Строка(НаселПункт.Сокращение);
			
			Улица = УправлениеКонтактнойИнформациейКлиентСервер.НаименованиеСокращение(АдресРФ.Улица);
			Результат.Street     = Строка(Улица.Наименование);
			Результат.StreetType = Строка(Улица.Сокращение);
			
			ВнутригРайон = УправлениеКонтактнойИнформациейКлиентСервер.НаименованиеСокращение(АдресРФ.ВнутригРайон);
			Результат.CityDistrict     = Строка(ВнутригРайон.Наименование);
			Результат.CityDistrictType = Строка(ВнутригРайон.Сокращение);
			
			ЗначениеДополнительныхЭлементов = Обработки.РасширенныйВводКонтактнойИнформации.ЗначениеДополнительныхЭлементов(АдресРФ);
			Если ЗначениеЗаполнено(ЗначениеДополнительныхЭлементов.ДополнительныйЭлемент) Тогда
				ДополнительныйЭлемент = УправлениеКонтактнойИнформациейКлиентСервер.НаименованиеСокращение(ЗначениеДополнительныхЭлементов.ДополнительныйЭлемент);
				Результат.Territory     = Строка(ДополнительныйЭлемент.Наименование);
				Результат.TerritoryType = Строка(ДополнительныйЭлемент.Сокращение);
			КонецЕсли;
			Если ЗначениеЗаполнено(ЗначениеДополнительныхЭлементов.ПодчиненныйЭлемент) Тогда
				ПодчиненныйЭлемент = УправлениеКонтактнойИнформациейКлиентСервер.НаименованиеСокращение(ЗначениеДополнительныхЭлементов.ПодчиненныйЭлемент);
				Результат.Street     = Строка(ПодчиненныйЭлемент.Наименование);
				Результат.StreetType = Строка(ПодчиненныйЭлемент.Сокращение);
			КонецЕсли;
			
			ЗданияИПомещения = Обработки.РасширенныйВводКонтактнойИнформации.ЗданияИПомещенияАдреса(АдресРФ);
			Для каждого Здание Из ЗданияИПомещения.Здания Цикл
				Если Здание.Вид = 1 Тогда
					Результат.HouseType = Здание.Тип;
					Результат.HouseNumber = Здание.Значение;
				Иначе
					Результат.Buildings.Добавить(УправлениеКонтактнойИнформациейКлиентСервер.ЗначениеСтроенияИлиПомещения(Здание.Тип, Здание.Значение));
				КонецЕсли;
			КонецЦикла;
			
			Для каждого Помещение Из ЗданияИПомещения.Помещения Цикл
				Результат.Apartments.Добавить(УправлениеКонтактнойИнформациейКлиентСервер.ЗначениеСтроенияИлиПомещения(Помещение.Тип, Помещение.Значение));
			КонецЦикла;
			
		КонецЕсли;
	КонецЕсли;
	
	Если ОбновлятьИдентификаторы И ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.АдресныйКлассификатор") Тогда
		МодульАдресныйКлассификаторСлужебный = ОбщегоНазначения.ОбщийМодуль("АдресныйКлассификаторСлужебный");
		МодульАдресныйКлассификаторСлужебный.УстановитьИдентификаторыАдреса(Результат);
	КонецЕсли;
	
	Возврат Результат;   
КонецФункции

	// Описание национальных полей структуры контактной информации для хранения ее в формате JSON.
// Основной список полей определяется в одноименной функции общего модуля УправлениеКонтактнойИнформациейКлиентСервер.
//
// Параметры:
//    ТипКонтактнойИнформации  - ПеречислениеСсылка.ТипыКонтактнойИнформации -
//                                Тип контактной информации, определяющий состав полей контактной информации.
//
// Возвращаемое значение:
//   Структура - поля контактной информации для типа Адрес добавленные к основным полям:
//     * ID - Строка -  идентификационный код последнего адресного объекта в иерархи адреса.
//     * AddressType - Строка - установленный пользователем тип адреса(только для адресов РФ).
//                              Варианты: "Муниципальный", "Административно-территориальный".
//     * AreaCode - Строка - код региона РФ.
//     * AreaID - Строка - идентификатор региона.
//     * District - Строка - представление района у адресов по административно-территориальному делению.
//     * DistrictType - Строка - сокращение района у адресов по административно-территориальному делению.
//     * DistrictID - Строка - идентификатор региона у адресов по административно-территориальному делению.
//     * MunDistrict - Строка - представление муниципального района у адресов по муниципальному делению.
//     * MunDistrictType - Строка - сокращение муниципального района у адресов по муниципальному делению.
//     * MunDistrictID - Строка - идентификатор муниципального района у адресов по муниципальному делению.
//     * CityID - Строка - идентификатор муниципального города у адресов по административно-территориальному делению.
//     * Settlement - Строка - представление поселения у адресов по муниципальному делению.
//     * SettlementType - Строка - сокращение поселения у адресов по муниципальному делению.
//     * SettlementID - Строка - идентификатор поселения.
//     * CityDistrict - Строка - представление внутригородского района.
//     * CityDistrictType - Строка - сокращение внутригородского района.
//     * CityDistrictID - Строка - идентификатор внутригородского района.
//     * Territory - Строка - представление территории.
//     * TerritoryType - Строка - сокращение территории.
//     * TerritoryID - Строка - идентификатор территории.
//     * Locality - Строка - представление населенного пункта.
//     * LocalityType - Строка - сокращение населенного пункта.
//     * LocalityID - Строка - идентификатор населенного пункта.
//     * StreetID - Строка - идентификатор улицы.
//     * HouseType - Строка - тип дома, владения.
//     * HouseNumber - Строка - номер дома, владения.
//     * HouseID - Строка - идентификатор дома.
//     * Buildings - Массив - содержит структуры(поля структуры: type, number) с перечнем корпусов (строений) адреса.
//     * Apartments - Массив - содержит структуры(поля структуры: type, number) с перечнем помещений адреса.
//     * CodeKLADR - Строка - код КЛАДР.
//     * OKTMO - Строка - код ОКТМО.
//     * OKATO - Строка - код ОКАТО.
//     * IFNSFLCode - Строка - код ИФНСФЛ.
//     * IFNSULCode - Строка - код ИФНСЮЛ.
//     * IFNSFLAreaCode - Строка - код участка ИФНСФЛ.
//     * IFNSULAreaCode - Строка - код участка ИФНСЮЛ.
//
Функция ОписаниеНовойКонтактнойИнформации(Знач ТипКонтактнойИнформации) Экспорт
	
	Если ТипЗнч(ТипКонтактнойИнформации) <> Тип("ПеречислениеСсылка.ТипыКонтактнойИнформации") Тогда
		ТипКонтактнойИнформации = "";
	КонецЕсли;
	
	Результат = УправлениеКонтактнойИнформациейКлиентСервер.ОписаниеНовойКонтактнойИнформации(ТипКонтактнойИнформации);
	
	Если ТипКонтактнойИнформации = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Адрес") Тогда
		
		Результат.Вставить("id",               "");
		Результат.Вставить("areaCode",         "");
		Результат.Вставить("areaId",           "");
		Результат.Вставить("district",         "");
		Результат.Вставить("districtType",     "");
		Результат.Вставить("districtId",       "");
		Результат.Вставить("munDistrict",      "");
		Результат.Вставить("munDistrictType",  "");
		Результат.Вставить("munDistrictId",    "");
		Результат.Вставить("cityId",           "");
		Результат.Вставить("settlement",       "");
		Результат.Вставить("settlementType",   "");
		Результат.Вставить("settlementId",     "");
		Результат.Вставить("cityDistrict",     "");
		Результат.Вставить("cityDistrictType", "");
		Результат.Вставить("cityDistrictId",   "");
		Результат.Вставить("territory",        "");
		Результат.Вставить("territoryType",    "");
		Результат.Вставить("territoryId",      "");
		Результат.Вставить("locality",         "");
		Результат.Вставить("localityType",     "");
		Результат.Вставить("localityId",       "");
		Результат.Вставить("streetId",         "");
		Результат.Вставить("houseType",        "");
		Результат.Вставить("houseNumber",      "");
		Результат.Вставить("houseId",          "");
		Результат.Вставить("buildings",        Новый Массив);
		Результат.Вставить("apartments",       Новый Массив);
		Результат.Вставить("codeKLADR",        "");
		Результат.Вставить("oktmo",            "");
		Результат.Вставить("okato",            "");
		Результат.Вставить("asInDocument",     "");
		Результат.Вставить("ifnsFLCode",       "");
		Результат.Вставить("ifnsULCode",       "");
		Результат.Вставить("ifnsFLAreaCode",   "");
		Результат.Вставить("ifnsULAreaCode",   "");
		Результат.Вставить("stead",            "");
		Результат.Вставить("steadId",          "");
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции    

Функция СтруктураАдресаВСтруктуруJSON(Знач КонтактнаяИнформация)
	
	ОписаниеКонтактнойИнформации = РаботаСАдресамиКлиентСервер.ОписаниеНовойКонтактнойИнформации(Перечисления.ТипыКонтактнойИнформации.Адрес);
	
	СоответствиеПолей = Новый Соответствие();
	СоответствиеПолей.Вставить("ТипАдреса",                      "addressType");
	СоответствиеПолей.Вставить("Представление",                  "value");
	СоответствиеПолей.Вставить("Комментарий",                    "comment");
	СоответствиеПолей.Вставить("НаименованиеСтраны",             "country");
	СоответствиеПолей.Вставить("Страна",                         "country");
	СоответствиеПолей.Вставить("Индекс",                         "ZIPCode");
	СоответствиеПолей.Вставить("ОКТМО",                          "oktmo");
	СоответствиеПолей.Вставить("ОКАТО",                          "okato");
	СоответствиеПолей.Вставить("Регион",                         "area");
	СоответствиеПолей.Вставить("РегионСокращение",               "areaType");
	СоответствиеПолей.Вставить("Район",                          "district");
	СоответствиеПолей.Вставить("РайонСокращение",                "districtType");
	СоответствиеПолей.Вставить("Город",                          "city");
	СоответствиеПолей.Вставить("ГородСокращение",                "cityType");
	СоответствиеПолей.Вставить("НаселенныйПункт",                "locality");
	СоответствиеПолей.Вставить("НаселенныйПунктСокращение",      "localityType");
	СоответствиеПолей.Вставить("Улица",                          "street");
	СоответствиеПолей.Вставить("УлицаСокращение",                "streetType");
	СоответствиеПолей.Вставить("КодРегиона",                     "areaCode");
	СоответствиеПолей.Вставить("МуниципальныйРайон",             "munDistrict");
	СоответствиеПолей.Вставить("МуниципальныйРайонСокращение",   "munDistrictType");
	СоответствиеПолей.Вставить("Поселение",                      "settlement");
	СоответствиеПолей.Вставить("ПоселениеСокращение",            "settlementType");
	СоответствиеПолей.Вставить("ВнутригородскойРайон",           "cityDistrict");
	СоответствиеПолей.Вставить("ВнутригородскойРайонСокращение", "cityDistrictType");
	СоответствиеПолей.Вставить("Территория",                     "territory");
	СоответствиеПолей.Вставить("ТерриторияСокращение",           "territoryType");
	СоответствиеПолей.Вставить("ИдентификаторАдресногоОбъекта",  "id");
	СоответствиеПолей.Вставить("ИдентификаторДома",              "houseId");
	СоответствиеПолей.Вставить("Дом",                            "houseNumber");
	СоответствиеПолей.Вставить("ТипДома",                        "houseType");
	
	Для каждого ПолеКонтактнойИнформации Из КонтактнаяИнформация Цикл
		ИмяПоля = СоответствиеПолей.Получить(ПолеКонтактнойИнформации.Ключ);
		Если ИмяПоля <> Неопределено Тогда
			ОписаниеКонтактнойИнформации[ИмяПоля] = ПолеКонтактнойИнформации.Значение;
		КонецЕсли;
	КонецЦикла;
	
	Если КонтактнаяИнформация.Свойство("ТипАдреса") И РаботаСАдресамиКлиентСервер.ЭтоМуниципальныйАдрес(КонтактнаяИнформация.ТипАдреса) Тогда
		ОписаниеКонтактнойИнформации.AddressType = РаботаСАдресамиКлиентСервер.МуниципальныйАдрес();
		Если КонтактнаяИнформация.Свойство("МуниципальноеПредставление") И ЗначениеЗаполнено(КонтактнаяИнформация.МуниципальноеПредставление) Тогда
			ОписаниеКонтактнойИнформации.value = КонтактнаяИнформация.МуниципальноеПредставление;
		КонецЕсли;
	Иначе
		ОписаниеКонтактнойИнформации.AddressType = РаботаСАдресамиКлиентСервер.АдминистративноТерриториальныйАдрес();
	КонецЕсли;
	
	Если КонтактнаяИнформация.Свойство("Здание")
		 И ТипЗнч(КонтактнаяИнформация.Здание) = Тип("Структура")
		 И КонтактнаяИнформация.Здание.Свойство("Номер") Тогда
		
			ОписаниеКонтактнойИнформации.HouseNumber = ?(КонтактнаяИнформация.Здание.Свойство("Номер"), КонтактнаяИнформация.Здание.Номер, "");
			ОписаниеКонтактнойИнформации.HouseType = ?(КонтактнаяИнформация.Здание.Свойство("ТипЗдания"), КонтактнаяИнформация.Здание.ТипЗдания, "Дом"); // Тип владения не локализуется
		
	КонецЕсли;
	
	Если КонтактнаяИнформация.Свойство("Корпус")И ЗначениеЗаполнено(КонтактнаяИнформация.Корпус) Тогда
		
		ТипКорпуса = ?(КонтактнаяИнформация.Свойство("ТипКорпуса"), КонтактнаяИнформация.ТипКорпуса, "Корпус"); // Тип владения не локализуется
		ОписаниеКонтактнойИнформации.buildings.Добавить(УправлениеКонтактнойИнформациейКлиентСервер.ЗначениеСтроенияИлиПомещения(ТипКорпуса, КонтактнаяИнформация.Корпус));
		
	ИначеЕсли КонтактнаяИнформация.Свойство("Корпуса")И ТипЗнч(КонтактнаяИнформация.Корпуса) = Тип("Массив") Тогда
		Для каждого Корпус Из КонтактнаяИнформация.Корпуса Цикл
			
			ТипКорпуса = ?(Корпус.Свойство("ТипКорпуса"), Корпус.ТипКорпуса, Корпус.Тип);
			ОписаниеКонтактнойИнформации.buildings.Добавить(
				УправлениеКонтактнойИнформациейКлиентСервер.ЗначениеСтроенияИлиПомещения(ТипКорпуса, Корпус.Номер));
				
		КонецЦикла;
		
	КонецЕсли;
	
	Если КонтактнаяИнформация.Свойство("Квартира") И ЗначениеЗаполнено(КонтактнаяИнформация.Квартира) Тогда
		
		ТипКвартиры = ?(КонтактнаяИнформация.Свойство("ТипКвартиры"), КонтактнаяИнформация.ТипКвартиры, "Квартира"); // Тип помещения не локализуется
		ОписаниеКонтактнойИнформации.apartments.Добавить(УправлениеКонтактнойИнформациейКлиентСервер.ЗначениеСтроенияИлиПомещения(ТипКвартиры, КонтактнаяИнформация.Квартира));
		
	ИначеЕсли КонтактнаяИнформация.Свойство("Помещения")И ТипЗнч(КонтактнаяИнформация.Помещения) = Тип("Массив") Тогда
		
		Для каждого Помещение Из КонтактнаяИнформация.Помещения Цикл
			
			ТипПомещения = ?(Помещение.Свойство("ТипПомещения"), Помещение.ТипПомещения, Помещение.Тип);
			ОписаниеКонтактнойИнформации.apartments.Добавить(
				УправлениеКонтактнойИнформациейКлиентСервер.ЗначениеСтроенияИлиПомещения(ТипПомещения, Помещение.Номер));
		КонецЦикла;
		
	КонецЕсли;
	
	Если ПустаяСтрока(ОписаниеКонтактнойИнформации.value) Тогда
		ОписаниеКонтактнойИнформации.value = РаботаСАдресамиКлиентСервер.ПредставлениеАдреса(ОписаниеКонтактнойИнформации, Ложь,
			ОписаниеКонтактнойИнформации.AddressType);
	КонецЕсли;
	
	Возврат ОписаниеКонтактнойИнформации;
	
КонецФункции      

Функция ПреобразоватьКлючЗначениеВСтруктуру(Знач ЗначенияПолей, Знач Представление)
	
	Перем АдресРоссийский, ИмяПоля, НазваниеОсновнойСтраны, ПолеПредставления, Результат, СписокПолей, ТипАдреса, ТипДомаНеопределен, ТипЗначенийПолей, ТипКвартирыНеопределен, ТипКорпусаНеопределен, ЭлементДом, ЭлементКвартира, ЭлементКорпус, ЭлементСписка;
	
	// Старый формат через разделитель строк и равенство.
	
	Результат = РаботаСАдресамиКлиентСервер.ОписаниеНовойКонтактнойИнформации(Перечисления.ТипыКонтактнойИнформации.Адрес);
	Результат.Comment = "";
	
	НазваниеОсновнойСтраны  = ВРег(РаботаСАдресамиКлиентСервер.ОсновнаяСтрана().Наименование);
	ЭлементКвартира = Неопределено;
	ЭлементКорпус   = Неопределено;
	ЭлементДом      = Неопределено;
	
	Результат.Country = НазваниеОсновнойСтраны; // Страна по умолчанию
	АдресРоссийский = Истина;
	
	ТипЗначенийПолей = ТипЗнч(ЗначенияПолей);
	Если ТипЗначенийПолей = Тип("СписокЗначений") Тогда
		СписокПолей = ЗначенияПолей;
	ИначеЕсли ТипЗначенийПолей = Тип("Структура") Тогда
		СписокПолей = УправлениеКонтактнойИнформациейСлужебный.ПреобразоватьСтрокуВСписокПолей(
			СтрокаПолей(ЗначенияПолей, Ложь));
	Иначе
		// Уже преобразовано в строку
		СписокПолей = УправлениеКонтактнойИнформациейСлужебный.ПреобразоватьСтрокуВСписокПолей(ЗначенияПолей);
	КонецЕсли;
	
	ТипКвартирыНеопределен = Истина;
	ТипКорпусаНеопределен  = Истина;
	ТипДомаНеопределен     = Истина;
	ПолеПредставления      = "";
	
	Для Каждого ЭлементСписка Из СписокПолей Цикл
		ИмяПоля = ВРег(ЭлементСписка.Представление);
		
		Если ИмяПоля = "ИНДЕКС" Тогда
			Результат.ZIPcode = ЭлементСписка.Значение;
			
		ИначеЕсли ИмяПоля = "СТРАНА" Тогда
			Результат.Country = ЭлементСписка.Значение;
			Если ВРег(ЭлементСписка.Значение) <> НазваниеОсновнойСтраны Тогда
				АдресРоссийский = Ложь;
			КонецЕсли;
			
		ИначеЕсли ИмяПоля = "КОДСТРАНЫ" Тогда
			
			Результат.countryCode =  ЭлементСписка.Значение;
			
		ИначеЕсли ИмяПоля = "КОДРЕГИОНА" Тогда
			
			Результат.areaCode = ЭлементСписка.Значение;
			НаименованиеИТип = УправлениеКонтактнойИнформациейКлиентСервер.НаименованиеСокращение(РегионКода(ЭлементСписка.Значение));
			Результат.area = НаименованиеИТип.Наименование;
			Результат.areaType = СокрЛП(НаименованиеИТип.Сокращение);
			
		ИначеЕсли ИмяПоля = "РЕГИОН" Тогда
			
			НаименованиеИТип = УправлениеКонтактнойИнформациейКлиентСервер.НаименованиеСокращение(ЭлементСписка.Значение);
			Результат.area = НаименованиеИТип.Наименование;
			Результат.areaType = НаименованиеИТип.Сокращение;
			
		ИначеЕсли ИмяПоля = "РАЙОН" Тогда
			
			НаименованиеИТип = УправлениеКонтактнойИнформациейКлиентСервер.НаименованиеСокращение(ЭлементСписка.Значение);
			Результат.district = НаименованиеИТип.Наименование;
			Результат.districtType = НаименованиеИТип.Сокращение;
			
		ИначеЕсли ИмяПоля = "ГОРОД" Тогда
			
			НаименованиеИТип = УправлениеКонтактнойИнформациейКлиентСервер.НаименованиеСокращение(ЭлементСписка.Значение);
			Результат.city = НаименованиеИТип.Наименование;
			Результат.cityType = НаименованиеИТип.Сокращение;
			
		ИначеЕсли ИмяПоля = "НАСЕЛЕННЫЙПУНКТ" Тогда
			
			НаименованиеИТип = УправлениеКонтактнойИнформациейКлиентСервер.НаименованиеСокращение(ЭлементСписка.Значение);
			Результат.locality = НаименованиеИТип.Наименование;
			Результат.localityType = НаименованиеИТип.Сокращение;
			
		ИначеЕсли ИмяПоля = "УЛИЦА" Тогда
			
			НаименованиеИТип = УправлениеКонтактнойИнформациейКлиентСервер.НаименованиеСокращение(ЭлементСписка.Значение);
			Результат.street = НаименованиеИТип.Наименование;
			Результат.streetType = НаименованиеИТип.Сокращение;
			
		ИначеЕсли ИмяПоля = "ТИПДОМА" Тогда
			
			Результат.houseType = ТРег(СокрЛП(ЭлементСписка.Значение));
			
		ИначеЕсли ИмяПоля = "ДОМ" Тогда
			Результат.houseNumber = ЭлементСписка.Значение;
			
		ИначеЕсли ИмяПоля = "ТИПКОРПУСА" Тогда
			Если ЭлементКорпус = Неопределено Тогда
				ЭлементКорпус = УправлениеКонтактнойИнформациейКлиентСервер.ЗначениеСтроенияИлиПомещения("", "");
				Результат.buildings.Добавить(ЭлементКорпус);
			КонецЕсли;
			ЭлементКорпус.type = ТРег(СокрЛП(ЭлементСписка.Значение));
			ТипКорпусаНеопределен = Ложь;
			
		ИначеЕсли ИмяПоля = "КОРПУС" Тогда
			Если ЭлементКорпус = Неопределено Тогда
				ЭлементКорпус = УправлениеКонтактнойИнформациейКлиентСервер.ЗначениеСтроенияИлиПомещения("", "");
				Результат.buildings.Добавить(ЭлементКорпус);
			КонецЕсли;
			ЭлементКорпус.number = ЭлементСписка.Значение;
			
		ИначеЕсли ИмяПоля = "ТИПКВАРТИРЫ" Тогда
			Если ЭлементКвартира = Неопределено Тогда
				ЭлементКвартира = УправлениеКонтактнойИнформациейКлиентСервер.ЗначениеСтроенияИлиПомещения("", "");
				Результат.apartments.Добавить(ЭлементКвартира);
			КонецЕсли;
			ЭлементКвартира.type = ТРег(СокрЛП(ЭлементСписка.Значение));
			ТипКвартирыНеопределен = Ложь;
			
		ИначеЕсли ИмяПоля = "КВАРТИРА" Тогда
			Если ЭлементКвартира = Неопределено Тогда
				ЭлементКвартира = УправлениеКонтактнойИнформациейКлиентСервер.ЗначениеСтроенияИлиПомещения("", "");
				Результат.apartments.Добавить(ЭлементКвартира);
			КонецЕсли;
			ЭлементКвартира.number = ЭлементСписка.Значение;
			
		ИначеЕсли ИмяПоля = "ПРЕДСТАВЛЕНИЕ" Тогда
			ПолеПредставления = СокрЛП(ЭлементСписка.Значение);
			Результат.value = ПолеПредставления;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Умолчания
	Если ТипДомаНеопределен И ЭлементДом <> Неопределено Тогда
		Результат.houseType = "Дом";
	КонецЕсли;
	
	Если ТипКорпусаНеопределен И ЭлементКорпус <> Неопределено Тогда
		ЭлементКорпус.type = "Корпус";
	КонецЕсли;
	
	Если ТипКвартирыНеопределен И ЭлементКвартира <> Неопределено Тогда
		ЭлементКвартира.type = "Квартира";
	КонецЕсли;
	
	ТипАдреса = ?(АдресРоссийский, РаботаСАдресамиКлиентСервер.АдминистративноТерриториальныйАдрес(),
		УправлениеКонтактнойИнформациейКлиентСервер.ИностранныйАдрес());
	Результат.addressType = ТипАдреса;
		
	// Представление с приоритетами.
	Если Не ПустаяСтрока(Представление) Тогда
		Результат.value = Представление;
	ИначеЕсли ЗначениеЗаполнено(ПолеПредставления) Тогда
		Результат.value = ПолеПредставления;
	Иначе
		Результат.value = РаботаСАдресамиКлиентСервер.ПредставлениеАдреса(Результат,
			Ложь, ТипАдреса);
	КонецЕсли;
	Возврат Результат;

КонецФункции


// Читает и устанавливает район адреса.
//
//  Параметры:
//      XDTOАдрес     - ОбъектXDTO - контактная информация или XDTO адреса.
//      НовоеЗначение - Строка - устанавливаемое значение.
//
//  Возвращаемое значение:
//      Строка - новое значение.
//
Функция РайонАдреса(XDTOАдрес, НовоеЗначение = Неопределено)
	
	Если НовоеЗначение = Неопределено Тогда
		
		XDTOТип = XDTOАдрес.Тип();
		Если XDTOТип = ФабрикаXDTO.Тип(ПространствоИмен(), "АдресРФ") Тогда
			АдресРФ = XDTOАдрес;
		Иначе
			АдресРФ = XDTOАдрес.Состав;
		КонецЕсли;
		
		Если ТипЗнч(АдресРФ) = Тип("ОбъектXDTO") Тогда
			Возврат ПолучитьXDTOРеквизитОбъекта(АдресРФ, XPathРайона());
		КонецЕсли;
		
		Возврат Неопределено;
	КонецЕсли;
	
	// Запись
	Запись = СвРайМО(XDTOАдрес);
	Запись.Район = НовоеЗначение;
	Возврат НовоеЗначение;
	
КонецФункции  

// Возвращает наименование региона по его коду.
//
//  Параметры:
//      Код - Строка
//          - Число - код региона.
//
// Возвращаемое значение:
//      Строка - полное наименование региона с сокращением.
//      Неопределено - если нет ни одной подсистемы адресного классификатора.
// 
Функция РегионКода(Знач Код)
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.АдресныйКлассификатор") Тогда
		МодульАдресныйКлассификатор = ОбщегоНазначения.ОбщийМодуль("АдресныйКлассификатор");
		Возврат МодульАдресныйКлассификатор.НаименованиеРегионаПоКоду(Код);
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции


//  Возвращает строку списка полей.
//
//  Параметры:
//    СтруктураЗначенийПолей - Структура
//    БезПустыхПолей         - Булево - флаг сохранения полей с пустыми значениями.
//
//  Возвращаемое значение:
//     Строка - результат преобразования из структуры.
//
Функция СтрокаПолей(СтруктураЗначенийПолей, БезПустыхПолей = Истина) Экспорт
	
	Результат = "";
	Для Каждого ЗначениеПоля Из СтруктураЗначенийПолей Цикл
		Если БезПустыхПолей И ПустаяСтрока(ЗначениеПоля.Значение) Тогда
			Продолжить;
		КонецЕсли;
		
		Результат = Результат + ?(Результат = "", "", Символы.ПС)
		            + ЗначениеПоля.Ключ + "=" + СтрЗаменить(ЗначениеПоля.Значение, Символы.ПС, Символы.ПС + Символы.Таб);
	КонецЦикла;
	
	Возврат Результат;
КонецФункции    

// Получение глубокого свойства объекта.
// 
// Параметры:
//  ОбъектXTDO - ОбъектXDTO
//  XPath -Строка
// 
// Возвращаемое значение:
//  ОбъектXDTO
//
Функция ПолучитьXDTOРеквизитОбъекта(ОбъектXTDO, XPath)
	
	// Переносов строки в XPath не ожидаем.
	СтрокаСвойств = СтрЗаменить(СтрЗаменить(XPath, "/", Символы.ПС), Символы.ПС + Символы.ПС, "/");
	
	ЧислоСвойств = СтрЧислоСтрок(СтрокаСвойств);
	Если ЧислоСвойств = 1 Тогда
		Результат = ОбъектXTDO.Получить(СтрокаСвойств);
		Если ТипЗнч(Результат) = Тип("ОбъектXDTO") Тогда 
			Возврат Результат.Значение;
		КонецЕсли;
		Возврат Результат;
	КонецЕсли;
	
	Результат = ?(ЧислоСвойств = 0, Неопределено, ОбъектXTDO);
	Для Индекс = 1 По ЧислоСвойств Цикл
		Результат = Результат.Получить(СтрПолучитьСтроку(СтрокаСвойств, Индекс));
		Если Результат = Неопределено Тогда 
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
КонецФункции   

Функция СвРайМО(АдресРФ)
	Если АдресРФ.СвРайМО <> Неопределено Тогда
		Возврат АдресРФ.СвРайМО;
	КонецЕсли;
	
	АдресРФ.СвРайМО = ФабрикаXDTO.Создать( АдресРФ.Свойства().Получить("СвРайМО").Тип);
	Возврат АдресРФ.СвРайМО;
КонецФункции



// Возвращает XPath для района.
//
// Возвращаемое значение:
//      Строка - XPath
//
Функция XPathРайона() Экспорт
	
	Возврат "СвРайМО/Район";
	
КонецФункции

Процедура УстановкаТипаОбластьКемеровскойОбласти(КонтактнаяИнформацияПоПолям) Экспорт
	
	Если СтрСравнить(КонтактнаяИнформацияПоПолям.area, "Кемеровская область -") = 0 Тогда
		КонтактнаяИнформацияПоПолям.area = "Кемеровская область - Кузбасс";
		КонтактнаяИнформацияПоПолям.areaType= "обл";
	КонецЕсли;
	
КонецПроцедуры





#КонецОбласти

