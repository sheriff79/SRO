

#Область ПроцедурыиИФункцииФормированияФайловДляРассылки


Функция ПолучитьЗначениеДатаИзСтроки(ДатаСтрокой, НазваниеРеквизита)
	
	ДатаСтрокой = СтрЗаменить(ДатаСтрокой, ".", "");
	
	Если СтрДлина(ДатаСтрокой) <> 8 Тогда
		Возврат "Реквизит """ + НазваниеРеквизита  + """ не соответствует формату для реквизита типа Дата" + ДатаСтрокой;
	КонецЕсли;
	
	Попытка
		ПредставлениеДаты = Дата(Сред(ДатаСтрокой, 5), Сред(ДатаСтрокой, 3, 2), Лев(ДатаСтрокой, 2));
	Исключение
		Возврат "Реквизит """ + НазваниеРеквизита  + """ не удалось преобразовать в значение типа Дата" + ДатаСтрокой;
	
	КонецПопытки;
	
	Возврат ПредставлениеДаты;
	
КонецФункции


Функция ЕстьРазрешениеНаФормированиеОтчета(АдресОтправителя, КодОтчета, ЕстьОтборПоКПК)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	СРО_КомандыДляРассылки.АдресОтправителя КАК АдресОтправителя,
	               |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СРО_КомандыДляРассылки.ИдентификаторСообщения) КАК КоличествоОбработанныхСообщенийЗаМесяц
	               |ПОМЕСТИТЬ ВТ
	               |ИЗ
	               |	РегистрСведений.СРО_КомандыДляРассылки КАК СРО_КомандыДляРассылки
	               |ГДЕ
	               |	СРО_КомандыДляРассылки.ТекстКомандыДляРассылки ПОДОБНО &КодОтчета + ""%""
	               |	И СРО_КомандыДляРассылки.АдресОтправителя = &АдресОтправителя
	               |	И СРО_КомандыДляРассылки.ДатаСобытия >= &ДатаНачала
	               |	И СРО_КомандыДляРассылки.ДатаСобытия <= &ДатаОкончания
	               |	И СРО_КомандыДляРассылки.СРО_СтатусКомандыДляРассылки = ЗНАЧЕНИЕ(перечисление.СРО_СтатусКомандыДляРассылки.Обработано)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	СРО_КомандыДляРассылки.АдресОтправителя
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	СРО_АдресаЭлектроннойПочтыДляРассылкиДоступныеОтчетДляРассылки.КодОтчетности КАК КодОтчетности,
	               |	СУММА(СРО_АдресаЭлектроннойПочтыДляРассылкиДоступныеОтчетДляРассылки.КоличествоОтчетовВМесяц) КАК КоличествоОтчетовВМесяц,
	               |	СУММА(ЕСТЬNULL(ВТ.КоличествоОбработанныхСообщенийЗаМесяц, 0)) КАК КоличествоОбработанныхСообщенийЗаМесяц,
	               |	МАКСИМУМ(СРО_АдресаЭлектроннойПочтыДляРассылкиДоступныеОтчетДляРассылки.ТолькоИндивидуальныеОтчеты) КАК ТолькоИндивидуальныеОтчетыДляВидаОтчета,
	               |	МАКСИМУМ(СРО_АдресаЭлектроннойПочтыДляРассылкиДоступныеОтчетДляРассылки.Ссылка.ТолькоИндивидуальныеОтчеты) КАК ТолькоИндивидуальныеОтчетыДляЗаписи
	               |ИЗ
	               |	Справочник.СРО_АдресаЭлектроннойПочтыДляРассылки.ДоступныеОтчетыДляРассылки КАК СРО_АдресаЭлектроннойПочтыДляРассылкиДоступныеОтчетДляРассылки
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ КАК ВТ
	               |		ПО СРО_АдресаЭлектроннойПочтыДляРассылкиДоступныеОтчетДляРассылки.Ссылка.АдресЕмэйл = ВТ.АдресОтправителя
	               |ГДЕ
	               |	СРО_АдресаЭлектроннойПочтыДляРассылкиДоступныеОтчетДляРассылки.Ссылка.АдресЕмэйл = &АдресОтправителя
	               |	И СРО_АдресаЭлектроннойПочтыДляРассылкиДоступныеОтчетДляРассылки.Ссылка.Активен
	               |	И НЕ СРО_АдресаЭлектроннойПочтыДляРассылкиДоступныеОтчетДляРассылки.Ссылка.ПометкаУдаления
	               |	И СРО_АдресаЭлектроннойПочтыДляРассылкиДоступныеОтчетДляРассылки.КодОтчетности.Код = &КодОтчета
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	СРО_АдресаЭлектроннойПочтыДляРассылкиДоступныеОтчетДляРассылки.КодОтчетности
	               |
	               |ИМЕЮЩИЕ
	               |	(СУММА(СРО_АдресаЭлектроннойПочтыДляРассылкиДоступныеОтчетДляРассылки.КоличествоОтчетовВМесяц) = 0
	               |		ИЛИ СУММА(СРО_АдресаЭлектроннойПочтыДляРассылкиДоступныеОтчетДляРассылки.КоличествоОтчетовВМесяц) > 0
	               |			И СУММА(СРО_АдресаЭлектроннойПочтыДляРассылкиДоступныеОтчетДляРассылки.КоличествоОтчетовВМесяц) > СУММА(ЕСТЬNULL(ВТ.КоличествоОбработанныхСообщенийЗаМесяц, 0)))";
	
	Запрос.УстановитьПараметр("АдресОтправителя", АдресОтправителя);
	Запрос.УстановитьПараметр("КодОтчета", КодОтчета);
	Запрос.УстановитьПараметр("ДатаНачала", НачалоМесяца(ТекущаяДата())); 
	Запрос.УстановитьПараметр("ДатаОкончания", КонецМесяца(ТекущаяДата()));   
	
	РезультатЗапроса = Запрос.Выполнить();
	
	// Если результат пустой тогда разрешения нет - это првоерка на количество обработанных запросов от пользователя
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Проверка на разрешения оп индивидуальности 
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	Если НЕ ЕстьОтборПоКПК Тогда
		Возврат НЕ Макс(Выборка.ТолькоИндивидуальныеОтчетыДляВидаОтчета, Выборка.ТолькоИндивидуальныеОтчетыДляЗаписи);
	Иначе
		Возврат Истина;
	КонецЕсли;	
	
КонецФункции


Функция ПолучитьСтруктуруДанныхКодОтчета(КодОтчета)
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СРО_КодыОтчетов.Ссылка КАК Ссылка,
	|	СРО_КодыОтчетов.Наименование КАК Наименование,
	|	СРО_КодыОтчетов.ОтдельныйОтчетПоКаждомуКПК КАК ОтдельныйОтчетПоКаждомуКПК,
	|	СРО_КодыОтчетов.Активный КАК Активный,
	|	СРО_КодыОтчетов.ИмяОтчета КАК ИмяОтчета,
	|	СРО_КодыОтчетов.ТолькоИндивидуальныеОтчеты КАК ТолькоИндивидуальныеОтчеты
	|ИЗ
	|	Справочник.СРО_КодыОтчетов КАК СРО_КодыОтчетов
	|ГДЕ
	|	СРО_КодыОтчетов.Код = &КодОтчета";
	
	Запрос.УстановитьПараметр("КодОтчета", КодОтчета);
	
	РезультатЗапроса = запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	Возврат Выборка;	
	
КонецФункции


Процедура ПолучитьМассивПисемСЭлектроннойПочты(ЗаписьЭлектроннойПочты, МассивПисем) Экспорт
	
	//   ПараметрыЗагрузки - Структура - со свойствами:
	//     * Колонки - Массив - массив строк названий колонок
	//                          названия колонок должны соответствовать полям объекта
	//                          ИнтернетПочтовоеСообщение.
	//     * РежимТестирования - Булево - если Истина то вызов сделан в режиме тестирования
	//                            учетной записи - при этом выборка писем происходит,
	//                            но в возвращаемом значении они не попадают; по умолчанию
	//                            режим тестирования отключен.
	//     * ПолучениеЗаголовков - Булево - если Истина, то в возвращаемом наборе есть только
	//                                       заголовки писем.
	//     * ЗаголовкиИдентификаторы - Массив - заголовки или идентификаторы сообщений, полные
	//                                    сообщения по которым требуется получить.
	//     * ПриводитьСообщенияКТипу - Булево - возвращать набор полученных почтовых сообщений
	//                                    в виде таблицы значений, с простыми типами. По умолчанию Истина.
	

	ПараметрыЗагрузки = Новый Структура;	
	ПараметрыЗагрузки.Вставить("РежимТестирования", Ложь);
	ПараметрыЗагрузки.Вставить("ПолучениеЗаголовков", Ложь);	
	ПараметрыЗагрузки.Вставить("ПриводитьСообщенияКТипу", Ложь);
	
	// добавляем отбор по дате письма - не старше 3 днех от сегодняшней даты	
	ДатаОтбора = НачалоДня(ТекущаяДата()-3*86400);
	ПараметрыЗагрузки.Вставить("ДатаОтбора", ДатаОтбора);   
	
	НаборСообщений = РаботаСПочтовымиСообщениями.ЗагрузитьПочтовыеСообщения(ЗаписьЭлектроннойПочты, ПараметрыЗагрузки);
	
	// Выбираем только письма с вложениями
	
	МассивИдентификаторов = НОвый Массив;
	Для Каждого ТекСообщение ИЗ НаборСообщений Цикл  
		
		Если СтрНайти(нрег(ТекСообщение.Тема), "#отчет") = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ИдентификаторСообщения = СокрЛП(ТекСообщение.ИдентификаторСообщения);		
		
		Если НЕ ОбрабатываемЗапросНаОтчет(ИдентификаторСообщения) Тогда
			Продолжить;
		КонецЕсли;    
		
		// Проверяем что есть текст письма
		АдресОтправителя = СокрЛП(ТекСообщение.Отправитель.Адрес);
		
		СтруктураПараметров_КомандыДляРассылки = Новый Структура;
		СтруктураПараметров_КомандыДляРассылки.Вставить("ВидСоединения", Перечисления.СРО_ВидСоединенияДляРассылкиОтчетов.Почта);
		СтруктураПараметров_КомандыДляРассылки.Вставить("АдресОтправителя", АдресОтправителя);
		СтруктураПараметров_КомандыДляРассылки.Вставить("ИдентификаторСообщения", ИдентификаторСообщения);   
		СтруктураПараметров_КомандыДляРассылки.Вставить("ТекстСообщения", "");    
		СтруктураПараметров_КомандыДляРассылки.Вставить("ДатаОтправления", ТекСообщение.ДатаОтправления);    

		СтруктураПараметров_КомандыДляРассылки.Вставить("СРО_СтатусКомандыДляРассылки", "");
		СтруктураПараметров_КомандыДляРассылки.Вставить("ЗаписьЭлектроннойПочты", ЗаписьЭлектроннойПочты);
		
		Если ТекСообщение.Тексты.Количество() = 0 
			ИЛИ СокрЛП(ТекСообщение.Тексты[0].Текст)= "" Тогда   
			СтруктураПараметров_КомандыДляРассылки.ТекстСообщения = "Нет текста письма";		
			СтруктураПараметров_КомандыДляРассылки.СРО_СтатусКомандыДляРассылки = Перечисления.СРО_СтатусКомандыДляРассылки.ОбработкаОтменена;  
			УстановитьСтатусКомандыОтправителя(СтруктураПараметров_КомандыДляРассылки); 		
			
			Продолжить;   
		КонецЕсли;      
		
		// Получаем параметры отчета и пробуем сформировать и выслать отчет
		ТекстСообщения = СокрЛП(ТекСообщение.Тексты[0].Текст);
		
		МассивПодстрокПараметров = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ТекстСообщения, ";");
		
		Если МассивПодстрокПараметров.Количество() = 1 Тогда 
			СтруктураПараметров_КомандыДляРассылки.ТекстСообщения = "Некорректная строка параметров в тексте письма """ + ТекстСообщения + """";		
			СтруктураПараметров_КомандыДляРассылки.СРО_СтатусКомандыДляРассылки = Перечисления.СРО_СтатусКомандыДляРассылки.ОбработкаОтменена;  
			УстановитьСтатусКомандыОтправителя(СтруктураПараметров_КомандыДляРассылки); 			
			
			Продолжить;
		КонецЕсли;
		
		// Отсекаем лишнее в последней строке
		ПоследнийПараметр = МассивПодстрокПараметров[МассивПодстрокПараметров.Количество() - 1];
		Поз = СтрНайти(ПоследнийПараметр, Символы.ВК);        
		
		// Ищем пробел и если он есть то отсекаем все после первого пробела 
		Если Поз > 0 Тогда 
			МассивПодстрокПараметров[МассивПодстрокПараметров.Количество() - 1] = Лев(ПоследнийПараметр, Поз - 1);			
		КонецЕсли;	
		
		// Отсекаем по НПП
		Поз = СтрНайти(ПоследнийПараметр, Символы.НПП);        

		Если Поз = 0 Тогда
		
			Поз = СтрНайти(ПоследнийПараметр, " ");   
			
			Если Поз > 0 Тогда 
				МассивПодстрокПараметров[МассивПодстрокПараметров.Количество() - 1] = Лев(ПоследнийПараметр, Поз - 1);			
			КонецЕсли;	
		КонецЕсли;		

		// Отсекаем по пробелам
		Если Поз = 0 Тогда
		
			Поз = СтрНайти(ПоследнийПараметр, " ");   
			
			Если Поз > 0 Тогда 
				МассивПодстрокПараметров[МассивПодстрокПараметров.Количество() - 1] = Лев(ПоследнийПараметр, Поз - 1);			
			КонецЕсли;	
		КонецЕсли;		
		
		КодОтчета =  СокрЛП(МассивПодстрокПараметров[0]); 		
		
		// Проверяем что у отправителя есть разрешение на формирование отчета с таким кодом    		
	//	КодОтчетаСсылка = Справочники.СРО_КодыОтчетов.НайтиПоКоду(КодОтчета);
		СтруктуруДанныхКодОтчета = ПолучитьСтруктуруДанныхКодОтчета(КодОтчета);
		
		Если СтруктуруДанныхКодОтчета = Неопределено Тогда	
			ТекстСообщенияДляРассылки = "Неизвестный код отчета """ + КодОтчета + """";
			СтруктураПараметровЗаписиРегистра = Новый Структура;
			
			СтруктураПараметровЗаписиРегистра.Вставить("АдресОтправителя", АдресОтправителя);
			СтруктураПараметровЗаписиРегистра.Вставить("ИдентификаторСообщения", ИдентификаторСообщения);
			СтруктураПараметровЗаписиРегистра.Вставить("ТекстСообщения", ТекстСообщенияДляРассылки);
			СтруктураПараметровЗаписиРегистра.Вставить("СРО_СтатусКомандыДляРассылки", Перечисления.СРО_СтатусКомандыДляРассылки.ОбработкаОтменена);  			
			СтруктураПараметровЗаписиРегистра.Вставить("ТекстКомандыДляРассылки", ТекстСообщения);
			
			СРО_ФормированиеИОтправкаОтчетов.УстановитьСтатусКомандыОтправителя(СтруктураПараметровЗаписиРегистра);
			Продолжить;	
		КонецЕсли;
		
		
		
		 

		
		НомераВРеестре = СокрЛП(МассивПодстрокПараметров[1]);
		
		Если СтрНайти(НомераВРеестре, ".") > 0 Тогда
			НомераВРеестре = "";
			
			ДатаНачалаОтчетаСтрокой = СокрЛП(МассивПодстрокПараметров[1]); 
			
			
			
			Если МассивПодстрокПараметров.Количество() >= 3 Тогда  				
				ДатаОкончанияДатаСтрокой = СокрЛП(МассивПодстрокПараметров[2]);
			Иначе
				ДатаОкончанияДатаСтрокой = ДатаНачалаОтчетаСтрокой;				
			КонецЕсли;

		Иначе	
			
			ДатаНачалаОтчетаСтрокой = СокрЛП(МассивПодстрокПараметров[2]);  
			
			Если МассивПодстрокПараметров.Количество() = 3 Тогда
				
				Поз = 1000;		
				Поз = Мин(Поз, СтрНайти(ДатаНачалаОтчетаСтрокой, Символы.ВК));
				Поз = Мин(Поз, СтрНайти(ДатаНачалаОтчетаСтрокой, Символы.ПС));
				
				Если Поз > 0 И Поз < 1000  Тогда			
					ДатаНачалаОтчетаСтрокой = Лев(ДатаНачалаОтчетаСтрокой, Поз - 1);
				КонецЕсли;        
				
				ДатаОкончанияДатаСтрокой = ДатаНачалаОтчетаСтрокой; 
			Иначе
				
				ДатаОкончанияДатаСтрокой = СокрЛП(МассивПодстрокПараметров[3]); 
				
				Поз = 1000;		
				Поз = Мин(Поз, СтрНайти(ДатаОкончанияДатаСтрокой, Символы.ВК));
				Поз = Мин(Поз, СтрНайти(ДатаОкончанияДатаСтрокой, Символы.ПС));
				
				Если Поз > 0 И Поз < 1000  Тогда			
					ДатаОкончанияДатаСтрокой = Лев(ДатаОкончанияДатаСтрокой, Поз - 1);
				КонецЕсли;  				
			КонецЕсли;  		
		КонецЕсли;
		
		МассивНомеровВРеестреСРО = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(НомераВРеестре, ",");
		
		МассивКПК = Новый Массив;
		
		Для Каждого НомерВРеестреСРО ИЗ МассивНомеровВРеестреСРО Цикл
			
			КПК = ПолучитьКПКПоНомеруРеестраСРО(НомерВРеестреСРО);
			
			Если ТипЗнч(КПК) = Тип("СправочникСсылка.Контрагенты") Тогда
				МассивКПК.Добавить(КПК);				
			КонецЕсли;
			
		КонецЦикла;
		
		
		// Проверяем что для выбранного вида отчета только индивидуальные отчеты и нет отбора по КПК 		
		Если СтруктуруДанныхКодОтчета.ТолькоИндивидуальныеОтчеты И МассивКПК.Количество() = 0 Тогда
			ТекстСообщенияДляРассылки = "Отчет с кодом """ + КодОтчета + """ формируется только с отбором по КПК";
				
			СтруктураПараметровЗаписиРегистра = Новый Структура;
			
			СтруктураПараметровЗаписиРегистра.Вставить("АдресОтправителя", АдресОтправителя);
			СтруктураПараметровЗаписиРегистра.Вставить("ИдентификаторСообщения", ИдентификаторСообщения);
			СтруктураПараметровЗаписиРегистра.Вставить("ТекстСообщения", ТекстСообщенияДляРассылки);
			СтруктураПараметровЗаписиРегистра.Вставить("СРО_СтатусКомандыДляРассылки", Перечисления.СРО_СтатусКомандыДляРассылки.ОбработкаОтменена);  			
			СтруктураПараметровЗаписиРегистра.Вставить("ТекстКомандыДляРассылки", ТекстСообщения);
			
			СРО_ФормированиеИОтправкаОтчетов.УстановитьСтатусКомандыОтправителя(СтруктураПараметровЗаписиРегистра);
			
			Продолжить;				
		КонецЕсли;                     		
			
		
		СтруктураПараметров_КомандыДляРассылки.Вставить("МассивКПК", МассивКПК);

	
		ЕстьОтборПоКПК = МассивКПК.Количество() > 0;
		
		Если НЕ ЕстьРазрешениеНаФормированиеОтчета(АдресОтправителя, КодОтчета, ЕстьОтборПоКПК) Тогда
			// Нет разрешение на формирование отчета - делаем запись в регистр
			
			Если ЕстьОтборПоКПК Тогда
				ТекстСообщенияДляРассылки = "У пользователя с адресом почты """ + СокрЛП(АдресОтправителя)+ """ нет разрешения на формирование отчета с кодом """ + КодОтчета + """";
			Иначе
				ТекстСообщенияДляРассылки = "У пользователя с адресом почты """ + СокрЛП(АдресОтправителя)+ """ нет разрешения на формирование отчета с кодом """ + КодОтчета + """ без отбора по КПК";
			КонецЕсли;
				
			СтруктураПараметровЗаписиРегистра = Новый Структура;
			
			СтруктураПараметровЗаписиРегистра.Вставить("АдресОтправителя", АдресОтправителя);
			СтруктураПараметровЗаписиРегистра.Вставить("ИдентификаторСообщения", ИдентификаторСообщения);
			СтруктураПараметровЗаписиРегистра.Вставить("ТекстСообщения", ТекстСообщенияДляРассылки);
			СтруктураПараметровЗаписиРегистра.Вставить("СРО_СтатусКомандыДляРассылки", Перечисления.СРО_СтатусКомандыДляРассылки.ОбработкаОтменена);  			
			СтруктураПараметровЗаписиРегистра.Вставить("ТекстКомандыДляРассылки", ТекстСообщения);
			
			СРО_ФормированиеИОтправкаОтчетов.УстановитьСтатусКомандыОтправителя(СтруктураПараметровЗаписиРегистра);
			
			Продолжить;			
		КонецЕсли;
	    

		НазваниеОтчета = Неопределено;
		
		ФормироватьПисьмоПоКаждомуКПК = Ложь;
		СформироватьФормуПроверки = Ложь;
		ЭтоРассылкаОтчета = Истина;                             		
		
		НазваниеОтчета = СтруктуруДанныхКодОтчета.ИмяОтчета;
		НазваниеОтчетаПолное = СтруктуруДанныхКодОтчета.Наименование;                       	
		ФормироватьПисьмоПоКаждомуКПК = СтруктуруДанныхКодОтчета.ОтдельныйОтчетПоКаждомуКПК;    	
		
		
		// ОРД ОРД;65;31.12.2020;31.12.2021 
		// 2 позицуия - коды КПК. если несколько - отделяем запятой
		
		Если КодОтчета = "ТФП" Тогда
			
			//НазваниеОтчета = "СРО_ТаблицаФинансовыхПоказателейКПК";     			
			//НазваниеОтчетаПолное = "Таблица финансовых показателей КПК (СРО)";    			
			
		ИначеЕсли КодОтчета = "ПОР" Тогда
			//НазваниеОтчета = "СРО_ПроверкаОтчетностиСРассылкойПисем";   			
			//НазваниеОтчетаПолное = "Проверка отчетности (с рассылкой писем) (СРО)";			
			СтруктураПараметров_КомандыДляРассылки.Вставить("ТипОтчета", Перечисления.ТипыОчетаПроверки.ПоРазделам);	
			
		ИначеЕсли КодОтчета = "ПОС" Тогда
			//НазваниеОтчета = "СРО_ПроверкаОтчетностиСРассылкойПисем";   			
			//НазваниеОтчетаПолное = "Проверка отчетности (сводный) (СРО)";			
			СтруктураПараметров_КомандыДляРассылки.Вставить("ТипОтчета", Перечисления.ТипыОчетаПроверки.СводныйОтчет);			
			
		//ИначеЕсли КодОтчета = "ОРД" Тогда
			//НазваниеОтчета = "СРО_ОтчетПоРазделамДокументовОтчетности";   			
			//НазваниеОтчетаПолное = "Отчет по разделам документов отчетности (СРО)";
			
		ИначеЕсли КодОтчета = "СНФ" Тогда
			//НазваниеОтчета = "СРО_СводныйНФ";   			
			//НазваниеОтчетаПолное = "Сводный отчет по НФ (СРО)";   		
			
			Если НЕ СтруктураПараметров_КомандыДляРассылки.Свойство("ВидОтбораОтчета") Тогда
				СтруктураПараметров_КомандыДляРассылки.Вставить("ВидОтбораОтчета", 0);
			КонецЕсли;
			
		//ИначеЕсли КодОтчета = "СОК" Тогда
			//НазваниеОтчета = "СРО_СводныйОтчетПоКПК";   			
			//НазваниеОтчетаПолное = "Сводный отчет по КПК (СРО)";   	
			
		ИначеЕсли КодОтчета = "ОРК" 
			ИЛИ  КодОтчета = "ПДБ"  Тогда
	//		НазваниеОтчета = "СРО_ОтчетРезюме";   
			
			Если КодОтчета = "ОРК" Тогда
				НазваниеОтчетаПолное = "Отчет резюме (СРО)";  
			Иначе
				НазваниеОтчетаПолное = "Форма проверки данных бух. учета (СРО)";
				СформироватьФормуПроверки = Истина;
			КонецЕсли;   			
			
			СтруктураПараметров_КомандыДляРассылки.Вставить("СформироватьФормуПроверки", СформироватьФормуПроверки);
		//		ФормироватьПисьмоПоКаждомуКПК = Истина;       			
		КонецЕсли;

		СтруктураПараметров_КомандыДляРассылки.Вставить("ЭтоРассылкаОтчета", ЭтоРассылкаОтчета);    
		
		Если НазваниеОтчета = Неопределено Тогда
			СтруктураПараметров_КомандыДляРассылки.ТекстСообщения = "Некорректный код отчета в параметрах """ + КодОтчета + """";		
			СтруктураПараметров_КомандыДляРассылки.СРО_СтатусКомандыДляРассылки = Перечисления.СРО_СтатусКомандыДляРассылки.ОбработкаОтменена;  
			УстановитьСтатусКомандыОтправителя(СтруктураПараметров_КомандыДляРассылки); 			
	
			Продолжить;
		КонецЕсли;	
		
		СтруктураПараметров_КомандыДляРассылки.Вставить("КодОтчета", КодОтчета);		
		СтруктураПараметров_КомандыДляРассылки.Вставить("НазваниеОтчета", НазваниеОтчета);
		СтруктураПараметров_КомандыДляРассылки.Вставить("НазваниеОтчетаПолное", НазваниеОтчетаПолное);    
		СтруктураПараметров_КомандыДляРассылки.Вставить("ФормироватьПисьмоПоКаждомуКПК", ФормироватьПисьмоПоКаждомуКПК); 
		СтруктураПараметров_КомандыДляРассылки.Вставить("ФормированиеОтчетаПользователю", Истина); 
		СтруктураПараметров_КомандыДляРассылки.Вставить("ТекстКомандыДляРассылки", ТекстСообщения); 
		 		
		// НомерВРеестре или массив номеров в реестре СРО
		
			
		// Дата начала
		
		ДатаНачалаОтчета = ПолучитьЗначениеДатаИзСтроки(ДатаНачалаОтчетаСтрокой, "ДатаНачалаОтчета");
		
		Если ТипЗнч(ДатаНачалаОтчета) = Тип("Строка") Тогда
			
			Если НазваниеОтчета = Неопределено Тогда
				СтруктураПараметров_КомандыДляРассылки.ТекстСообщения = ДатаНачалаОтчета;		
				СтруктураПараметров_КомандыДляРассылки.СРО_СтатусКомандыДляРассылки = Перечисления.СРО_СтатусКомандыДляРассылки.ОбработкаОтменена;  
				УстановитьСтатусКомандыОтправителя(СтруктураПараметров_КомандыДляРассылки); 			
	
				Продолжить;
			КонецЕсли;
		КонецЕсли;	
		
		СтруктураПараметров_КомандыДляРассылки.Вставить("ДатаНачалаОтчета", ДатаНачалаОтчета);
		
		// Дата окончания 
		
		ДатаОкончанияОтчета = ПолучитьЗначениеДатаИзСтроки(ДатаОкончанияДатаСтрокой, "ДатаОкончанияОтчета");
		

		//
		//Если МассивПодстрокПараметров.Количество() = 3 
		//	И  ТипЗнч(ДатаНачалаОтчета) = Тип("Дата") Тогда
		//	ДатаОкончанияОтчета =ДатаНачалаОтчета;
		//	
		//Иначе	
		//	ДатаОкончанияДатаСтрокой = СокрЛП(МассивПодстрокПараметров[3]);
		//	
		//	Поз = 1000;		
		//	Поз = Мин(Поз, СтрНайти(ДатаОкончанияДатаСтрокой, Символы.ВК));
		//	Поз = Мин(Поз, СтрНайти(ДатаОкончанияДатаСтрокой, Символы.ПС));
		//	
		//	Если Поз > 0 И Поз < 1000  Тогда			
		//		ДатаОкончанияДатаСтрокой = Лев(ДатаОкончанияДатаСтрокой, Поз - 1);
		//	КонецЕсли;           	
		//	
		//	ДатаОкончанияОтчета = ПолучитьЗначениеДатаИзСтроки(ДатаОкончанияДатаСтрокой, "ДатаОкончанияОтчета");
		//
		//КонецЕсли;
		
		Если ТипЗнч(ДатаНачалаОтчета) = Тип("Строка") Тогда
			
			Если НазваниеОтчета = Неопределено Тогда
				СтруктураПараметров_КомандыДляРассылки.ТекстСообщения = ДатаНачалаОтчета;		
				СтруктураПараметров_КомандыДляРассылки.СРО_СтатусКомандыДляРассылки = Перечисления.СРО_СтатусКомандыДляРассылки.ОбработкаОтменена;  
				УстановитьСтатусКомандыОтправителя(СтруктураПараметров_КомандыДляРассылки); 			
	
				Продолжить;
			КонецЕсли;
		КонецЕсли;	
		
		СтруктураПараметров_КомандыДляРассылки.Вставить("ДатаОкончанияОтчета", ДатаОкончанияОтчета);
		
		// Запускаем формирование отчета


		ИдентификаторСообщения = СРО_ФормированиеИОтправкаОтчетов.СформированИВысланОтчет(СтруктураПараметров_КомандыДляРассылки);
		
		Если ИдентификаторСообщения = Неопределено Тогда
			СтруктураПараметров_КомандыДляРассылки.ТекстСообщения = "";		
			СтруктураПараметров_КомандыДляРассылки.СРО_СтатусКомандыДляРассылки = Перечисления.СРО_СтатусКомандыДляРассылки.ОбработкаОтменена;    			
			УстановитьСтатусКомандыОтправителя(СтруктураПараметров_КомандыДляРассылки); 			
		//ИНаче
		//	
		//	СтруктураПараметров_КомандыДляРассылки.ТекстСообщения = "Отчет сформирован и выслан";		
		//	СтруктураПараметров_КомандыДляРассылки.СРО_СтатусКомандыДляРассылки = Перечисления.СРО_СтатусКомандыДляРассылки.Обработано;  
		//	УстановитьСтатусКомандыОтправителя(СтруктураПараметров_КомандыДляРассылки); 
		КонецЕсли; 
			
	КонецЦикла;      	
	
КонецПроцедуры   



Функция ОбрабатываемЗапросНаОтчет(ИдентификаторСообщения)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СРО_КомандыДляРассылки.ИдентификаторСообщения КАК ИдентификаторСообщения
	|ИЗ
	|	РегистрСведений.СРО_КомандыДляРассылки КАК СРО_КомандыДляРассылки
	|ГДЕ
	|	СРО_КомандыДляРассылки.ИдентификаторСообщения = &ИдентификаторСообщения
	|	И (СРО_КомандыДляРассылки.СРО_СтатусКомандыДляРассылки = ЗНАЧЕНИЕ(Перечисление.СРО_СтатусКомандыДляРассылки.Обработано)
	|	ИЛИ СРО_КомандыДляРассылки.СРО_СтатусКомандыДляРассылки = ЗНАЧЕНИЕ(Перечисление.СРО_СтатусКомандыДляРассылки.ОбработкаОтменена))";
	
	Запрос.УстановитьПараметр("ИдентификаторСообщения", ИдентификаторСообщения);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
КонецФункции


Функция ПолучитьНазваниеОтчетаПоКоду(КодОтчета) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СРО_КодыВысылаемыхОтчетовПольхователям.НазваниеОтчета КАК НазваниеОтчета
	|ИЗ
	|	РегистрСведений.СРО_КодыВысылаемыхОтчетовПольхователям КАК СРО_КодыВысылаемыхОтчетовПольхователям
	|ГДЕ
	|	СРО_КодыВысылаемыхОтчетовПольхователям.КодОтчета = &КодОтчета";
	
	Запрос.УстановитьПараметр("КодОтчета", КодОтчета);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	Возврат СокрЛП(Выборка.НазваниеОтчета);	
	
КонецФункции

Процедура УстановитьСтатусКомандыОтправителя(СтруктураПараметров) Экспорт
	АдресОтправителя = СтруктураПараметров.АдресОтправителя;
	ИдентификаторСообщения = СтруктураПараметров.ИдентификаторСообщения;
	ТекстСообщения = СтруктураПараметров.ТекстСообщения;
	СРО_СтатусКомандыДляРассылки = СтруктураПараметров.СРО_СтатусКомандыДляРассылки; 		
	
	НаборЗаписей  = РегистрыСведений.СРО_КомандыДляРассылки.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.АдресОтправителя.Значение  = АдресОтправителя;
	НаборЗаписей.Отбор.АдресОтправителя.Использование  = Истина;
	НаборЗаписей.Отбор.ИдентификаторСообщения.Значение  = ИдентификаторСообщения;
	НаборЗаписей.Отбор.ИдентификаторСообщения.Использование  = Истина;

	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	
	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.АдресОтправителя = АдресОтправителя;
	НоваяЗапись.ИдентификаторСообщения = ИдентификаторСообщения;
	НоваяЗапись.ТекстСообщения = ТекстСообщения;
	НоваяЗапись.СРО_СтатусКомандыДляРассылки = СРО_СтатусКомандыДляРассылки;
	НоваяЗапись.ДатаСобытия = ТекущаяДата();
	
	ТекстКомандыДляРассылки = "";    	
	Если СтруктураПараметров.Свойство("ТекстКомандыДляРассылки") тогда	
		ТекстКомандыДляРассылки = СтруктураПараметров.ТекстКомандыДляРассылки;
	КонецЕсли;

	НоваяЗапись.ТекстКомандыДляРассылки = ТекстКомандыДляРассылки;

	
	НаборЗаписей.Записать();		
	
КонецПроцедуры


Функция ПолучитьМассивПериодов(ДатаНачалаОтчета, ДатаОкончанияОтчета) Экспорт	
	
	МассивПериодов = НОвый Массив;
	ТекПериод = НачалоДня(КонецКвартала(ДатаНачалаОтчета));
	
	Пока Истина = Истина Цикл
		
		Если ТекПериод <= НачалоДня(ДатаОкончанияОтчета) Тогда
			МассивПериодов.Добавить(ТекПериод);
		Иначе
			Прервать;
		КонецЕсли;
		
		ТекПериод = НачалоДня(КонецКвартала(ДобавитьМесяц(НачалоКвартала(ТекПериод), 3)));
		
	КонецЦикла;
	
	Возврат МассивПериодов;
	
КонецФункции

Функция ФорматироватьЧисло(ФН) Экспорт
	
	Если СтрНайти(ФН, ",") = 0 Тогда
		ФН = Строка(ФН) + ",0";
	КонецЕсли;
	
	Возврат ФН;
	
КонецФункции



Функция ПолучитьКПКПоНомеруРеестраСРО(НомерВРеестреСРО) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Контрагенты.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.НомерВРеестреСРО = &НомерВРеестреСРО";
	
	Запрос.УстановитьПараметр("НомерВРеестреСРО", Число(НомерВРеестреСРО));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат "Не найден КПК с номером реестре СРО """ + НомерВРеестреСРО + """";
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.Ссылка;
	              
КонецФункции


Функция СформироватьОтчетПоВыбранымКПК(СтруктураПараметров)
	
	НазваниеОтчета = СтруктураПараметров.НазваниеОтчета;
	ДатаНачалаОтчета = СтруктураПараметров.ДатаНачалаОтчета;
	ДатаОкончанияОтчета = СтруктураПараметров.ДатаОкончанияОтчета;
	ДатаОтправления = СтруктураПараметров.ДатаОтправления;
	НазваниеОтчета = СтруктураПараметров.НазваниеОтчета;	
	НазваниеОтчетаПолное = СтруктураПараметров.НазваниеОтчетаПолное;	
	КодОтчета = СтруктураПараметров.КодОтчета;	
	МассивКПК = СтруктураПараметров.МассивКПК;
	
	МассивТабДокументов = Отчеты[НазваниеОтчета].СформироватьТабличныеДокументы(СтруктураПараметров); 	
	
	ТекЭлемент = МассивТабДокументов[0];                                                              	
	
	Если ТипЗнч(МассивТабДокументов) <> Тип("Массив") Тогда                		
		СтруктураПараметров.ТекстСообщения = "Не удалось сформировать документ отчета";	
		СтруктураПараметров.СРО_СтатусКомандыДляРассылки = Перечисления.СРО_СтатусКомандыДляРассылки.ОбработкаОтменена;
		УстановитьСтатусКомандыОтправителя(СтруктураПараметров); 	
		Возврат Неопределено;     	
	КонецЕсли;
		
	// Формируем письмо для рассылки  	 
	
	ТелоПисьмаКПК = "";
	
	ПараметрыПисьма = Новый Структура;    	
	
	Если СтруктураПараметров.Свойство("ИдентификаторСообщения") Тогда       	
		ПараметрыПисьма.Вставить("Кому", СтруктураПараметров.ИдентификаторСообщения);
	КонецЕсли;

	ПараметрыПисьма.Вставить("Кому", СтруктураПараметров.АдресОтправителя);
	СтруктураПараметров.Вставить("ЗаписьЭлектроннойПочты", СтруктураПараметров.ЗаписьЭлектроннойПочты);    
	
	КодыКПКСтрокой = "";
	
	Если СтруктураПараметров.МассивКПК.Количество() = 1 Тогда
		КПК = СтруктураПараметров.МассивКПК[0];           		
				
		ИнформацияОКПК = "[" + СокрЛП(КПК.НомерВРеестреСРО) + "] " + СокрЛП(КПК.НаименованиеКраткое) ; 		
		ТелоПисьмаКПК = Символы.ПС + "КПК: [" + СокрЛП(КПК.НомерВРеестреСРО) + "] " + СокрЛП(КПК.НаименованиеПолное);
		
		КодыКПКСтрокой = СокрЛП(КПК.НомерВРеестреСРО);
	Иначе
		ИнформацияОКПК = "По выбранным кооперативам";
		
		Для Каждого КПК ИЗ МассивКПК Цикл
			ТелоПисьмаКПК = ТелоПисьмаКПК + Символы.ПС + "КПК: [" + СокрЛП(КПК.НомерВРеестреСРО) + "] " + СокрЛП(КПК.НаименованиеПолное);
			
			КодыКПКСтрокой = КодыКПКСтрокой + ?(КодыКПКСтрокой = "", "", "_") + СокрЛП(КПК.НомерВРеестреСРО);
		КонецЦикла;
	КонецЕсли;              	

	ТемаПисьма = ИнформацияОКПК + " отчет код """ + СтруктураПараметров.КодОтчета + """ за период " + Формат(ДатаНачалаОтчета, "ДЛФ=Д") + " - " + Формат(ДатаОкончанияОтчета, "ДЛФ=Д");
	 
	ТелоПисьма = "Отчет: """ + СтруктураПараметров.КодОтчета + """ " + НазваниеОтчетаПолное;
	ТелоПисьма = ТелоПисьма + Символы.ПС + "Период: " + Формат(ДатаНачалаОтчета, "ДЛФ=Д") + " - " + Формат(ДатаОкончанияОтчета, "ДЛФ=Д");     
	ТелоПисьма = ТелоПисьма + ТелоПисьмаКПК;
	
	ПараметрыПисьма.Вставить("Тело", ТелоПисьма);
	ПараметрыПисьма.Вставить("Тема", ТемаПисьма);  

	// Вложения 
	Вложения = Новый Массив;   	
	
	
	МассивФайловДляВложения = Новый Массив;
	
	Для Каждого ВыбТабДокумент ИЗ МассивТабДокументов Цикл
		
		Если ТипЗнч(ВыбТабДокумент) = Тип("Структура")
			И СтруктураПараметров.КодОтчета <> "ПОР" 
			И СтруктураПараметров.КодОтчета <> "ПОС" Тогда 
			ИмяТаблицы = КодОтчета + "_" + ВыбТабДокумент.НазваниеТабличногоДокумента;
			ТабДокумент = ВыбТабДокумент.ТабличныйДокумент;
			
			СтруктураИнформацииОФайле = Новый Структура;
			СтруктураИнформацииОФайле.Вставить("ИмяТаблицы", ИмяТаблицы);
			СтруктураИнформацииОФайле.Вставить("ТабДокумент", ТабДокумент);
			МассивФайловДляВложения.Добавить(СтруктураИнформацииОФайле);
		Иначе
			
			ИмяТаблицы = КодОтчета + "_" + КодыКПКСтрокой + "_" + Формат(ДатаНачалаОтчета, "ДЛФ=Д") + "_" + Формат(ДатаОкончанияОтчета, "ДЛФ=Д") + ".xlsx";
				
			Если СтруктураПараметров.КодОтчета = "ПОР" Тогда 				
				ТабДокумент = Новый ТабличныйДокумент;  					
				
				// Добавляем таблицу нормативов
				
				ТабДокумент.Вывести(ВыбТабДокумент.РезультатНормативы);
					
				Если ВыбТабДокумент.ТабДокФН1 <> Неопределено Тогда				
					Если ВыбТабДокумент.ТабДокФН1.ВысотаТаблицы > 2 Тогда
						ТабДокумент.Вывести(ВыбТабДокумент.ТабДокФН1);
					КонецЕсли;
				КонецЕсли;
				
				Если ВыбТабДокумент.ТабДокФН2 <> Неопределено Тогда				
					Если ВыбТабДокумент.ТабДокФН2.ВысотаТаблицы > 2 Тогда				
						ТабДокумент.Вывести(ВыбТабДокумент.ТабДокФН2);
					КонецЕсли;
				КонецЕсли;
				
				Если ВыбТабДокумент.ТабДокФН3 <> Неопределено Тогда				
					Если ВыбТабДокумент.ТабДокФН3.ВысотаТаблицы > 2 Тогда				
						ТабДокумент.Вывести(ВыбТабДокумент.ТабДокФН3);
					КонецЕсли;
				КонецЕсли;
				
				Если ВыбТабДокумент.ТабДокФН4 <> Неопределено Тогда	
					Если ВыбТабДокумент.ТабДокФН4.ВысотаТаблицы > 2 Тогда				
						ТабДокумент.Вывести(ВыбТабДокумент.ТабДокФН4);
					КонецЕсли;
				КонецЕсли;
				
				Если ВыбТабДокумент.ТабДокФН5 <> Неопределено Тогда	
					Если ВыбТабДокумент.ТабДокФН5.ВысотаТаблицы > 2 Тогда				
						ТабДокумент.Вывести(ВыбТабДокумент.ТабДокФН5);
					КонецЕсли;
				КонецЕсли;
				
				Если ВыбТабДокумент.ТабДокФН6 <> Неопределено Тогда	
					Если ВыбТабДокумент.ТабДокФН6.ВысотаТаблицы > 2 Тогда				
						ТабДокумент.Вывести(ВыбТабДокумент.ТабДокФН6);
					КонецЕсли;
				КонецЕсли;
				
				Если ВыбТабДокумент.ТабДокФН7 <> Неопределено Тогда	
					Если ВыбТабДокумент.ТабДокФН7.ВысотаТаблицы > 2 Тогда				
						ТабДокумент.Вывести(ВыбТабДокумент.ТабДокФН7);
					КонецЕсли;
				КонецЕсли;
				
				Если ВыбТабДокумент.ТабДокФН8 <> Неопределено Тогда	
					Если ВыбТабДокумент.ТабДокФН8.ВысотаТаблицы > 2 Тогда				
						ТабДокумент.Вывести(ВыбТабДокумент.ТабДокФН8);
					КонецЕсли;
				КонецЕсли;
				
				СтруктураИнформацииОФайле = Новый Структура;
				СтруктураИнформацииОФайле.Вставить("ИмяТаблицы", ИмяТаблицы);
				СтруктураИнформацииОФайле.Вставить("ТабДокумент", ТабДокумент);
				МассивФайловДляВложения.Добавить(СтруктураИнформацииОФайле);  
				
				// Выводим таблицу по расшифровке  				
				ИмяТаблицы = КодОтчета + "_расшифровка_" + КодыКПКСтрокой + "_" + Формат(ДатаНачалаОтчета, "ДЛФ=Д") + "_" + Формат(ДатаОкончанияОтчета, "ДЛФ=Д") + ".xlsx";

				СтруктураИнформацииОФайле = Новый Структура;
				СтруктураИнформацииОФайле.Вставить("ИмяТаблицы", ИмяТаблицы);
				СтруктураИнформацииОФайле.Вставить("ТабДокумент", ВыбТабДокумент.ТабДокФН_Расшифровка);
				МассивФайловДляВложения.Добавить(СтруктураИнформацииОФайле);  

				
			Иначе	
			//	ИмяТаблицы = КодОтчета + "_" + СокрЛП(КПК.НомерВРеестреСРО) + "_" + Формат(ДатаНачалаОтчета, "ДЛФ=Д") + "_" + Формат(ДатаОкончанияОтчета, "ДЛФ=Д") + ".xlsx";
				
				
				Если ТипЗнч(ВыбТабДокумент) = Тип("ТабличныйДокумент") Тогда 
					ТабДокумент = ВыбТабДокумент;
							
				ИначеЕсли СтруктураПараметров.КодОтчета = "ПОС" Тогда
					ТабДокумент = ВыбТабДокумент.ТабличныйДокумент;
	
				Иначе
					Продолжить;		
				КонецЕсли;
				
				СтруктураИнформацииОФайле = Новый Структура;
				СтруктураИнформацииОФайле.Вставить("ИмяТаблицы", ИмяТаблицы);
				СтруктураИнформацииОФайле.Вставить("ТабДокумент", ТабДокумент);
				МассивФайловДляВложения.Добавить(СтруктураИнформацииОФайле);     
			КонецЕсли;    			
		КонецЕсли;          	
		
	КонецЦикла;
	
	
	Для Каждого ЭлементМассива ИЗ МассивФайловДляВложения Цикл 			
		ИмяТаблицы = ЭлементМассива.ИмяТаблицы;
		ТабДокумент = ЭлементМассива.ТабДокумент;
		
		ИмяВремВайла = КаталогВременныхФайлов() + ИмяТаблицы;		
		
		ТипФайла = ТипФайлаТабличногоДокумента.XLSX;
		ТабДокумент.Записать(ИмяВремВайла, ТипФайла);
		
		ДанныеЭксел = НОвый ДвоичныеДанные(ИмяВремВайла);  
		
		УникальныйИдентификатор = "";
		
		Вложение = Новый Структура; 
	
		Вложение.Вставить("АдресВоВременномХранилище", ПоместитьВоВременноеХранилище(ДанныеЭксел, УникальныйИдентификатор));
	//	Вложение.Вставить("Представление", ИмяВремВайла); 		
		Вложение.Вставить("Представление", ИмяТаблицы); 		
		
		Вложения.Добавить(Вложение);		
	КонецЦикла;		   
	
	ПараметрыПисьма.Вставить("Вложения", Вложения);      

	ИдентификаторСообщения = РаботаСПочтовымиСообщениями.ОтправитьПочтовоеСообщение(СтруктураПараметров.ЗаписьЭлектроннойПочты, ПараметрыПисьма);
	//ИдентификаторСообщения = "Выполнено успешно";
	
	Если СтрНайти(ИдентификаторСообщения, "Следующие почтовые адреса не были приняты почтовым сервером:") > 0 Тогда
		СтруктураПараметров.ТекстСообщения = ИдентификаторСообщения;	
		СтруктураПараметров.СРО_СтатусКомандыДляРассылки = Перечисления.СРО_СтатусКомандыДляРассылки.ОбработкаОтменена;
		УстановитьСтатусКомандыОтправителя(СтруктураПараметров); 	

		Возврат Неопределено; 
		
	Иначе
		ТекстСообщения = СтруктураПараметров.ТекстСообщения;     	
	
		СтруктураПараметров.ТекстСообщения =  ?(ТекстСообщения = "", "", Символы.ПС) + "Сообщение отправлено на адрес " + СТрока(СтруктураПараметров.АдресОтправителя) + ". Письмо от " + Строка(ДатаОтправления);
	
	КонецЕсли;
	
	Возврат ИдентификаторСообщения;  
	
КонецФункции

Функция СформированИВысланОтчет(СтруктураПараметров = Неопределено) Экспорт
		
	ВидСоединения = СтруктураПараметров.ВидСоединения;
	АдресОтправителя = СтруктураПараметров.АдресОтправителя;
	ИдентификаторСообщения = СтруктураПараметров.ИдентификаторСообщения;
	КодОтчета = СтруктураПараметров.КодОтчета;
	НазваниеОтчета = СтруктураПараметров.НазваниеОтчета; 

	МассивКПК = СтруктураПараметров.МассивКПК;   
	ДатаНачалаОтчета = СтруктураПараметров.ДатаНачалаОтчета;
	ДатаОкончанияОтчета = СтруктураПараметров.ДатаОкончанияОтчета;  	
	
	ЕстьОшибки = Ложь;
	
	Если НЕ СтруктураПараметров.Свойство("СРО_СтатусКомандыДляРассылки") Тогда
		СтруктураПараметров.СРО_СтатусКомандыДляРассылки = Перечисления.СРО_СтатусКомандыДляРассылки.ОбработкаОтменена;		
		Возврат Неопределено;
	КонецЕсли;                    	
	
	Если НазваниеОтчета = Неопределено Тогда 	
		УстановитьСтатусКомандыОтправителя(СтруктураПараметров); 
		Возврат Неопределено; 
	КонецЕсли;                 
	
	ФормироватьПисьмоПоКаждомуКПК = Истина;
	
	Если СтруктураПараметров.Свойство("ФормироватьПисьмоПоКаждомуКПК") Тогда
		ФормироватьПисьмоПоКаждомуКПК = СтруктураПараметров.ФормироватьПисьмоПоКаждомуКПК;
	КонецЕсли;
	
	НазваниеОтчетаПолное = "";

	
//	СтруктураПараметров.Вставить("НазваниеОтчетаПолное", НазваниеОтчетаПолное);     	
	
	// Пробуем сформировать отчет
	
	Если ФормироватьПисьмоПоКаждомуКПК = Истина Тогда
		                           
		Для Каждого ТекКПК ИЗ МассивКПК Цикл
			ВремМассив = Новый Массив;
			ВремМассив.Добавить(ТекКПК);
			
			СтруктураПараметров.МассивКПК = ВремМассив;	
			
			ИдентификаторСообщения = СформироватьОтчетПоВыбранымКПК(СтруктураПараметров); 
		КонецЦикла;    		
		
	Иначе
		ИдентификаторСообщения = СформироватьОтчетПоВыбранымКПК(СтруктураПараметров);    

	КонецЕсли;	  
	
	Если ИдентификаторСообщения <> Неопределено Тогда
		СтруктураПараметров.СРО_СтатусКомандыДляРассылки = Перечисления.СРО_СтатусКомандыДляРассылки.Обработано;
		УстановитьСтатусКомандыОтправителя(СтруктураПараметров); 	
	КонецЕсли;
	
	Возврат ИдентификаторСообщения;     
	
КонецФункции   


Процедура ЗаполнитьПараметрыИСформироватьОтчет() Экспорт
	
	СтруктураПараметров = Новый Структура;

	СтруктураПараметров.Вставить("АвтоматическаяЗагрузка", Истина);  
	СтруктураПараметров.Вставить("ЗаписьЭлектроннойПочты", Справочники.УчетныеЗаписиЭлектроннойПочты.СистемнаяУчетнаяЗаписьЭлектроннойПочты); 
	
	МассивПисем = Новый Массив;   
	ПолучитьМассивПисемСЭлектроннойПочты(СтруктураПараметров.ЗаписьЭлектроннойПочты, МассивПисем);	
	
КонецПроцедуры
#КонецОбласти


#Область ФормированиеФайловДляРасчетов
Процедура Сформировать_(СтруктураПараметров = Неопределено) Экспорт
	
	
КонецПроцедуры      
#КонецОбласти
