// Возвращает объект ИнтернетПрокси для доступа в Интернет.
// Допустимые протоколы для создания ИнтернетПрокси http, https, ftp и ftps.
//
// Параметры:
//    URLИлиПротокол - Строка - url в формате [Протокол://]<Сервер>/<Путь к файлу на сервере>,
//                              либо идентификатор протокола (http, ftp, ...).
//
// Возвращаемое значение:
//    ИнтернетПрокси - описывает параметры прокси-серверов для различных протоколов.
//                     Если не удалось распознать схему сетевой протокол,
//                     то будет создать прокси на основании протокола HTTP.
//
Функция ПолучитьПрокси(Знач URLИлиПротокол) Экспорт
	
	Возврат НовыйИнтернетПрокси(НастройкиПроксиНаСервере(), URLИлиПротокол);
	
КонецФункции   

// Возвращает прокси по настройкам НастройкаПроксиСервера для заданного протокола Протокол.
//
// Параметры:
//   НастройкаПроксиСервера - Соответствие:
//    ИспользоватьПрокси - использовать ли прокси-сервер.
//    НеИспользоватьПроксиДляЛокальныхАдресов - использовать ли прокси-сервер для локальных адресов.
//    ИспользоватьСистемныеНастройки - использовать ли системные настройки прокси-сервера.
//    Сервер       - адрес прокси-сервера.
//    Порт         - порт прокси-сервера.
//    Пользователь - имя пользователя для авторизации на прокси-сервере.
//    Пароль       - пароль пользователя.
//    ИспользоватьАутентификациюОС - Булево - признак использования аутентификации средствами операционной системы.
//   URLИлиПротокол - Строка - адрес ресурса или протокол, для которого устанавливаются параметры прокси сервера,
//                             например "https://1c.ru", "http", "https", "ftp", "ftps".
//
// Возвращаемое значение:
//   ИнтернетПрокси
//
Функция НовыйИнтернетПрокси(НастройкаПроксиСервера, URLИлиПротокол) Экспорт
	
	Протокол = "http";
	Если ЗначениеЗаполнено(URLИлиПротокол) Тогда
		Протокол = ПротоколДляПрокси(URLИлиПротокол);
	КонецЕсли;
	
	Если НастройкаПроксиСервера = Неопределено Тогда
		// Системные установки прокси-сервера.
		Возврат Неопределено;
	КонецЕсли;
	
	//ИспользоватьПрокси = НастройкаПроксиСервера.Получить("ИспользоватьПрокси");
	//Если Не ИспользоватьПрокси Тогда
	//	// Не использовать прокси-сервер.
	//	Возврат Новый ИнтернетПрокси(Ложь);
	//КонецЕсли;
	//
	//ИспользоватьСистемныеНастройки = НастройкаПроксиСервера.Получить("ИспользоватьСистемныеНастройки");
	//Если ИспользоватьСистемныеНастройки Тогда
	//	// Системные настройки прокси-сервера.
	//	Возврат Новый ИнтернетПрокси(Истина);
	//КонецЕсли;
	//
	//// Настройки прокси-сервера, заданные вручную.
	//Прокси = Новый ИнтернетПрокси;
	//
	//// Определение адреса и порта прокси-сервера.
	//ДополнительныеНастройки = НастройкаПроксиСервера.Получить("ДополнительныеНастройкиПрокси");
	//ПроксиПоПротоколу = Неопределено;
	//Если ТипЗнч(ДополнительныеНастройки) = Тип("Соответствие") Тогда
	//	ПроксиПоПротоколу = ДополнительныеНастройки.Получить(Протокол);
	//КонецЕсли;
	//
	//ИспользоватьАутентификациюОС = НастройкаПроксиСервера.Получить("ИспользоватьАутентификациюОС");
	//ИспользоватьАутентификациюОС = ?(ИспользоватьАутентификациюОС = Истина, Истина, Ложь);
	//
	//Если ТипЗнч(ПроксиПоПротоколу) = Тип("Структура") Тогда
	//	Прокси.Установить(Протокол, ПроксиПоПротоколу.Адрес, ПроксиПоПротоколу.Порт,
	//		НастройкаПроксиСервера["Пользователь"], НастройкаПроксиСервера["Пароль"], ИспользоватьАутентификациюОС);
	//Иначе
	//	Прокси.Установить(Протокол, НастройкаПроксиСервера["Сервер"], НастройкаПроксиСервера["Порт"], 
	//		НастройкаПроксиСервера["Пользователь"], НастройкаПроксиСервера["Пароль"], ИспользоватьАутентификациюОС);
	//КонецЕсли;
	//
	//Прокси.НеИспользоватьПроксиДляЛокальныхАдресов = НастройкаПроксиСервера["НеИспользоватьПроксиДляЛокальныхАдресов"];
	//
	//АдресаИсключений = НастройкаПроксиСервера.Получить("НеИспользоватьПроксиДляАдресов");
	//Если ТипЗнч(АдресаИсключений) = Тип("Массив") Тогда
	//	Для каждого АдресИсключения Из АдресаИсключений Цикл
	//		Прокси.НеИспользоватьПроксиДляАдресов.Добавить(АдресИсключения);
	//	КонецЦикла;
	//КонецЕсли;
	//
	//Возврат Прокси;
	
КонецФункции  

// Возвращает настройку прокси-сервера для доступа в Интернет со стороны
// клиента для текущего пользователя.
//
// Возвращаемое значение:
//   Соответствие:
//    ИспользоватьПрокси - использовать ли прокси-сервер.
//    НеИспользоватьПроксиДляЛокальныхАдресов - использовать ли прокси-сервер для локальных адресов.
//    ИспользоватьСистемныеНастройки - использовать ли системные настройки прокси-сервера.
//    Сервер       - адрес прокси-сервера.
//    Порт         - порт прокси-сервера.
//    Пользователь - имя пользователя для авторизации на прокси-сервере.
//    Пароль       - пароль пользователя.
//
Функция НастройкиПроксиНаКлиенте() Экспорт
	
	ИмяПользователя = Неопределено;
	
	Если ИнформационнаяБазаФайловая() Тогда
		
		// В файловом режиме регламентные задания выполняются на том же компьютере,
		// на котором выполняется работа пользователя.
		
		ТекущийСеансИнформационнойБазы = ПолучитьТекущийСеансИнформационнойБазы();
		ФоновоеЗадание = ТекущийСеансИнформационнойБазы.ПолучитьФоновоеЗадание();
		ЭтоСеансРегламентногоЗадания = ФоновоеЗадание <> Неопределено И ФоновоеЗадание.РегламентноеЗадание <> Неопределено;
		
		Если ЭтоСеансРегламентногоЗадания Тогда
			
			Если Не ЗначениеЗаполнено(ФоновоеЗадание.РегламентноеЗадание.ИмяПользователя) Тогда 
				
				// Если регламентное задание выполняется от имени пользователя по умолчанию,
				// то следует взять настройки прокси из сохраненных настроек пользователя,
				// на компьютере которого запущен текущий сеанс регламентного задания.
				
				Сеансы = ПолучитьСеансыИнформационнойБазы(); // Массив из СеансИнформационнойБазы
				Для Каждого Сеанс Из Сеансы Цикл 
					Если Сеанс.ИмяКомпьютера = ТекущийСеансИнформационнойБазы.ИмяКомпьютера Тогда 
						ИмяПользователя = Сеанс.Пользователь.Имя;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("НастройкаПроксиСервера", "",,, ИмяПользователя);
	
КонецФункции



// Возвращает параметры настройки прокси-сервера на стороне сервера 1С:Предприятия.
//
// Возвращаемое значение:
//   Соответствие:
//    ИспользоватьПрокси - использовать ли прокси-сервер.
//    НеИспользоватьПроксиДляЛокальныхАдресов - использовать ли прокси-сервер для локальных адресов.
//    ИспользоватьСистемныеНастройки - использовать ли системные настройки прокси-сервера.
//    Сервер       - адрес прокси-сервера.
//    Порт         - порт прокси-сервера.
//    Пользователь - имя пользователя для авторизации на прокси-сервере.
//    Пароль       - пароль пользователя.
//
Функция НастройкиПроксиНаСервере() Экспорт
	
	Если ИнформационнаяБазаФайловая() Тогда
		Возврат НастройкиПроксиНаКлиенте();
	//Иначе
	//	УстановитьПривилегированныйРежим(Истина);
	//	НастройкиПроксиНаСервере = Константы.НастройкаПроксиСервера.Получить().Получить();
	//	Возврат ?(ТипЗнч(НастройкиПроксиНаСервере) = Тип("Соответствие"),
	//		НастройкиПроксиНаСервере,
	//		Неопределено);
	КонецЕсли;
	
КонецФункции



Функция ПротоколДляПрокси(Знач URLИлиПротокол)
	
	ДопустимыеПротоколы = Новый Соответствие();
	ДопустимыеПротоколы.Вставить("HTTP",  Истина);
	ДопустимыеПротоколы.Вставить("HTTPS", Истина);
	ДопустимыеПротоколы.Вставить("FTP",   Истина);
	ДопустимыеПротоколы.Вставить("FTPS",  Истина);
	
	Если СтрНайти(URLИлиПротокол, "://") > 0 Тогда
		СтруктураURL = ОбщегоНазначенияКлиентСервер.СтруктураURI(URLИлиПротокол);
		Протокол = ?(ПустаяСтрока(СтруктураURL.Схема), "http", СтруктураURL.Схема);
	Иначе
		Протокол = НРег(URLИлиПротокол);
	КонецЕсли;
	
	Если ДопустимыеПротоколы[ВРег(Протокол)] = Неопределено Тогда
		Протокол = "HTTP";
	КонецЕсли;
	
	Возврат Протокол;
	
КонецФункции    

// Определяет режим эксплуатации информационной базы файловый (Истина) или серверный (Ложь).
// При проверке используется СтрокаСоединенияИнформационнойБазы, которую можно указать явно.
//
// Параметры:
//  СтрокаСоединенияИнформационнойБазы - Строка - параметр используется, если
//                 нужно проверить строку соединения не текущей информационной базы.
//
// Возвращаемое значение:
//  Булево - Истина, если файловая.
//
Функция ИнформационнаяБазаФайловая(Знач СтрокаСоединенияИнформационнойБазы = "") Экспорт
	
	Если ПустаяСтрока(СтрокаСоединенияИнформационнойБазы) Тогда
		СтрокаСоединенияИнформационнойБазы =  СтрокаСоединенияИнформационнойБазы();
	КонецЕсли;
	Возврат СтрНайти(ВРег(СтрокаСоединенияИнформационнойБазы), "FILE=") = 1;
	
КонецФункции 



