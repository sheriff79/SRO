// Возвращает сведения о юридическом лице из реестров ЕГРЮЛ, РАФП.
//
// Параметры:
//	ИНН - Строка - ИНН юридического лица.
//
// Возвращаемое значение:
//	- Структура - сведения о юридическом лице:
//	* ИНН - Строка - ИНН юридического лица.
//	* ЕГРЮЛ - Структура, Неопределено - сведения из ЮГРЮЛ. Поля:
//		** КПП - Строка - КПП юридического лица.
//		** Наименование - Строка - представление юридического лица в учетной программе.
//		** НаименованиеПолное - Строка - полное наименование юридического лица.
//		** НаименованиеСокращенное - Строка - сокращенное наименование юридического лица.
//		** НаименованиеПолноеЕГРЮЛ - Строка - полное наименование юридического лица в ЕГРЮЛ.
//		** НаименованиеСокращенноеЕГРЮЛ - Строка - сокращенное наименование юридического лица в ЕГРЮЛ.
//		** НаименованиеПолноеНаАнглийском - Строка - полное наименование юридического лица на английском.
//		** НаименованиеСокращенноеНаАнглийском - Строка - сокращенное наименование юридического лица на английском.
//		** РегистрационныйНомер - Строка - ОГРН юридического лица.
//		** ПравоваяФорма - Строка, Неопределено - правовая форма юридического лица.
//		** Статус - Структура - текущий статус юридического лица.
//			Поля:
//			*** Код - Строка - код статуса;
//			*** Наименование - Строка - наименование статуса;
//		** РегистрирующийОрган - Структура - орган, зарегистрировавший юридическое лицо.
//			Поля:
//			*** Код - Строка - код органа;
//			*** Наименование - Строка - наименование органа;
//		** ЮридическийАдрес - Структура, Неопределено - данные о юридическом адресе.
//			*** КонтактнаяИнформация - Строка - данные в формате JSON для заполнения реквизита
//				"Значение" контактной информации в табличной части КонтактнаяИнформация объекта
//				(см. описание подсистемы "Контактная информация" Библиотеки стандартных подсистем).
//			*** Представление - Строка - представление адреса.
//			*** Комментарий - Строка - произвольный комментарий.
//			*** Корректный - Булево - адрес является корректным по данным ФИАС;
//		** Телефон - Структура, Неопределено - данные о телефоне.
//			*** КонтактнаяИнформация - Строка - данные в формате JSON для заполнения реквизита
//				"Значение" контактной информации в табличной части КонтактнаяИнформация объекта
//				(см. описание подсистемы "Контактная информация" Библиотеки стандартных подсистем).
//			*** Представление - Строка - представление телефона.
//			*** Комментарий - Строка - произвольный комментарий.
//		** РегистрацияВНалоговомОргане - Структура, Неопределено - данные о регистрации в ИФНС.
//			*** Код - Строка - код налогового органа.
//			*** Наименование - Строка - наименование налогового органа.
//			*** ОКТМО - Строка - код ОКТМО налогового органа.
//			*** ОКАТО - Строка - код ОКАТО налогового органа.
//			*** ДатаРегистрации - Дата - дата постановки на учет в налоговом органе.
//		** ДатаРегистрации - Дата - дата регистрации юридического лица.
//		** ДатаПрекращенияДеятельности - Дата, Неопределено - дата прекращения деятельности юридического лица.
//		** НомерТиповогоУстава - Строка - Номер типового устава юридического лица.
//		** РегистрацияВПенсионномФонде - Структура, Неопределено - данные о регистрации в ПФР.
//			*** РегистрационныйНомерПФР - Строка - регистрационный номер юридического лица в ПФР.
//			*** КодОрганаПФР - Строка - код органа ПФР.
//			*** НаименованиеОрганаПФР - Строка - наименование органа ПФР.
//			*** ДатаРегистрации - Дата - дата постановки на учет в ПФР.
//		** РегистрацияВФСС - Структура, Неопределено - данные о регистрации в ФСС.
//			*** РегистрационныйНомерФСС - Строка - регистрационный номер юридического лица в ФСС.
//			*** КодПодчиненности - Строка - код подчиненности органа ФСС.
//			*** КодОрганаФСС - Строка - код органа ФСС.
//			*** НаименованиеОрганаФСС - Строка - наименование органа ФСС.
//			*** ДатаРегистрации - Дата - дата постановки на учет в ФСС.
//		** Руководители - ТаблицаЗначений - устарело, рекомендуется использовать свойство "ДанныеРуководителей".
//			Сведения о руководителях. Колонки:
//			*** Должность - Строка - должность руководителя.
//			*** Фамилия - Строка - фамилия руководителя.
//			*** Имя - Строка - имя руководителя.
//			*** Отчество - Строка - отчество руководителя.
//			*** Представление - Строка - ФИО руководителя или представление скрытых данных о руководителях.
//			*** ИНН - Строка - ИНН руководителя.
//			*** ДатаЗаписи - Дата - дата записи о руководителе.
//		** ДанныеРуководителей - Структура - сведения о руководителях:
//			*** СкрытыеДанные - Булево - признак скрытых данных о руководителях организации.
//			*** ПредставлениеСкрытыхДанных - Строка - представление скрытых данных о руководителях.
//				Заполняется если СкрытыеДанные = Истина
//			*** Руководители - ТаблицаЗначений - сведения о руководителях. Заполняется если СкрытыеДанные = Ложь. Колонки:
//				**** Должность - Строка - должность руководителя.
//				**** Фамилия - Строка - фамилия руководителя.
//				**** Имя - Строка - имя руководителя.
//				**** Отчество - Строка - отчество руководителя.
//				**** Представление - Строка - ФИО руководителя или представление скрытых данных о руководителях.
//				**** ИНН - Строка - ИНН руководителя.
//				**** ДатаЗаписи - Дата - дата записи о руководителе.
//		** ВидДеятельности - Структура - описание вида экономической деятельности. Поля:
//			*** Код - Строка - код вида деятельности;
//			*** Наименование - Строка- наименование вида деятельности;
//			*** Классификатор - Строка - тип классификатор экономической деятельности, согласно которому указаны код и наименование;
//						   Значения: "ОКВЭД", "ОКВЭД2"
//		** ОткрытыеГосударственныеДанныеФНС - ТаблицаЗначений - открытые данные. Колонки:
//			*** Год - Число - год, за который указаны данные;
//			*** КоличествоСотрудников - Число, Неопределено - количество сотрудников;
//			*** УчастиеВКГН - Строка, Неопределено - участие в консолидированной группе налогоплательщиков;
//			*** НалогообложениеЕСХН, Неопределено - Булево - Истина, если применяется тип налогообложения ЕСХН;
//			*** НалогообложениеУСН, Неопределено - Булево - Истина, если применяется тип налогообложения УСН;
//			*** НалогообложениеЕНВД, Неопределено - Булево - Истина, если применяется тип налогообложения ЕНВД;
//			*** НалогообложениеСРП, Неопределено - Булево - Истина, если применяется тип налогообложения СРП;
//		** ИсторияРеквизитов - Структура - история изменения реквизитов юридического лица.
//			*** КПП - ТаблицаЗначений - история изменения значения реквизита КПП;
//				Колонки:
//				**** Дата - Дата - дата изменения КПП;
//				**** Значение - Строка - значение реквизита КПП;
//			*** Наименование - ТаблицаЗначений - история изменения наименования;
//				Колонки:
//				**** Дата - Дата - дата изменения наименования;
//				**** НаименованиеПолное - Строка - полное наименование юридического лица;
//				**** НаименованиеСокращенное - Строка - сокращенное наименование юридического лица;
//			*** Адрес - ТаблицаЗначений - история изменения адреса;
//				Колонки:
//				**** Дата - Дата - дата изменения адреса;
//				**** КонтактнаяИнформация - Строка - данные в формате JSON для заполнения реквизита
//					"Значение" контактной информации в табличной части КонтактнаяИнформация объекта
//					(см. описание подсистемы "Контактная информация" Библиотеки стандартных подсистем).
//				**** Представление - Строка - представление адреса;
//				**** Комментарий - Строка - произвольный комментарий;
//			*** Статус - ТаблицаЗначений - история изменения статуса;
//				Колонки:
//				**** Дата - Дата - дата изменения наименования;
//				**** Код - Строка - код статуса;
//				**** Наименование - Строка - наименование статуса;
//			*** РеквизитыДиректора - ТаблицаЗначений - история изменения реквизитов директора;
//				Колонки:
//				**** Дата - Дата - дата изменения реквизитов директора;
//				**** ДатаОкончания - Дата - дата окончания действия реквизитов.
//					Пустая дата, если директор действующий;
//				**** ИНН - Строка - ИНН;
//				**** Фамилия - Строка - фамилия директора;
//				**** Имя - Строка - имя;
//				**** Отчество - Строка - отчество;
//				**** ВидДолжности - Строка - вид должности;
//				**** НаименованиеДолжности - Строка - наименование должности;
//	* РАФП - ТаблицаЗначений - сведения из РАФП. Колонки:
//			** КПП - Строка - КПП юридического лица;
//			** ВидОбособленногоПодразделения - Строка - вид обособленного подразделения;
//			** НаименованиеПолное - Строка - полное наименование представительства;
//			** РегистрацияВНалоговомОргане - Структура - информация о регистрации представительства
//														  в налоговом органе.
//				*** Код - Строка - код налогового органа.
//				*** Наименование - Строка - наименование налогового органа.
//				*** ДатаРегистрации - Дата - дата регистрации в налоговом органе;
//			** ЮридическийАдрес - Структура, Неопределено - юридический адрес:
//				*** КонтактнаяИнформация - Строка - данные в формате JSON для заполнения реквизита;
//					"Значение" контактной информации в табличной части КонтактнаяИнформация объекта
//					(см. описание подсистемы "Контактная информация" Библиотеки стандартных подсистем).
//				*** Представление - Строка - представление адреса;
//				*** Комментарий - Строка - произвольный комментарий;
//				*** Корректный - Булево - адрес является корректным по данным ФИАС;
//			** ВидДеятельности - Структура - описание основного вида экономической деятельности. Поля:
//				*** Код - Строка - код вида деятельности;
//				*** Наименование - Строка - наименование вида деятельности;
//				*** Классификатор - Строка - тип классификатор экономической деятельности, согласно которому указаны код и наименование;
//						   Значения: "ОКВЭД", "ОКВЭД2"
//			** ПрочиеВидыДеятельности - ТаблицаЗначений - описание прочих видов экономической деятельности:
//				*** Код - Строка - код вида деятельности;
//				*** Наименование - Строка - наименование вида деятельности;
//				*** Классификатор - Строка - тип классификатор экономической деятельности, согласно которому указаны код и наименование.
//						   Значения: "ОКВЭД", "ОКВЭД2";
//			** КоличествоИностранныхСотрудников - Число - количество иностранных сотрудников в представительстве;
//			** Руководитель - Структура, Неопределено - информация о руководителе:
//				*** Фамилия - Строка - фамилия руководителя;
//				*** Имя - Строка - имя руководителя;
//				*** Отчество - Строка - отчество руководителя;
//				*** Представление - Строка - ФИО руководителя;
//				*** ДатаЗаписи - Дата - дата записи о руководителе;
//			** Аккредитация - Структура - информация об аккредитации представительства. Поля:
//				*** НомерЗаписиОбАккредитации - Строка - номер записи об аккредитации;
//				*** ДатаАккредитации - Дата - дата аккредитации;
//				*** КодУполномоченногоНалоговогоОргана - Строка - код уполномоченного налогового органа,
//					выполнившего аккредитацию представительства;
//				*** НаименованиеУполномоченногоНалоговогоОргана - Строка - наименование уполномоченного налогового органа,
//					выполнившего аккредитацию представительства;
//				*** ДатаОкончанияСрокаАккредитации - Дата - дата окончания срока аккредитации;
//				*** ДатаПродленияАккредитации - Дата - дата принятия решения о продлении срока аккредитации;
//				*** ДатаОкончанияСрокаПродленияАккредитации - Дата - дата окончания срока продления аккредитации;
//			** ИностранноеЮридическоеЛицо - Структура - данные иностранной компании. Поля:
//				*** НаименованиеПолное - Строка - полное наименование иностранного юридического лица;
//				*** КодСтраны - Число - код страны регистрации по ОКСМ;
//				*** Страна - Строка - наименование страны регистрации;
//				*** Адрес - Строка - адрес иностранного юридического лица в стране регистрации;
//				*** УставныйКапитал - Структура - информация об уставном капитале. Поля:
//					**** Размер - Число - размер уставного капитала;
//					**** КодВалюты - Число - код валюты уставного капитала по ОКВ;
//					**** НаименованиеВалюты - Строка - наименование валюты уставного капитала;
//				*** КодНалогоплательщика - Строка - код или аналог кода налогоплательщика иностранного
//											юридического лица в стране регистрации;
//				*** Регистрация - Структура - информация о регистрации в стране регистрации. Поля:
//					**** РегистрационныйНомер - Строка - регистрационный номер;
//					**** НаименованиеОргана - Строка - наименование органа регистрации в стране регистрации;
//					**** ОсобенностиРежимаРегистрации - Строка - описание особенности режима регистрации;
//
//	* ОписаниеОшибки - Строка - описание возникшей ошибки.
//		Для обработки ошибки на клиентской части необходимо использовать метод
//		РаботаСКонтрагентамиКлиент.ОбработатьОшибку.
//
Функция СведенияОЮридическомЛицеПоИНН(Знач ИНН) Экспорт
	
	ЗаписатьИнформациюВЖурналРегистрации(
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Получение сведений о юридическом лице по ИНН %1'"),
			ИНН),
		"Контрагент",
		ДополнительноеСобытиеПолучениеДанных());
	
	Результат = Новый Структура;
	Результат.Вставить("ИНН", ИНН);
	Результат.Вставить("ЕГРЮЛ");
	Результат.Вставить("РАФП", НоваяТаблицаРАФП());
	Результат.Вставить("ОписаниеОшибки");
	
	Если Не ЗначениеЗаполнено(ИНН) Тогда
		Результат.ОписаниеОшибки = НСтр("ru='Не указан ИНН юридического лица.'");
		ЗаписатьИнформациюВЖурналРегистрации(
			Результат.ОписаниеОшибки,
			ИдентификаторСервисаКонтрагент(),
			НСтр("ru='Получение данных'", ОбщегоНазначения.КодОсновногоЯзыка()));
		Возврат Результат;
	КонецЕсли;
	
	ИдентификаторУслуги = ИдентификаторУслугиЗаполнениеРеквизитовКонтрагентов();
	URLОперации = URLRESTОперацииFindCounterAgentsByInn(ИНН);
	РезультатВызова = ПроверитьУслугуИВызватьОперациюRESTСервиса(
		ИдентификаторУслуги,
		URLОперации,
		ИдентификаторСервисаКонтрагент(),
		НСтр("ru='ИНН юридического лица должен состоять из 10 цифр.'"));
	ЗаполнитьЗначенияСвойств(Результат, РезультатВызова, "ОписаниеОшибки");
	Если ЗначениеЗаполнено(Результат.ОписаниеОшибки) Тогда
		Возврат Результат;
	КонецЕсли;
	
	ТелоОтветаОбъект = РезультатВызова.ТелоОтветаОбъект;
	
	ЗначениеCorporation = ТелоОтветаОбъект.Получить("corporation");
	Если ЗначениеCorporation = Неопределено Тогда
		ЗначениеCorporations = ТелоОтветаОбъект.Получить("corporations");
		Если ТипЗнч(ЗначениеCorporations) = Тип("Массив") И ЗначениеCorporations.Количество() > 0 Тогда
			ЗначениеCorporation = ЗначениеCorporations[0];
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеCorporation <> Неопределено Тогда
		
		РеквизитыЮридическогоЛица = НовыеРеквизитыЮридическогоЛица();
		
		РеквизитыЮридическогоЛица.РегистрационныйНомер = ЗначениеCorporation.Получить("ogrn");
		РеквизитыЮридическогоЛица.ИНН = ИНН;
		ЗначениеKpp = ЗначениеCorporation.Получить("kpp");
		Если ЗначениеKpp <> Неопределено Тогда
			РеквизитыЮридическогоЛица.КПП = ЗначениеKpp.Получить("value");
		КонецЕсли;
		
		РеквизитыЮридическогоЛица.ДатаРегистрации = ДатаИзJSON(ЗначениеCorporation.Получить("registrationDate"));
		ЗначениеterminationDate = ЗначениеCorporation.Получить("terminationDate");
		Если ЗначениеterminationDate <> Неопределено Тогда
			РеквизитыЮридическогоЛица.ДатаПрекращенияДеятельности = ДатаИзJSON(ЗначениеterminationDate);
		КонецЕсли;
		
		ЗначениеstandardCharterNumber = ЗначениеCorporation.Получить("standardCharterNumber");
		Если ЗначениеstandardCharterNumber <> Неопределено Тогда
			РеквизитыЮридическогоЛица.НомерТиповогоУстава = ЗначениеstandardCharterNumber;
		КонецЕсли;
		
		ЗаполнитьНаименованияЮридическогоЛица(ЗначениеCorporation.Получить("name"), РеквизитыЮридическогоЛица);
		ЗаполнитьКодОКВЭД(ЗначениеCorporation, РеквизитыЮридическогоЛица);
		ЗаполнитьВидДеятельности(ЗначениеCorporation, РеквизитыЮридическогоЛица);
		ЗаполнитьЮридическийАдрес(ЗначениеCorporation.Получить("address"), РеквизитыЮридическогоЛица);
		ЗаполнитьРегистрациюВНалоговомОргане(ЗначениеCorporation, РеквизитыЮридическогоЛица);
		ЗаполнитьРеквизитыПенсионногоФонда(ЗначениеCorporation, РеквизитыЮридическогоЛица);
		ЗаполнитьРеквизитыФондаСоциальногоСтрахования(ЗначениеCorporation, РеквизитыЮридическогоЛица);
		ЗаполнитьСведенияОРуководителях(ЗначениеCorporation, РеквизитыЮридическогоЛица);
		ЗаполнитьДанныеОРуководителях(ЗначениеCorporation, РеквизитыЮридическогоЛица);
		ЗаполнитьИнформациюОСтатусеСтруктура(ЗначениеCorporation, РеквизитыЮридическогоЛица);
		ЗаполнитьИнформациюОРегистрирующемОргане(ЗначениеCorporation, РеквизитыЮридическогоЛица);
		ЗаполнитьОткрытыеГосударственныеДанныеФНС(ЗначениеCorporation.Получить("openDataInfo"), РеквизитыЮридическогоЛица);
		ЗаполнитьИсториюРеквизитовЮридическогоЛица(ЗначениеCorporation, РеквизитыЮридическогоЛица);
		
		Если РеквизитыЮридическогоЛица.Руководители <> Неопределено Тогда
			УдалитьНеИспользуемыеКолонкиРуководителей(РеквизитыЮридическогоЛица.Руководители);
		КонецЕсли;
		
		Результат.ЕГРЮЛ = РеквизитыЮридическогоЛица;
		
	КонецЕсли;
	//
	//ЗначениеForeignRepresentations = ТелоОтветаОбъект.Получить("foreignRepresentations");
	//Если ТипЗнч(ЗначениеForeignRepresentations) = Тип("Массив") Тогда
	//	
	//	Для Каждого ТекущийЭлементJSON Из ЗначениеForeignRepresentations Цикл
	//		
	//		СведенияОПредставительстве = Результат.РАФП.Добавить();
	//		ЗаполнитьСведенияОПредставительстве(СведенияОПредставительстве, ТекущийЭлементJSON);
	//		СведенияОбИностранномЮридическомЛице = НовыйСведенияОбИностранномЮридическомЛице();
	//		ЗаполнитьСведенияОбИностранномЮридическомЛице(СведенияОбИностранномЮридическомЛице, ТекущийЭлементJSON);
	//		
	//		// Дедубликация иностранных юр. лиц - для сокращения количества одинаковых объектов в памяти
	//		СведенияОбИностранномЮридическомЛицеДляВозврата = Неопределено;
	//		Для Каждого ТекущееРеквизитыПредставительств Из Результат.РАФП Цикл
	//			Если ЗначенияЭквивалентны(
	//				СведенияОбИностранномЮридическомЛице,
	//				ТекущееРеквизитыПредставительств.ИностранноеЮридическоеЛицо) Тогда
	//				СведенияОбИностранномЮридическомЛицеДляВозврата = ТекущееРеквизитыПредставительств.ИностранноеЮридическоеЛицо;
	//				Прервать;
	//			КонецЕсли;
	//		КонецЦикла;
	//		
	//		СведенияОПредставительстве.ИностранноеЮридическоеЛицо =
	//			?(СведенияОбИностранномЮридическомЛицеДляВозврата = Неопределено,
	//				СведенияОбИностранномЮридическомЛице,
	//				СведенияОбИностранномЮридическомЛицеДляВозврата);
	//		
	//	КонецЦикла;
	//	
	//КонецЕсли;
	
	ЗаписатьИнформациюВЖурналРегистрации(
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Успешно завершено получение сведений о юридическом лице по ИНН %1'"),
			ИНН),
		"Контрагент",
		ДополнительноеСобытиеПолучениеДанных());
	
	Возврат Результат;
	
КонецФункции

Функция ДополнительноеСобытиеПолучениеДанных()
	
	Возврат НСтр("ru='Получение данных'", ОбщегоНазначения.КодОсновногоЯзыка());
	
КонецФункции  

Функция НоваяТаблицаРАФП()
	
	Результат = Новый ТаблицаЗначений;
	
	ТипСтрока = Новый ОписаниеТипов("Строка");
	Результат.Колонки.Добавить("КПП", ТипСтрока);
	Результат.Колонки.Добавить("ВидОбособленногоПодразделения", ТипСтрока);
	Результат.Колонки.Добавить("НаименованиеПолное", ТипСтрока);
	Результат.Колонки.Добавить("РегистрацияВНалоговомОргане");
	Результат.Колонки.Добавить("ЮридическийАдрес");
	Результат.Колонки.Добавить("ВидДеятельности");
	Результат.Колонки.Добавить("ПрочиеВидыДеятельности");
	Результат.Колонки.Добавить("КоличествоИностранныхСотрудников", Новый ОписаниеТипов("Число"));
	Результат.Колонки.Добавить("Руководитель");
	Результат.Колонки.Добавить("Аккредитация");
	Результат.Колонки.Добавить("ИностранноеЮридическоеЛицо");
	
	Возврат Результат;
	
КонецФункции   

Функция ИдентификаторСервисаКонтрагент() Экспорт
	
	Возврат "Контрагент";
	
КонецФункции  

Функция ИдентификаторУслугиЗаполнениеРеквизитовКонтрагентов()
	
	Возврат "1c-counteragent-autocomplete-contractor-details";
	
КонецФункции     

Функция URLRESTОперацииFindCounterAgentsByInn(ИНН)
	
	Возврат БазовыйURLСервиса() + "/rest/counter-agent/v1/find-counter-agents-by-inn?inn="
		+ КодироватьСтроку(ИНН, СпособКодированияСтроки.КодировкаURL);
	
КонецФункции  
	
Функция URLRESTОперацииPing()
	
	Возврат БазовыйURLСервиса() + "/rest/availability/v1/ping";
	
КонецФункции  

Функция БазовыйURLСервиса()
	
	
	Возврат "https://api.orgregister.1c.ru";
	
КонецФункции


	
Функция УслугаПодключена(ИдентификаторУслуги)
	
	Возврат Истина; // ИнтернетПоддержкаПользователей.УслугаПодключена(ИдентификаторУслуги);
	
КонецФункции

	
Функция ПроверитьУслугуИВызватьОперациюRESTСервиса(
	ИдентификаторУслуги,
	URLОперации,
	Сервис,
	ОписаниеОшибки400 = Неопределено)
	
	Результат = Новый Структура;
	Результат.Вставить("ОписаниеОшибки"  , "");
	Результат.Вставить("ТелоОтветаОбъект", "");
	Результат.Вставить("ОжиданиеОтвета"  , Ложь);
	
	Если Не УслугаПодключена(ИдентификаторУслуги) Тогда
		Результат.ОписаниеОшибки = "Сервис1СКонтрагентНеПодключен";
		ЗаписатьИнформациюВЖурналРегистрации(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Услуга с идентификатором ""%1"" не подключена.'"),
				ИдентификаторУслуги),
			Сервис,
			НСтр("ru='Доступ'", ОбщегоНазначения.КодОсновногоЯзыка()));
		Возврат Результат;
	КонецЕсли;
	
	ПроверитьДоступностьRESTСервисаКонтрагент(Результат.ОписаниеОшибки);
	Если Не ПустаяСтрока(Результат.ОписаниеОшибки) Тогда
		ЗаписатьОшибкуВЖурналРегистрации(
			НСтр("ru = 'При выполнении операции ping произошла ошибка. Выполнение операции невозможно.'"),
			Сервис,
			НСтр("ru='Ошибка'", ОбщегоНазначения.КодОсновногоЯзыка()));
		Возврат Результат;
	КонецЕсли;
	
	ПараметрыАутентификации = ПараметрыАутентификацииREST(URLОперации, Результат.ОписаниеОшибки);
	Если Не ПустаяСтрока(Результат.ОписаниеОшибки) Тогда
		ЗаписатьИнформациюВЖурналРегистрации(
			НСтр("ru = 'Интернет-поддержка пользователей не подключена.'"),
			Сервис,
			НСтр("ru='Аутентификация'", ОбщегоНазначения.КодОсновногоЯзыка()));
		Возврат Результат;
	КонецЕсли;
	
	СистИнфо = Новый СистемнаяИнформация;
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Content-Type", "application/json");
	Заголовки.Вставить("User-Agent",
		"1C-Enterprice-" + СистИнфо.ВерсияПриложения + ";" +
		"ISL-" + ИнтернетПоддержкаПользователей.ВерсияБиблиотеки() + ";");
	Заголовки.Вставить("configurationName", ИмяКонфигурацииBase64());
	ПараметрыВызоваОперации = Новый Структура;
	ПараметрыВызоваОперации.Вставить("Метод"       , "GET");
	ПараметрыВызоваОперации.Вставить("ФорматОтвета", 1);
	ПараметрыВызоваОперации.Вставить("Заголовки"   , Заголовки);
	ПараметрыВызоваОперации.Вставить("Таймаут"     , 30);
	
	РезультатОперации = ИнтернетПоддержкаПользователей.ЗагрузитьСодержимоеИзИнтернет(
		URLОперации,
		ПараметрыАутентификации.Логин,
		ПараметрыАутентификации.Пароль,
		ПараметрыВызоваОперации);
	
	Если РезультатОперации.КодСостояния = 202 Тогда
		
		Результат.ОжиданиеОтвета = Истина;
		
	ИначеЕсли РезультатОперации.КодСостояния >= 200 И РезультатОперации.КодСостояния < 300 Тогда
		
		Попытка
			Результат.ТелоОтветаОбъект = ТелоОтветаОбъектИзСтроки(РезультатОперации.Содержимое);
		Исключение
			Результат.ОписаниеОшибки = НСтр("ru='Ошибка при работе с сервисом (подробнее см. Журнал регистрации)'");
			ЗаписатьОшибкуВЖурналРегистрации(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Ошибка при обработке тела ответа операции %1 %2.
					|%3'"),
					ПараметрыВызоваОперации.Метод,
					URLОперации,
					Результат.КодСостояния,
					ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())),
				Сервис,
				НСтр("ru='Ошибка'", ОбщегоНазначения.КодОсновногоЯзыка()));
		КонецПопытки;
		
	ИначеЕсли РезультатОперации.КодСостояния = 400 Тогда
		
		Результат.ОписаниеОшибки = ?(ОписаниеОшибки400 = Неопределено,
			НСтр("ru = 'Некорректный формат параметров запроса.'"),
			ОписаниеОшибки400);
		ЗаписатьОшибкуВЖурналРегистрации(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("%1,
				|%2",
				Результат.ОписаниеОшибки,
				РезультатОперации.ИнформацияОбОшибке),
			Сервис,
			НСтр("ru='Получение данных'", ОбщегоНазначения.КодОсновногоЯзыка()));
		
	ИначеЕсли РезультатОперации.КодСостояния = 401 Тогда
		
		Если ОбщегоНазначения.РазделениеВключено() Тогда
			Результат.ОписаниеОшибки = НСтр("ru = 'Ошибка аутентификации в сервисе. Обратитесь к администратору.'");
			ЗаписатьОшибкуВЖурналРегистрации(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Ошибка аутентификации в сервисе.
						|%1'"),
						Результат.ОписаниеОшибки),
				Сервис,
				НСтр("ru='Аутентификация'", ОбщегоНазначения.КодОсновногоЯзыка()));
		Иначе
			Результат.ОписаниеОшибки = "НеУказаныПараметрыАутентификации";
			ЗаписатьИнформациюВЖурналРегистрации(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Интернет-поддержка пользователей не подключена.
						|%1'"),
						Результат.ОписаниеОшибки),
				Сервис,
				НСтр("ru='Аутентификация'", ОбщегоНазначения.КодОсновногоЯзыка()));
		КонецЕсли;
		
	ИначеЕсли РезультатОперации.КодСостояния = 402 Или РезультатОперации.КодСостояния = 403 Тогда
		
		Результат.ОписаниеОшибки = "Сервис1СКонтрагентНеПодключен";
		ЗаписатьИнформациюВЖурналРегистрации(
			НСтр("ru = 'Сервис 1С:Контрагент не подключен (403)'"),
			Сервис,
			НСтр("ru='Доступ'", ОбщегоНазначения.КодОсновногоЯзыка()));
		
	ИначеЕсли РезультатОперации.КодСостояния = 429 Тогда
		
		Результат.ОписаниеОшибки = НСтр("ru = 'Превышено количество попыток. Повторите попытку позже.'");
		ЗаписатьОшибкуВЖурналРегистрации(
			НСтр("ru = 'Превышено количество попыток. Повторите попытку позже (429).'"),
			Сервис,
			НСтр("ru='Вызов операций сервиса'", ОбщегоНазначения.КодОсновногоЯзыка()));
		
	Иначе
		
		Результат.ОписаниеОшибки = НСтр("ru='Ошибка при работе с сервисом (подробнее см. Журнал регистрации)'");
		ЗаписатьОшибкуВЖурналРегистрации(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось вызвать операцию %1 %2 сервиса.
					|Ошибка при выполнении запроса.
					|Код состояния: %3
					|%4'"),
				ПараметрыВызоваОперации.Метод,
				URLОперации,
				РезультатОперации.КодСостояния,
				РезультатОперации.ИнформацияОбОшибке),
			Сервис,
			НСтр("ru='Ошибка'", ОбщегоНазначения.КодОсновногоЯзыка()));
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции   

Процедура ПроверитьДоступностьRESTСервисаКонтрагент(ОписаниеОшибки)
	
	URLОперацииPing = URLRESTОперацииPing();
	РезультатПроверки = ИнтернетПоддержкаПользователей.ПроверитьURLДоступен(URLОперацииPing);
	Если Не ПустаяСтрока(РезультатПроверки.ИмяОшибки) Тогда
		ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось проверить доступность сервиса. Не удалось получить описание сервиса. %1
				|%2'"),
				URLОперацииPing,
				РезультатПроверки.ИнформацияОбОшибке);
		Возврат;
	КонецЕсли;
	
КонецПроцедуры          

Функция ПараметрыАутентификацииREST(URLОперации, ОписаниеОшибки)
	
	Результат = Новый Структура("Логин, Пароль");
	
		
	УстановитьПривилегированныйРежим(Истина);
	ДанныеАутентификации = ИнтернетПоддержкаПользователей.ДанныеАутентификацииПользователяИнтернетПоддержки();
	УстановитьПривилегированныйРежим(Ложь);
	Если ДанныеАутентификации = Неопределено Тогда
		ОписаниеОшибки = "НеУказаныПараметрыАутентификации";
	Иначе
		Результат.Логин = ДанныеАутентификации.Логин;
		Результат.Пароль = ДанныеАутентификации.Пароль;
	КонецЕсли;
		
		
	Возврат Результат;
	
КонецФункции
  
// Возвращает основные реквизиты юридического лица по данным ЕГРЮЛ.по ИНН
//
// Параметры:
//  ИННОбъекта - Строка - строка содержит ИНН контрагента
//  ЭтоЮрЛицо  - Булево - признак того, что контрагент является юридическим лицом
//
// Возвращаемое значение:
//  Структура:
//    * АдресРеквизитовКонтрагента - Строка - содержит адрес временного хранилища с регистрационными даннми контрагента.
//    * НаименованиеКонтрагента    - Строка - содержит наименование контрагента.
//    * ОписаниеОшибки - Строка - содержит текст ошибки, возникшей при получении данных.
//    * ЮридическоеФизическоеЛицо - ПеречислениеСсылка.ЮридическоеФизическоеЛицо - вид контрагента.
//
Функция ДанныеЕдиныхГосРеестровПоИНН(Знач ИННОбъекта, Знач ЭтоЮрЛицо) Экспорт
	ДанныеЗаполнения = Новый Структура("ОписаниеОшибки", "");
	
	ИННОбъекта = СокрП(ИННОбъекта);
	
	
	РезультатПроверки = ИдентификационныеНомераНалогоплательщиков.ПроверитьСоответствиеТребованиямИНН(ИННОбъекта, ЭтоЮрЛицо);
	
	Если РезультатПроверки.СоответствуетТребованиям Тогда

		СведенияОКонтрагенте = РаботаСКонтрагентами.СведенияОЮридическомЛицеПоИНН(ИННОбъекта);  
		Возврат СведенияОКонтрагенте;

		//РеквизитыКонтрагента = Новый Структура("ОписаниеОшибки", "");
		//Если ЗначениеЗаполнено(СведенияОКонтрагенте.ОписаниеОшибки) Тогда
		//	РеквизитыКонтрагента.ОписаниеОшибки = СведенияОКонтрагенте.ОписаниеОшибки;
		//ИначеЕсли ЗначениеЗаполнено(СведенияОКонтрагенте.ЕГРЮЛ) Тогда
		//	РеквизитыКонтрагента = СведенияОКонтрагенте.ЕГРЮЛ;
		//Иначе
		//	ШаблонОписанияОшибки = НСтр("ru = 'Не удалось найти данные для заполнения реквизитов по ИНН %1.'");
		//	РеквизитыКонтрагента.ОписаниеОшибки = СтрШаблон(ШаблонОписанияОшибки, ИННОбъекта);
		//КонецЕсли;
		//РеквизитыКонтрагента.Вставить("ИНН", ИННОбъекта);
		//Руководитель = Новый Структура("Фамилия, Имя, Отчество, Представление, ИНН, ДатаЗаписи, Должность");
		//Если Не ЗначениеЗаполнено(РеквизитыКонтрагента.ОписаниеОшибки) Тогда
		//	Если ЗначениеЗаполнено(РеквизитыКонтрагента.Руководители) Тогда
		//		ЗаполнитьЗначенияСвойств(Руководитель, РеквизитыКонтрагента.Руководители[0]);
		//	Иначе
		//		Руководитель = Неопределено;
		//	КонецЕсли;
		//	РеквизитыКонтрагента.Вставить("Руководитель", Руководитель);
		//	РеквизитыКонтрагента.Вставить("КодОКВЭД",
		//		?(ЗначениеЗаполнено(РеквизитыКонтрагента.ВидДеятельности), РеквизитыКонтрагента.ВидДеятельности.Код, Неопределено));
		//	РеквизитыКонтрагента.Вставить("ЭтоОКВЭД2",  
		//		?(ЗначениеЗаполнено(РеквизитыКонтрагента.ВидДеятельности) И РеквизитыКонтрагента.ВидДеятельности.Классификатор = "ОКВЭД2", Истина, Ложь));
		//КонецЕсли;
		//	
		//ДобавитьЗаписьВЖурналОбИспользованииСервиса(ИННОбъекта);
		//
		//РеквизитыКонтрагента.Вставить("ЮридическоеФизическоеЛицо", 
		//	?(РезультатПроверки.ЭтоЮрЛицо, Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо, Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо));
		//
		//Если ЗначениеЗаполнено(РеквизитыКонтрагента.ОписаниеОшибки) Тогда
		//	ДанныеЗаполнения.ОписаниеОшибки = РеквизитыКонтрагента.ОписаниеОшибки;
		//Иначе
		//	ДанныеЗаполнения.Вставить("НаименованиеКонтрагента", РеквизитыКонтрагента.Наименование);
		//	ДанныеЗаполнения.Вставить("ЮридическоеФизическоеЛицо", РеквизитыКонтрагента.ЮридическоеФизическоеЛицо);
		//	ДанныеЗаполнения.Вставить("АдресРеквизитовКонтрагента", ПоместитьВоВременноеХранилище(РеквизитыКонтрагента, Новый УникальныйИдентификатор));
		//КонецЕсли;
		
		//Возврат ДанныеЗаполнения;
		
		//Пока Заглушка
	КонецЕсли;

	КонецФункции  

Функция ИмяКонфигурацииBase64() Экспорт
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("txt");
	ЗаписьТекста = Новый ЗаписьТекста(ИмяВременногоФайла);
	ЗаписьТекста.Записать(ИнтернетПоддержкаПользователей.ИмяКонфигурации());
	ЗаписьТекста.Закрыть();
	
	Результат = Base64Строка(Новый ДвоичныеДанные(ИмяВременногоФайла));
	Попытка
		УдалитьФайлы(ИмяВременногоФайла);
	Исключение
		РаботаСКонтрагентами.ЗаписатьОшибкуВЖурналРегистрации(
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции      

Процедура ЗаписатьОшибкуВЖурналРегистрации(
	Сообщение,
	ИдентификаторСервиса = Неопределено,
	ДополнительноеСобытие = Неопределено) Экспорт
	
	ЗаписьЖурналаРегистрации(
		ИмяСобытияЖурналаРегистрации(ИдентификаторСервиса)
			+ ?(ДополнительноеСобытие = Неопределено, "", "." + ДополнительноеСобытие),
		УровеньЖурналаРегистрации.Ошибка,
		,
		,
		Сообщение);
	
КонецПроцедуры



Функция ИмяСобытияЖурналаРегистрации(ИдентификаторСервиса)
	
	КодОсновногоЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
	
	Если ИдентификаторСервиса = "Контрагент" Тогда
		Возврат НСтр("ru = 'Сервис данных единых гос_реестров'", КодОсновногоЯзыка);
	ИначеЕсли ИдентификаторСервиса = "РАФП" Тогда
		Возврат НСтр("ru = 'Сервис данных аккредитованных филиалов представительств иностранных юр. лиц'", ОбщегоНазначения.КодОсновногоЯзыка());
	ИначеЕсли ИдентификаторСервиса = "ГосОрганы" Тогда
		Возврат НСтр("ru = 'Сервис данных гос_органов'", КодОсновногоЯзыка);
	ИначеЕсли ИдентификаторСервиса = "ПроверкаКонтрагентов" Тогда
		Возврат НСтр("ru = 'Проверка контрагентов'", КодОсновногоЯзыка);
	Иначе
		Возврат НСтр("ru = 'Работа с контрагентами'", КодОсновногоЯзыка);
	КонецЕсли;
	
КонецФункции   

Функция ТелоОтветаОбъектИзСтроки(Строка)
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(Строка);
	Результат = ПрочитатьJSON(ЧтениеJSON, Истина);
	ЧтениеJSON.Закрыть();
	Возврат Результат;
	
КонецФункции   

Процедура ЗаписатьИнформациюВЖурналРегистрации(
	Сообщение,
	ИдентификаторСервиса,
	ДополнительноеСобытие = Неопределено)
	
	ЗаписьЖурналаРегистрации(
		ИмяСобытияЖурналаРегистрации(ИдентификаторСервиса)
			+ ?(ДополнительноеСобытие = Неопределено, "", "." + ДополнительноеСобытие),
		УровеньЖурналаРегистрации.Информация,
		,
		,
		Сообщение);
	
КонецПроцедуры

Функция НовыеРеквизитыЮридическогоЛица()

	РеквизитыОрганизации = Новый Структура;
	
	// Заполняется на основе данных ЕГРЮЛ.
	РеквизитыОрганизации.Вставить("ИНН");
	РеквизитыОрганизации.Вставить("КПП");
	РеквизитыОрганизации.Вставить("Наименование");
	РеквизитыОрганизации.Вставить("НаименованиеПолное");
	РеквизитыОрганизации.Вставить("НаименованиеСокращенное");
	РеквизитыОрганизации.Вставить("НаименованиеПолноеЕГРЮЛ");
	РеквизитыОрганизации.Вставить("НаименованиеСокращенноеЕГРЮЛ");
	РеквизитыОрганизации.Вставить("НаименованиеПолноеНаАнглийском");
	РеквизитыОрганизации.Вставить("НаименованиеСокращенноеНаАнглийском");
	РеквизитыОрганизации.Вставить("РегистрационныйНомер");
	РеквизитыОрганизации.Вставить("Статус");
	РеквизитыОрганизации.Вставить("РегистрирующийОрган");
	РеквизитыОрганизации.Вставить("НомерТиповогоУстава");
	
	// Следующие свойства могут содержать Неопределено в случае отсутствия в сервисе данных.
	РеквизитыОрганизации.Вставить("ПравоваяФорма");
	РеквизитыОрганизации.Вставить("ЮридическийАдрес");
	РеквизитыОрганизации.Вставить("Телефон");
	РеквизитыОрганизации.Вставить("Руководители", НоваяТаблицаРуководителей());
	РеквизитыОрганизации.Вставить("ДанныеРуководителей", НовыеДанныеРуководителей());
	РеквизитыОрганизации.Вставить("РегистрацияВНалоговомОргане");
	РеквизитыОрганизации.Вставить("ДатаРегистрации");
	РеквизитыОрганизации.Вставить("ДатаПрекращенияДеятельности");
	РеквизитыОрганизации.Вставить("РегистрацияВПенсионномФонде");
	РеквизитыОрганизации.Вставить("РегистрацияВФСС");
	РеквизитыОрганизации.Вставить("ВидДеятельности");
	РеквизитыОрганизации.Вставить("ОткрытыеГосударственныеДанныеФНС", НоваяТаблицаОткрытыеГосударственныеДанныеФНС());
	
	РеквизитыОрганизации.Вставить("ИсторияРеквизитов", НовыйИсторияРеквизитовЮридическогоЛица());
	
	// Служебный реквизит
	РеквизитыОрганизации.Вставить("ОписаниеОшибки");
	
	// Устаревшие поля
	РеквизитыОрганизации.Вставить("КодОКВЭД");
	РеквизитыОрганизации.Вставить("ЭтоОКВЭД2", Ложь);
	РеквизитыОрганизации.Вставить("Руководитель");
	
	Возврат РеквизитыОрганизации;

КонецФункции   

Функция НоваяТаблицаРуководителей()
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("Должность"                                   , Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("Фамилия"                                     , Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("Имя"                                         , Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("Отчество"                                    , Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("Представление"                               , Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("ИНН"                                         , Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("ДатаЗаписи"                                  , Новый ОписаниеТипов("Дата"));
	Результат.Колонки.Добавить("ОрганизацииГдеРуководитель"); // НоваяТаблицаОрганизации()
	Результат.Колонки.Добавить("ОрганизацииГдеУчредитель"); // НоваяТаблицаОрганизацииГдеУчредитель()
	Результат.Колонки.Добавить("ОрганизацииГдеРуководительПоФИО", Новый ОписаниеТипов("Булево"));
	Результат.Колонки.Добавить("ОрганизацииГдеУчредительПоФИО"  , Новый ОписаниеТипов("Булево"));
	Возврат Результат;
	
КонецФункции   

Функция НовыеДанныеРуководителей()

	Результат = Новый Структура;
	Результат.Вставить("СкрытыеДанные",              Ложь);
	Результат.Вставить("ПредставлениеСкрытыхДанных", "");
	Результат.Вставить("Руководители",               НоваяТаблицаРуководителей());
	
	Возврат Результат;

КонецФункции   

Функция НоваяТаблицаОткрытыеГосударственныеДанныеФНС()
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("Год", Новый ОписаниеТипов("Число"));
	Результат.Колонки.Добавить("КоличествоСотрудников");
	Результат.Колонки.Добавить("СуммаДоходов");
	Результат.Колонки.Добавить("СуммаРасходов");
	Результат.Колонки.Добавить("УчастиеВКГН");
	Результат.Колонки.Добавить("НалогообложениеЕСХН");
	Результат.Колонки.Добавить("НалогообложениеУСН");
	Результат.Колонки.Добавить("НалогообложениеЕНВД");
	Результат.Колонки.Добавить("НалогообложениеСРП");
	Результат.Колонки.Добавить("СведенияОНалогах"); // НоваяТаблицаСведенияОНалогах()
	
	Возврат Результат;
	
КонецФункции     

Функция НовыйИсторияРеквизитовЮридическогоЛица()
	
	Результат = Новый Структура;
	Результат.Вставить("КПП"               , НовыйТаблицаИсторияКПП());
	Результат.Вставить("Наименование"      , НовыйТаблицаИсторияНаименование());
	Результат.Вставить("Адрес"             , НовыйТаблицаИсторияАдрес());
	Результат.Вставить("Статус"            , НовыйТаблицаИсторияСтатус());
	Результат.Вставить("РеквизитыДиректора", НовыйТаблицаИсторияРеквизитыДиректора());
	
	Возврат Результат;
	
КонецФункции   

Функция НовыйТаблицаИсторияКПП()
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("Дата"    , Новый ОписаниеТипов("Дата", , , , , Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
	Результат.Колонки.Добавить("Значение", Новый ОписаниеТипов("Строка"));
	
	Возврат Результат;
	
КонецФункции

Функция НовыйТаблицаИсторияНаименование()
	
	Результат = Новый ТаблицаЗначений;
	
	ТипДата   = Новый ОписаниеТипов("Дата", , , , , Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя));
	ТипСтрока = Новый ОписаниеТипов("Строка");
	
	Результат.Колонки.Добавить("Дата"                   , ТипДата);
	Результат.Колонки.Добавить("НаименованиеПолное"     , ТипСтрока);
	Результат.Колонки.Добавить("НаименованиеСокращенное", ТипСтрока);
	
	Возврат Результат;
	
КонецФункции

Функция НовыйТаблицаИсторияАдрес()
	
	Результат = Новый ТаблицаЗначений;
	
	ТипДата   = Новый ОписаниеТипов("Дата", , , , , Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя));
	ТипСтрока = Новый ОписаниеТипов("Строка");
	
	Результат.Колонки.Добавить("Дата"                , ТипДата);
	Результат.Колонки.Добавить("КонтактнаяИнформация", ТипСтрока);
	Результат.Колонки.Добавить("Представление"       , ТипСтрока);
	Результат.Колонки.Добавить("Комментарий"         , ТипСтрока);
	
	Возврат Результат;
	
КонецФункции

Функция НовыйТаблицаИсторияСтатус()
	
	Результат = Новый ТаблицаЗначений;
	
	ТипДата   = Новый ОписаниеТипов("Дата", , , , , Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя));
	ТипСтрока = Новый ОписаниеТипов("Строка");
	
	Результат.Колонки.Добавить("Дата"        , ТипДата);
	Результат.Колонки.Добавить("Код"         , ТипСтрока);
	Результат.Колонки.Добавить("Наименование", ТипСтрока);
	
	Возврат Результат;
	
КонецФункции

Функция НовыйТаблицаИсторияРеквизитыДиректора()
	
	Результат = Новый ТаблицаЗначений;
	
	ТипДата   = Новый ОписаниеТипов("Дата", , , , , Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя));
	ТипСтрока = Новый ОписаниеТипов("Строка");
	
	Результат.Колонки.Добавить("Дата"         , ТипДата);
	Результат.Колонки.Добавить("ДатаОкончания", ТипДата);
	Результат.Колонки.Добавить("ИНН", ТипСтрока);
	Результат.Колонки.Добавить("Фамилия", ТипСтрока);
	Результат.Колонки.Добавить("Имя", ТипСтрока);
	Результат.Колонки.Добавить("Отчество", ТипСтрока);
	Результат.Колонки.Добавить("ВидДолжности", ТипСтрока);
	Результат.Колонки.Добавить("НаименованиеДолжности", ТипСтрока);
	
	Возврат Результат;
	
КонецФункции

Функция ДатаИзJSON(ДатаСтрока)
	
	Возврат ?(ДатаСтрока = Неопределено, Неопределено, ПрочитатьДатуJSON(ДатаСтрока, ФорматДатыJSON.ISO));
	
КонецФункции   

Процедура ЗаполнитьНаименованияЮридическогоЛица(НаименованиеJSON, Реквизиты)
	
	Если НаименованиеJSON <> Неопределено Тогда
		
		Реквизиты.Наименование = СокрЛП(Строка(НаименованиеJSON.Получить("commonName")));
		Реквизиты.НаименованиеПолное = НаименованиеJSON.Получить("fullName");
		Реквизиты.НаименованиеСокращенное = СокрЛП(Строка(НаименованиеJSON.Получить("shortName")));
		Реквизиты.НаименованиеПолноеЕГРЮЛ = НаименованиеJSON.Получить("fullNameFromEgrul");
		Реквизиты.НаименованиеСокращенноеЕГРЮЛ = НаименованиеJSON.Получить("shortNameFromEgrul");
		
		ЗначениеshortEnNameFromEgrul = НаименованиеJSON.Получить("shortEnNameFromEgrul");
		Если ЗначениеshortEnNameFromEgrul <> Неопределено Тогда
			Реквизиты.НаименованиеСокращенноеНаАнглийском = ЗначениеshortEnNameFromEgrul;
		КонецЕсли;
		
		ЗначениеfullEnNameFromEgrul = НаименованиеJSON.Получить("fullEnNameFromEgrul");
		Если ЗначениеfullEnNameFromEgrul <> Неопределено Тогда
			Реквизиты.НаименованиеПолноеНаАнглийском = ЗначениеfullEnNameFromEgrul;
		КонецЕсли;
		
		Реквизиты.ПравоваяФорма = НаименованиеJSON.Получить("organizationForm");
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьКодОКВЭД(ТелоОтветаОбъект, Реквизиты)
	
	ЗначениеEconomicActivityInfo = ТелоОтветаОбъект.Получить("economicActivityInfo");
	Если ЗначениеEconomicActivityInfo <> Неопределено Тогда
		
		ЗначениеMainActivity = ЗначениеEconomicActivityInfo.Получить("mainActivity");
		Если ЗначениеMainActivity <> Неопределено Тогда
			Реквизиты.КодОКВЭД = ЗначениеMainActivity.Получить("code");
			Реквизиты.ЭтоОКВЭД2 = (ЗначениеMainActivity.Получить("classifierType") = "ОКВЭД2");
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьВидДеятельности(ТелоОтветаОбъект, Реквизиты)
	
	ЗначениеEconomicActivityInfo = ТелоОтветаОбъект.Получить("economicActivityInfo");
	Если ЗначениеEconomicActivityInfo <> Неопределено Тогда
		
		ЗначениеMainActivity = ЗначениеEconomicActivityInfo.Получить("mainActivity");
		Если ЗначениеMainActivity <> Неопределено Тогда
			ВидДеятельности = НовыйОписаниеВидаДеятельности();
			ВидДеятельности.Код = ЗначениеMainActivity.Получить("code");
			ВидДеятельности.Наименование = ЗначениеMainActivity.Получить("name");
			ВидДеятельности.Классификатор = ЗначениеMainActivity.Получить("classifierType");
			Реквизиты.ВидДеятельности = ВидДеятельности;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры    

Функция НовыйОписаниеВидаДеятельности()
	
	Результат = Новый Структура;
	Результат.Вставить("Код");
	Результат.Вставить("Наименование");
	Результат.Вставить("Классификатор");
	
	Возврат Результат;
	
КонецФункции

Процедура ЗаполнитьЮридическийАдрес(АдресJSON, Реквизиты, Фабрика = Неопределено, АдресныеСокращения = Неопределено)
	
	Если АдресJSON <> Неопределено Тогда
		
		Реквизиты.ЮридическийАдрес = АдресКИИзJSON(АдресJSON);
		Реквизиты.ЮридическийАдрес.Вставить("Корректный", (АдресJSON.Получить("valid") = Истина));
		
	КонецЕсли;
	
КонецПроцедуры   

Функция АдресКИИзJSON(АдресJSON)
	
	АдресСтруктура = РаботаСАдресамиКлиентСервер.ПоляАдреса();
	
	АдресСтруктура.ТипАдреса = "Муниципальный";
	Если АдресJSON.Получить("addressType") = "ADMINISTRATIVE" Тогда
		АдресСтруктура.ТипАдреса = "Административно-территориальный";
	КонецЕсли;
	
	ЗначениеCountry = АдресJSON.Получить("country");
	Если ЗначениеЗаполнено(ЗначениеCountry) Тогда
		АдресСтруктура.Страна = ЗначениеCountry;
	КонецЕсли;
	
	ЗначениеCountryCode = АдресJSON.Получить("countryCode");
	Если ЗначениеЗаполнено(ЗначениеCountryCode) Тогда
		АдресСтруктура.КодСтраны = ЗначениеCountryCode;
	КонецЕсли;
	
	ЗначениеValue = АдресJSON.Получить("valueWithPostalCode");
	Если ЗначениеЗаполнено(ЗначениеValue) Тогда
		АдресСтруктура.Представление = ЗначениеValue;
	КонецЕсли;
	
	Если АдресJSON.Получить("unrecognizedPart") <> Неопределено Тогда
		// Если есть нераспознанная часть, тогда в комментарий кладется весь адрес в текстовом представлении
		АдресСтруктура.Комментарий = АдресСтруктура.Представление;
	КонецЕсли;
	
	ЗначениеComment = АдресJSON.Получить("comment");
	Если ЗначениеComment <> Неопределено Тогда
		АдресСтруктура.Комментарий = ЗначениеComment;
	КонецЕсли;
	
	ЗначениеMunValue = АдресJSON.Получить("munValue");
	Если ЗначениеЗаполнено(ЗначениеMunValue) Тогда
		АдресСтруктура.МуниципальноеПредставление = ЗначениеMunValue;
	КонецЕсли;
	
	ЗначениеPostalCode = АдресJSON.Получить("postalCode");
	Если ЗначениеЗаполнено(ЗначениеPostalCode) Тогда
		АдресСтруктура.Индекс = ЗначениеPostalCode;
	КонецЕсли;
	
	ЗначениеAreaCode = АдресJSON.Получить("areaCode");
	Если ЗначениеЗаполнено(ЗначениеAreaCode) Тогда
		АдресСтруктура.КодРегиона = ЗначениеAreaCode;
	КонецЕсли;
	
	ЗначениеArea = АдресJSON.Получить("area");
	Если ЗначениеЗаполнено(ЗначениеArea) Тогда
		АдресСтруктура.Регион = ЗначениеArea;
	КонецЕсли;
	
	ЗначениеAreaType = АдресJSON.Получить("areaType");
	Если ЗначениеЗаполнено(ЗначениеAreaType) Тогда
		АдресСтруктура.РегионСокращение = ЗначениеAreaType;
	КонецЕсли;
	
	ЗначениеDistrict = АдресJSON.Получить("district");
	Если ЗначениеЗаполнено(ЗначениеDistrict) Тогда
		АдресСтруктура.Район = ЗначениеDistrict;
	КонецЕсли;
	
	ЗначениеDistrictType = АдресJSON.Получить("districtType");
	Если ЗначениеЗаполнено(ЗначениеDistrictType) Тогда
		АдресСтруктура.РайонСокращение = ЗначениеDistrictType;
	КонецЕсли;
	
	ЗначениеMunDistrict = АдресJSON.Получить("munDistrict");
	Если ЗначениеЗаполнено(ЗначениеMunDistrict) Тогда
		АдресСтруктура.МуниципальныйРайон = ЗначениеMunDistrict;
	КонецЕсли;
	
	ЗначениеMunDistrictType = АдресJSON.Получить("munDistrictType");
	Если ЗначениеЗаполнено(ЗначениеMunDistrictType) Тогда
		АдресСтруктура.МуниципальныйРайонСокращение = ЗначениеMunDistrictType;
	КонецЕсли;
	
	ЗначениеCity = АдресJSON.Получить("city");
	Если ЗначениеЗаполнено(ЗначениеCity) Тогда
		АдресСтруктура.Город = ЗначениеCity;
	КонецЕсли;
	
	ЗначениеCityType = АдресJSON.Получить("cityType");
	Если ЗначениеЗаполнено(ЗначениеCityType) Тогда
		АдресСтруктура.ГородСокращение = ЗначениеCityType;
	КонецЕсли;
	
	ЗначениеSettlement = АдресJSON.Получить("settlement");
	Если ЗначениеЗаполнено(ЗначениеSettlement) Тогда
		АдресСтруктура.Поселение = ЗначениеSettlement;
	КонецЕсли;
	
	ЗначениеSettlementType = АдресJSON.Получить("settlementType");
	Если ЗначениеЗаполнено(ЗначениеSettlementType) Тогда
		АдресСтруктура.ПоселениеСокращение = ЗначениеSettlementType;
	КонецЕсли;
	
	ЗначениеCityDistrict = АдресJSON.Получить("cityDistrict");
	Если ЗначениеЗаполнено(ЗначениеCityDistrict) Тогда
		АдресСтруктура.ВнутригородскойРайон = ЗначениеCityDistrict;
	КонецЕсли;
	
	ЗначениеCityDistrictType = АдресJSON.Получить("cityDistrictType");
	Если ЗначениеЗаполнено(ЗначениеCityDistrictType) Тогда
		АдресСтруктура.ВнутригородскойРайонСокращение = ЗначениеCityDistrictType;
	КонецЕсли;
	
	ЗначениеLocality = АдресJSON.Получить("locality");
	Если ЗначениеЗаполнено(ЗначениеLocality) Тогда
		АдресСтруктура.НаселенныйПункт = ЗначениеLocality;
	КонецЕсли;
	
	ЗначениеLocalityType = АдресJSON.Получить("localityType");
	Если ЗначениеЗаполнено(ЗначениеLocalityType) Тогда
		АдресСтруктура.НаселенныйПунктСокращение = ЗначениеLocalityType;
	КонецЕсли;
	
	ЗначениеTerritory = АдресJSON.Получить("territory");
	Если ЗначениеЗаполнено(ЗначениеTerritory) Тогда
		АдресСтруктура.Территория = ЗначениеTerritory;
	КонецЕсли;
	
	ЗначениеTerritoryType = АдресJSON.Получить("territoryType");
	Если ЗначениеЗаполнено(ЗначениеTerritoryType) Тогда
		АдресСтруктура.ТерриторияСокращение = ЗначениеTerritoryType;
	КонецЕсли;
	
	ЗначениеStreet = АдресJSON.Получить("street");
	Если ЗначениеЗаполнено(ЗначениеStreet) Тогда
		АдресСтруктура.Улица = ЗначениеStreet;
	КонецЕсли;
	
	ЗначениеStreetType = АдресJSON.Получить("streetType");
	Если ЗначениеЗаполнено(ЗначениеStreetType) Тогда
		АдресСтруктура.УлицаСокращение = ЗначениеStreetType;
	КонецЕсли;
	
	ЗначениеHouse = АдресJSON.Получить("house");
	Если ЗначениеЗаполнено(ЗначениеHouse) Тогда
		АдресСтруктура.Здание.Номер = ЗначениеHouse;
	КонецЕсли;
	
	ЗначениеHouseType = АдресJSON.Получить("houseType");
	Если ЗначениеЗаполнено(ЗначениеHouseType) Тогда
		АдресСтруктура.Здание.ТипЗдания = ВРег(Лев(ЗначениеHouseType, 1)) + Сред(ЗначениеHouseType, 2);
	КонецЕсли;
	
	ЗначениеStead = АдресJSON.Получить("stead");
	Если ЗначениеЗаполнено(ЗначениеStead) И АдресСтруктура.Свойство("НомерЗемельногоУчастка") Тогда
		АдресСтруктура.НомерЗемельногоУчастка = ЗначениеStead;
	КонецЕсли;
	
	ЗначениеBuildings = АдресJSON.Получить("buildings");
	Если ТипЗнч(ЗначениеBuildings) = Тип("Массив") Тогда
		Для Каждого ТекущийКорпусJSON Из ЗначениеBuildings Цикл
			ЗначениеType = ТекущийКорпусJSON.Получить("type");
			ТипКорпуса = ВРег(Лев(ЗначениеType, 1)) + Сред(ЗначениеType, 2);
			АдресСтруктура.Корпуса.Добавить(
				Новый Структура("ТипКорпуса, Тип, Номер",
					ТипКорпуса,
					ТипКорпуса,
					ТекущийКорпусJSON.Получить("number")));
		КонецЦикла;
	КонецЕсли;
	
	ЗначениеApartments = АдресJSON.Получить("apartments");
	Если ТипЗнч(ЗначениеApartments) = Тип("Массив") Тогда
		Для Каждого ТекущееПомещениеJSON Из ЗначениеApartments Цикл
			ЗначениеType = ТекущееПомещениеJSON.Получить("type");
			ТипПомещения = ВРег(Лев(ЗначениеType, 1)) + Сред(ЗначениеType, 2);
			АдресСтруктура.Помещения.Добавить(
				Новый Структура("ТипПомещения, Тип, Номер",
					ТипПомещения,
					ТипПомещения,
					ТекущееПомещениеJSON.Получить("number")));
		КонецЦикла;
	КонецЕсли;
	
	ЗначениеId = АдресJSON.Получить("id");
	Если ЗначениеЗаполнено(ЗначениеId) Тогда
		АдресСтруктура.ИдентификаторАдресногоОбъекта = Новый УникальныйИдентификатор(ЗначениеId);
	КонецЕсли;
	
	ЗначениеHouseId = АдресJSON.Получить("houseId");
	Если ЗначениеЗаполнено(ЗначениеHouseId) Тогда
		АдресСтруктура.ИдентификаторДома = Новый УникальныйИдентификатор(ЗначениеHouseId);
	КонецЕсли;
	
	ЗначениеSteadId = АдресJSON.Получить("steadId");
	Если ЗначениеЗаполнено(ЗначениеSteadId) И АдресСтруктура.Свойство("ИдентификаторЗемельногоУчастка") Тогда
		АдресСтруктура.ИдентификаторЗемельногоУчастка = Новый УникальныйИдентификатор(ЗначениеSteadId);
	КонецЕсли;
	
	ЗначениеAreaId = АдресJSON.Получить("areaId");
	Если ЗначениеЗаполнено(ЗначениеAreaId) Тогда
		АдресСтруктура.Идентификаторы.РегионИдентификатор = Новый УникальныйИдентификатор(ЗначениеAreaId);
	КонецЕсли;
	
	ЗначениеDistrictId = АдресJSON.Получить("districtId");
	Если ЗначениеЗаполнено(ЗначениеDistrictId) Тогда
		АдресСтруктура.Идентификаторы.РайонИдентификатор = Новый УникальныйИдентификатор(ЗначениеDistrictId);
	КонецЕсли;
	
	ЗначениеMunDistrictId = АдресJSON.Получить("munDistrictId");
	Если ЗначениеЗаполнено(ЗначениеMunDistrictId) Тогда
		АдресСтруктура.Идентификаторы.МуниципальныйРайонИдентификатор = Новый УникальныйИдентификатор(ЗначениеMunDistrictId);
	КонецЕсли;
	
	ЗначениеCityId = АдресJSON.Получить("cityId");
	Если ЗначениеЗаполнено(ЗначениеCityId) Тогда
		АдресСтруктура.Идентификаторы.ГородИдентификатор = Новый УникальныйИдентификатор(ЗначениеCityId);
	КонецЕсли;
	
	ЗначениеSettlementId = АдресJSON.Получить("settlementId");
	Если ЗначениеЗаполнено(ЗначениеSettlementId) Тогда
		АдресСтруктура.Идентификаторы.ПоселениеИдентификатор = Новый УникальныйИдентификатор(ЗначениеSettlementId);
	КонецЕсли;
	
	ЗначениеCityDistrictId = АдресJSON.Получить("cityDistrictId");
	Если ЗначениеЗаполнено(ЗначениеCityDistrictId) Тогда
		АдресСтруктура.Идентификаторы.ВнутригородскойРайонИдентификатор = Новый УникальныйИдентификатор(ЗначениеCityDistrictId);
	КонецЕсли;
	
	ЗначениеLocalityId = АдресJSON.Получить("localityId");
	Если ЗначениеЗаполнено(ЗначениеLocalityId) Тогда
		АдресСтруктура.Идентификаторы.НаселенныйПунктИдентификатор = Новый УникальныйИдентификатор(ЗначениеLocalityId);
	КонецЕсли;
	
	ЗначениеTerritoryId = АдресJSON.Получить("territoryId");
	Если ЗначениеЗаполнено(ЗначениеTerritoryId) Тогда
		АдресСтруктура.Идентификаторы.ТерриторияИдентификатор = Новый УникальныйИдентификатор(ЗначениеTerritoryId);
	КонецЕсли;
	
	ЗначениеStreetId = АдресJSON.Получить("streetId");
	Если ЗначениеЗаполнено(ЗначениеStreetId) Тогда
		АдресСтруктура.Идентификаторы.УлицаИдентификатор = Новый УникальныйИдентификатор(ЗначениеStreetId);
	КонецЕсли;
	
	ЗначениеOktmo = АдресJSON.Получить("oktmo");
	Если ЗначениеЗаполнено(ЗначениеOktmo) Тогда
		АдресСтруктура.ДополнительныеКоды.ОКТМО = ЗначениеOktmo;
	КонецЕсли;
	
	ЗначениеOkato = АдресJSON.Получить("okato");
	Если ЗначениеЗаполнено(ЗначениеOkato) Тогда
		АдресСтруктура.ДополнительныеКоды.ОКАТО = ЗначениеOkato;
	КонецЕсли;
	
	ЗначениеIfnsFlCode = АдресJSON.Получить("ifnsFlCode");
	Если ЗначениеЗаполнено(ЗначениеIfnsFlCode) Тогда
		АдресСтруктура.ДополнительныеКоды.КодИФНСФЛ = ЗначениеIfnsFlCode;
	КонецЕсли;
	
	ЗначениеIfnsUlCode = АдресJSON.Получить("ifnsUlCode");
	Если ЗначениеЗаполнено(ЗначениеIfnsUlCode) Тогда
		АдресСтруктура.ДополнительныеКоды.КодИФНСЮЛ = ЗначениеIfnsUlCode;
	КонецЕсли;
	
	ЗначениеIfnsFlAreaCode = АдресJSON.Получить("ifnsFlAreaCode");
	Если ЗначениеЗаполнено(ЗначениеIfnsFlAreaCode) Тогда
		АдресСтруктура.ДополнительныеКоды.КодУчасткаИФНСФЛ = ЗначениеIfnsFlAreaCode;
	КонецЕсли;
	
	ЗначениеIfnsUlAreaCode = АдресJSON.Получить("ifnsUlAreaCode");
	Если ЗначениеЗаполнено(ЗначениеIfnsUlAreaCode) Тогда
		АдресСтруктура.ДополнительныеКоды.КодУчасткаИФНСЮЛ = ЗначениеIfnsUlAreaCode;
	КонецЕсли;
	
	Результат = НоваяКонтактнаяИнформация();
	Результат.КонтактнаяИнформация = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияВJSON(
		АдресСтруктура,
		Перечисления.ТипыКонтактнойИнформации.Адрес);
		
	Если АдресСтруктура.ТипАдреса = "Административно-территориальный" Тогда
		Результат.Представление = АдресСтруктура.Представление;
	Иначе
		Результат.Представление = АдресСтруктура.МуниципальноеПредставление;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции    


// Возвращает структуру полей адреса для программного формирования адреса.
//
// Возвращаемое значение:
//  Структура:
//    * Представление    - Строка - текстовое представление адреса по административно-территориальному делению.
//                                  Например, "175430, Новгородская обл, Валдайский р-н, Бор д, Полевая ул, дом 4".
//    * МуниципальноеПредставление - Строка - текстовое представление адреса по муниципальному делению.
//                                   Например, "175430, Новгородская обл, Валдайский муниципальный район, сельское
//                                   поселение Никулинское, Бор д, Полевая ул, дом 4".
//    * ТипАдреса        - Строка - основной тип адреса (только для адресов РФ).
//                                  Варианты: "Муниципальный", "Административно-территориальный".
//    * Страна           - Строка - текстовое представление страны. Например, "Россия".
//    * КодСтраны        - Строка - код страны по ОКСМ. Например, "643".
//    * Индекс           - Строка - почтовый индекс. Например, "12700".
//    * КодРегиона       - Строка - код региона РФ. Например, "50".
//    * Регион           - Строка - текстовое представление региона РФ. Например, "Московская"
//    * РегионТипПолный  - Строка - тип региона. Например, "область".
//    * РегионТипКраткий - Строка - сокращение региона. Например, "обл".
//    * РегионСокращение - Строка - устарело. Сокращение региона. Например, "обл".
//    * Округ            - Строка - устарело. Текстовое представление округа (устарело).
//    * ОкругСокращение  - Строка - устарело. Сокращение округа (устарело).
//    * Район            - Строка - текстовое представление района у адресов по административно-территориальному
//                                  делению. Например, "Валдайский".
//    * РайонТипПолный - Строка - тип района у адресов по административно-территориальному делению. Например, "район".
//    * РайонТипКраткий - Строка - сокращение района у адресов по административно-территориальному делению. Например, "р-н".
//    * РайонСокращение - Строка - устарело. Сокращение района у адресов по административно-территориальному делению.
//                                 Например, "р-н".
//    * МуниципальныйРайон - Строка - текстовое представление муниципального района у адресов по муниципальному делению.
//                                    Например, "Валдайский".
//    * МуниципальныйРайонТипПолный - Строка - тип муниципального района у адресов по муниципальному делению.
//                                             Например, "муниципальный район".
//    * МуниципальныйРайонТипКраткий - Строка - сокращение муниципального района у адресов по муниципальному делению.
//                                              Например, "м.р-н".
//    * МуниципальныйРайонСокращение - Строка - устарело. Сокращение муниципального района у адресов по муниципальному делению.
//                                              Например, "м.р-н".
//    * Город            - Строка - текстовое представление города у адресов по административно-территориальному
//                                  делению. Например, "Валдай".
//    * ГородТипПолный - Строка - тип города. Например, "город".
//    * ГородТипКраткий - Строка - сокращение типа города. Например, "г".
//    * ГородСокращение  - Строка - устарело. Сокращение типа города. Например, "г".
//    * Поселение - Строка - текстовое представление поселения у адресов по муниципальному делению. Например,
//                          "сельское поселение Никулинское".
//    * ПоселениеТипПолный - Строка - тип поселения у адресов по муниципальному делению. Например, "сельское поселение";
//    * ПоселениеТипКраткий - Строка - сокращение типа поселения у адресов по муниципальному делению. Например, "с.п.";
//    * ПоселениеСокращение - Строка - устарело. Сокращение поселения у адресов по муниципальному делению. Например, "с.п.";
//    * ВнутригородскойРайон - Строка - устарело. Текстовое представление внутригородского района. Например, "Центральный"
//    * ВнутригородскойРайонТипПолный - Строка - устарело. Тип внутригородского района. Например, "микрорайон";
//    * ВнутригородскойРайонТипКраткий - Строка - устарело. Сокращение типа внутригородского района. Например, "мкр";
//    * ВнутригородскойРайонСокращение - Строка - устарело. Сокращение внутригородского района. Например, "мкр";
//    * НаселенныйПункт - Строка - текстовое представление населенного пункта. Например, "Бор".
//    * НаселенныйПунктТипПолный - Строка - тип населенного пункта. Например, "деревня".
//    * НаселенныйПунктТипКраткий - Строка - сокращение типа населенного пункта. Например, "д".
//    * НаселенныйПунктСокращение - Строка - устарело. Сокращение населенного пункта. Например, "д".
//    * Территория - Строка - текстовое представление территории. Например, "Мотор".
//    * ТерриторияТипПолный - Строка -тип территории. Например, "территория".
//    * ТерриторияТипКраткий - Строка - сокращение территории. Например, "тер".
//    * ТерриторияСокращение - Строка - устарело. Сокращение территории. Например, "тер".
//    * Улица - Строка - текстовое представление улицы. Например "Полевая".
//    * УлицаТипПолный - Строка - тип улицы. Например "улица".
//    * УлицаТипКраткий - Строка - сокращение типа улицы. Например "ул".
//    * УлицаСокращение  - Строка - устарело. Сокращение улицы. Например "ул".
//    * ДополнительнаяТерритория - Строка - текстовое представление дополнительной территории (устарело).
//    * ДополнительнаяТерриторияСокращение - Строка - сокращение дополнительной территории (устарело).
//    * ЭлементДополнительнойТерритории - Строка - текстовое представление элемента дополнительной территории (устарело).
//    * ЭлементДополнительнойТерриторииСокращение - Строка - сокращение элемента дополнительной территории (устарело).
//    * Здание - Структура - структура с информацией о здании адреса:
//       ** ТипЗдания - Строка  - тип объекта адресации адреса РФ согласно приказу Минфина России от 5.11.2015 г. N171н.
//       ** Номер - Строка  - текстовое представление номера дома (только для адресов РФ).
//    * Корпуса - Массив из Структура - содержит список корпусов и строений адреса:
//       * ТипКорпуса - Строка - наименование строения корпуса. Например, "Строение".
//       * Номер - Строка - номер строения или корпуса. Например, "1".
//    * Помещения - Массив из Структура:
//       * ТипПомещения - Строка - наименование помещения. Например, "Офис"
//       * Номер - Строка - номер помещения. Например, "1".
//    * НомерЗемельногоУчастка - Неопределено
//                             - Строка - текстовое представление номера участка. Например, "10".
//    * ИдентификаторАдресногоОбъекта - УникальныйИдентификатор - идентификационный код последнего адресного объекта
//                                      в иерархи адреса. Например, для адреса: Москва г., Дмитровское ш., д.9 это
//                                      будет идентификатор улицы. Например, "8fe5e839-24c8-4500-bea8-a81a55a0fd1e".
//    * ИдентификаторДома - УникальныйИдентификатор - идентификационный код дома(строения) адресного объекта. 
//                          Например, "bc26bdef-12be-40f8-959c-2149de1911b9".
//    * ИдентификаторЗемельногоУчастка - Неопределено
//                                     - УникальныйИдентификатор - идентификационный код земельного участка.
//    * Идентификаторы - Структура - идентификаторы адресных объектов адреса:
//       ** РегионИдентификатор - УникальныйИдентификатор
//                              - Неопределено - идентификатор региона.
//       ** РайонИдентификатор - УникальныйИдентификатор
//                             - Неопределено - идентификатор района.
//       ** МуниципальныйРайонИдентификатор - УникальныйИдентификатор
//                                          - Неопределено - идентификатор муниципального района.
//       ** ГородИдентификатор - УникальныйИдентификатор
//                             - Неопределено - идентификатор города.
//       ** ПоселениеИдентификатор - УникальныйИдентификатор
//                                 - Неопределено - идентификатор поселения.
//       ** ВнутригородскойРайонИдентификатор - УникальныйИдентификатор
//                                            - Неопределено - идентификатор
//                                                             внутригородского района.
//       ** НаселенныйПунктИдентификатор - УникальныйИдентификатор
//                                       - Неопределено - идентификатор населенного пункта.
//       ** ТерриторияИдентификатор - УникальныйИдентификатор
//                                  - Неопределено - идентификатор территории.
//       ** УлицаИдентификатор      - УникальныйИдентификатор
//                                  - Неопределено - идентификатор улица.
//    * КодыКЛАДР           - Структура - коды КЛАДР, если установлен параметр КодыКЛАДР. Например, "53004000040000200":
//       ** Регион          - Строка    - код КЛАДР региона.
//       ** Район           - Строка    - код КЛАДР район.
//       ** Город           - Строка    - код КЛАДР города.
//       ** НаселенныйПункт - Строка    - код КЛАДР населенного пункта.
//       ** Улица           - Строка    - код КЛАДР улицы.
//    * ДополнительныеКоды  - Структура:
//        ** ОКТМО - Строка - код общероссийского классификатора территорий муниципальных образований. Например, "45346000".
//        ** ОКАТО - Строка - код общероссийского классификатора административно-территориальных образований. Например, "45277592000".
//        ** КодИФНСФЛ - Строка - код налоговых инспекции физических лиц. Например, "7713"
//        ** КодИФНСЮЛ - Строка - код налоговых инспекции юридических лиц. Например, "7713"
//        ** КодУчасткаИФНСФЛ - Строка - код участка налоговой инспекции физических лиц. Например, "7713"
//        ** КодУчасткаИФНСЮЛ - Строка - код участка налоговой инспекции юридических лиц. Например, "7713"
//    * Комментарий - Строка - комментарий к адресу.
//
Функция ПоляАдреса() Экспорт
	
	Результат = Новый Структура;
	
	Результат.Вставить("ТипАдреса"                 , "");
	Результат.Вставить("Комментарий"               , "");
	
	Результат.Вставить("Представление"             , "");
	Результат.Вставить("МуниципальноеПредставление", "");
	
	Результат.Вставить("Страна"   , "");
	Результат.Вставить("КодСтраны", "");
	Результат.Вставить("Индекс"   , "");
	
	Результат.Вставить("КодРегиона"                               , "");
	Результат.Вставить("Регион"                                   , "");
	Результат.Вставить("РегионТипПолный"                          , "");
	Результат.Вставить("РегионТипКраткий"                         , "");
	
	Результат.Вставить("Район"                                    , "");
	Результат.Вставить("РайонТипПолный"                           , "");
	Результат.Вставить("РайонТипКраткий"                          , "");
	
	Результат.Вставить("МуниципальныйРайон"                       , "");
	Результат.Вставить("МуниципальныйРайонТипПолный"              , "");
	Результат.Вставить("МуниципальныйРайонТипКраткий"             , "");
	
	Результат.Вставить("Город"                                    , "");
	Результат.Вставить("ГородТипПолный"                           , "");
	Результат.Вставить("ГородТипКраткий"                          , "");
	
	Результат.Вставить("Поселение"                                , "");
	Результат.Вставить("ПоселениеТипПолный"                       , "");
	Результат.Вставить("ПоселениеТипКраткий"                      , "");
	
	Результат.Вставить("ВнутригородскойРайон"                     , "");
	Результат.Вставить("ВнутригородскойРайонТипПолный"            , "");
	Результат.Вставить("ВнутригородскойРайонТипКраткий"           , "");
	
	Результат.Вставить("НаселенныйПункт"                          , "");
	Результат.Вставить("НаселенныйПунктТипПолный"                 , "");
	Результат.Вставить("НаселенныйПунктТипКраткий"                , "");
	
	Результат.Вставить("Территория"                               , "");
	Результат.Вставить("ТерриторияТипПолный"                      , "");
	Результат.Вставить("ТерриторияТипКраткий"                     , "");
	
	Результат.Вставить("Улица"                                    , "");
	Результат.Вставить("УлицаТипПолный"                           , "");
	Результат.Вставить("УлицаТипКраткий"                          , "");
	
	// устаревшие свойства
	Результат.Вставить("РегионСокращение"                         , "");
	Результат.Вставить("Округ"                                    , "");
	Результат.Вставить("ОкругСокращение"                          , "");
	Результат.Вставить("РайонСокращение"                          , "");
	Результат.Вставить("МуниципальныйРайонСокращение"             , "");
	Результат.Вставить("ГородСокращение"                          , "");
	Результат.Вставить("ПоселениеСокращение"                      , "");
	Результат.Вставить("ВнутригородскойРайонСокращение"           , "");
	Результат.Вставить("НаселенныйПунктСокращение"                , "");
	Результат.Вставить("ТерриторияСокращение"                     , "");
	Результат.Вставить("УлицаСокращение"                          , "");
	Результат.Вставить("ДополнительнаяТерритория"                 , "");
	Результат.Вставить("ДополнительнаяТерриторияСокращение"       , "");
	Результат.Вставить("ЭлементДополнительнойТерритории"          , "");
	Результат.Вставить("ЭлементДополнительнойТерриторииСокращение", "");
	
	Здание = Новый Структура;
	Здание.Вставить("ТипЗдания", "");
	Здание.Вставить("Номер"    , "");
	Результат.Вставить("Здание", Здание);
	
	Результат.Вставить("Корпуса"  , Новый Массив);
	Результат.Вставить("Помещения", Новый Массив);
	
	Результат.Вставить("ИдентификаторАдресногоОбъекта"  , Неопределено);
	Результат.Вставить("ИдентификаторДома"              , Неопределено);
	Результат.Вставить("НомерЗемельногоУчастка"         , Неопределено);
	Результат.Вставить("ИдентификаторЗемельногоУчастка" , Неопределено);
	
	Идентификаторы = Новый Структура;
	Идентификаторы.Вставить("РегионИдентификатор"              , Неопределено);
	Идентификаторы.Вставить("РайонИдентификатор"               , Неопределено);
	Идентификаторы.Вставить("МуниципальныйРайонИдентификатор"  , Неопределено);
	Идентификаторы.Вставить("ГородИдентификатор"               , Неопределено);
	Идентификаторы.Вставить("ПоселениеИдентификатор"           , Неопределено);
	Идентификаторы.Вставить("ВнутригородскойРайонИдентификатор", Неопределено);
	Идентификаторы.Вставить("НаселенныйПунктИдентификатор"     , Неопределено);
	Идентификаторы.Вставить("ТерриторияИдентификатор"          , Неопределено);
	Идентификаторы.Вставить("УлицаИдентификатор"               , Неопределено);
	Результат.Вставить("Идентификаторы", Идентификаторы);
	
	ДополнительныеКоды = Новый Структура;
	ДополнительныеКоды.Вставить("ОКТМО"           , "");
	ДополнительныеКоды.Вставить("ОКАТО"           , "");
	ДополнительныеКоды.Вставить("КодИФНСФЛ"       , "");
	ДополнительныеКоды.Вставить("КодИФНСЮЛ"       , "");
	ДополнительныеКоды.Вставить("КодУчасткаИФНСФЛ", "");
	ДополнительныеКоды.Вставить("КодУчасткаИФНСЮЛ", "");
	Результат.Вставить("ДополнительныеКоды", ДополнительныеКоды);
	
	КодыКЛАДР = Новый Структура;
	КодыКЛАДР.Вставить("Регион"         , "");
	КодыКЛАДР.Вставить("Район"          , "");
	КодыКЛАДР.Вставить("Город"          , "");
	КодыКЛАДР.Вставить("НаселенныйПункт", "");
	КодыКЛАДР.Вставить("Улица"          , "");
	Результат.Вставить("КодыКЛАДР", КодыКЛАДР);
	
	Возврат Результат;
	
КонецФункции

Функция НоваяКонтактнаяИнформация()

	Результат = Новый Структура;
	Результат.Вставить("КонтактнаяИнформация");
	Результат.Вставить("Представление");
	Результат.Вставить("Комментарий");
	Возврат Результат;

КонецФункции 

Процедура ЗаполнитьРегистрациюВНалоговомОргане(ТелоОтветаОбъект, Реквизиты)
	
	ЗначениеTaxInspectionRegistrationInfo = ТелоОтветаОбъект.Получить("taxInspectionRegistrationInfo");
	
	Если ЗначениеTaxInspectionRegistrationInfo <> Неопределено Тогда
		
		Реквизиты.РегистрацияВНалоговомОргане = НоваяРегистрацияВНалоговомОргане();
		Реквизиты.РегистрацияВНалоговомОргане.Код             = ЗначениеTaxInspectionRegistrationInfo.Получить("inspectionCode");
		Реквизиты.РегистрацияВНалоговомОргане.Наименование    = ЗначениеTaxInspectionRegistrationInfo.Получить("inspectionName");
		Реквизиты.РегистрацияВНалоговомОргане.ДатаРегистрации = ДатаИзJSON(ЗначениеTaxInspectionRegistrationInfo.Получить("registrationDate"));
		
		ЗначениеAddress = ТелоОтветаОбъект.Получить("address");
		Если ЗначениеAddress <> Неопределено Тогда
			
			ЗначениеOktmo = ЗначениеAddress.Получить("oktmo");
			Если ЗначениеOktmo <> Неопределено Тогда
				Реквизиты.РегистрацияВНалоговомОргане.ОКТМО = ЗначениеOktmo;
			КонецЕсли;
			
			ЗначениеOkato = ЗначениеAddress.Получить("okato");
			Если ЗначениеOkato <> Неопределено Тогда
				Реквизиты.РегистрацияВНалоговомОргане.ОКАТО = ЗначениеOkato;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры


Процедура ЗаполнитьРеквизитыПенсионногоФонда(ТелоОтветаОбъект, Реквизиты)
	
	ЗначениеPensionFundRegistrationInfo = ТелоОтветаОбъект.Получить("pensionFundRegistrationInfo");
	Если ЗначениеPensionFundRegistrationInfo <> Неопределено Тогда
		
		РегистрацияВПФР = НоваяРегистрацияВПенсионномФонде();
		РегистрацияВПФР.РегистрационныйНомерПФР = ЗначениеPensionFundRegistrationInfo.Получить("registrationNumber");
		РегистрацияВПФР.КодОрганаПФР            = ЗначениеPensionFundRegistrationInfo.Получить("fundCode");
		РегистрацияВПФР.НаименованиеОрганаПФР   = ЗначениеPensionFundRegistrationInfo.Получить("fundName");
		РегистрацияВПФР.ДатаРегистрации         = ДатаИзJSON(ЗначениеPensionFundRegistrationInfo.Получить("registrationDate"));
		
		Если РегистрацияВПФР.РегистрационныйНомерПФР <> Неопределено Тогда
			РегистрацияВПФР.РегистрационныйНомерПФР = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1-%2-%3'"), 
				Лев(РегистрацияВПФР.РегистрационныйНомерПФР, 3),
				Сред(РегистрацияВПФР.РегистрационныйНомерПФР,4, 3),
				Прав(РегистрацияВПФР.РегистрационныйНомерПФР, 6));
		КонецЕсли;
		Если РегистрацияВПФР.КодОрганаПФР <> Неопределено Тогда
			РегистрацияВПФР.КодОрганаПФР = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1-%2'"), 
				Лев(РегистрацияВПФР.КодОрганаПФР, 3), Прав(РегистрацияВПФР.КодОрганаПФР, 3));
		КонецЕсли;
		
		Реквизиты.РегистрацияВПенсионномФонде = РегистрацияВПФР;
		
	КонецЕсли;
	
КонецПроцедуры     

Процедура ЗаполнитьРеквизитыФондаСоциальногоСтрахования(ТелоОтветаОбъект, Реквизиты)
	
	ЗначениеSocialInsuranceFundRegistrationInfo = ТелоОтветаОбъект.Получить("socialInsuranceFundRegistrationInfo");
	Если ЗначениеSocialInsuranceFundRegistrationInfo <> Неопределено Тогда
		
		РегистрацияВФСС = НоваяРегистрацияВФСС();
		РегистрацияВФСС.РегистрационныйНомерФСС = ЗначениеSocialInsuranceFundRegistrationInfo.Получить("registrationNumber");
		РегистрацияВФСС.КодПодчиненности = ЗначениеSocialInsuranceFundRegistrationInfo.Получить("subordinationCode");
		РегистрацияВФСС.КодОрганаФСС = ЗначениеSocialInsuranceFundRegistrationInfo.Получить("fundCode");
		РегистрацияВФСС.НаименованиеОрганаФСС = ЗначениеSocialInsuranceFundRegistrationInfo.Получить("fundName");
		РегистрацияВФСС.ДатаРегистрации = ДатаИзJSON(ЗначениеSocialInsuranceFundRegistrationInfo.Получить("registrationDate"));
		Реквизиты.РегистрацияВФСС = РегистрацияВФСС;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДанныеОРуководителях(ТелоОтветаОбъект, Реквизиты)
	
	ЗначениеheadPersonMeta = ТелоОтветаОбъект.Получить("headPersonMeta");
	Если ТипЗнч(ЗначениеheadPersonMeta) = Тип("Соответствие")
		И ЗначениеheadPersonMeta.Получить("text") <> Неопределено Тогда
		Реквизиты.ДанныеРуководителей.СкрытыеДанные = Истина;
		Реквизиты.ДанныеРуководителей.ПредставлениеСкрытыхДанных = ЗначениеheadPersonMeta.Получить("text");
		Возврат;
	КонецЕсли;
	
	ЗначениеHeadPersonInfo = ТелоОтветаОбъект.Получить("headPersonInfo");
	Если ТипЗнч(ЗначениеHeadPersonInfo) <> Тип("Соответствие") Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьТаблицуРуководителей(Реквизиты.ДанныеРуководителей.Руководители, ЗначениеHeadPersonInfo);
	
КонецПроцедуры  

Процедура ЗаполнитьИнформациюОСтатусеСтруктура(ТелоОтветаОбъект, Данные)
	
	Если ТипЗнч(ТелоОтветаОбъект) <> Тип("Соответствие") Тогда
		Возврат;
	КонецЕсли;
	
	ЗначениеStatus = ТелоОтветаОбъект.Получить("status");
	Если ЗначениеStatus <> Неопределено Тогда
		СтатусСтруктура = НовыйДанныеСтатуса();
		СтатусСтруктура.Код = ЗначениеStatus.Получить("code");
		СтатусСтруктура.Наименование = ЗначениеStatus.Получить("name");
		Данные.Статус = СтатусСтруктура;
	КонецЕсли;
	
КонецПроцедуры         

Процедура ЗаполнитьИнформациюОРегистрирующемОргане(ТелоОтветаОбъект, Данные)
	
	ЗначениеRegisteredStateAgencyCode = ТелоОтветаОбъект.Получить("registeredStateAgencyCode");
	ЗначениеRegisteredStateAgencyName = ТелоОтветаОбъект.Получить("registeredStateAgencyName");
	Если ЗначениеRegisteredStateAgencyCode <> Неопределено
		Или ЗначениеRegisteredStateAgencyName <> Неопределено Тогда
		Данные.РегистрирующийОрган = НовыйДанныеРегистрирующегоОргана();
		Данные.РегистрирующийОрган.Код = ЗначениеRegisteredStateAgencyCode;
		Данные.РегистрирующийОрган.Наименование = ЗначениеRegisteredStateAgencyName;
	КонецЕсли;
	
КонецПроцедуры     

Процедура ЗаполнитьОткрытыеГосударственныеДанныеФНС(ЗначениеOpenDataInfo, Реквизиты)
	
	Если ТипЗнч(ЗначениеOpenDataInfo) <> Тип("Массив") Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ТекущееOpenDataInfo Из ЗначениеOpenDataInfo Цикл
		
		СтрокаОткрытыеГосударственныеДанныеФНС = Реквизиты.ОткрытыеГосударственныеДанныеФНС.Добавить();
		ЗначениеYear = ТекущееOpenDataInfo.Получить("year");
		Если ЗначениеYear <> Неопределено Тогда
			СтрокаОткрытыеГосударственныеДанныеФНС.Год = ЗначениеYear;
		КонецЕсли;
		
		ЗначениеWorkerCount = ТекущееOpenDataInfo.Получить("workerCount");
		Если ЗначениеWorkerCount <> Неопределено Тогда
			СтрокаОткрытыеГосударственныеДанныеФНС.КоличествоСотрудников = ЗначениеWorkerCount;
		КонецЕсли;
		
		ЗначениеIncomeSum = ТекущееOpenDataInfo.Получить("incomeSum");
		Если ЗначениеIncomeSum <> Неопределено Тогда
			СтрокаОткрытыеГосударственныеДанныеФНС.СуммаДоходов = Число(ЗначениеIncomeSum);
		КонецЕсли;
		
		ЗначениеOutcomeSum = ТекущееOpenDataInfo.Получить("outcomeSum");
		Если ЗначениеOutcomeSum <> Неопределено Тогда
			СтрокаОткрытыеГосударственныеДанныеФНС.СуммаРасходов = Число(ЗначениеOutcomeSum);
		КонецЕсли;
		
		ЗначениеParticipationInKGN = ТекущееOpenDataInfo.Получить("participationInKGN");
		Если ЗначениеParticipationInKGN <> Неопределено Тогда
			СтрокаОткрытыеГосударственныеДанныеФНС.УчастиеВКГН = ЗначениеParticipationInKGN;
		КонецЕсли;
		
		СтрокаОткрытыеГосударственныеДанныеФНС.НалогообложениеЕСХН = (ТекущееOpenDataInfo.Получить("usesTaxModeESHN") = Истина);
		СтрокаОткрытыеГосударственныеДанныеФНС.НалогообложениеУСН = (ТекущееOpenDataInfo.Получить("usesTaxModeUSN") = Истина);
		СтрокаОткрытыеГосударственныеДанныеФНС.НалогообложениеЕНВД = (ТекущееOpenDataInfo.Получить("usesTaxModeENVD") = Истина);
		СтрокаОткрытыеГосударственныеДанныеФНС.НалогообложениеСРП = (ТекущееOpenDataInfo.Получить("usesTaxModeSRP") = Истина);
		
		СтрокаОткрытыеГосударственныеДанныеФНС.СведенияОНалогах = НоваяТаблицаСведенияОНалогах();
		
		ЗначениеTaxes = ТекущееOpenDataInfo.Получить("taxes");
		Если ТипЗнч(ЗначениеTaxes) = Тип("Массив") Тогда
			Для Каждого ТекущееPaidTaxes Из ЗначениеTaxes Цикл
				СтрокаСведенияОНалогах = СтрокаОткрытыеГосударственныеДанныеФНС.СведенияОНалогах.Добавить();
				ЗначениеName = ТекущееPaidTaxes.Получить("name");
				Если ЗначениеName <> Неопределено Тогда
					СтрокаСведенияОНалогах.Наименование = ЗначениеName;
				КонецЕсли;
				СтрокаСведенияОНалогах.Сортировка = ТекущееPaidTaxes.Получить("sorting");
				ЗначениеPaid = ТекущееPaidTaxes.Получить("paid");
				Если ЗначениеPaid <> Неопределено Тогда
					СтрокаСведенияОНалогах.Уплачено = 
						?(СтрокаСведенияОНалогах.Уплачено = Неопределено, 0, СтрокаСведенияОНалогах.Уплачено)
						+ Число(ЗначениеPaid);
				КонецЕсли;
				ЗначениеDebt = ТекущееPaidTaxes.Получить("debt");
				Если ЗначениеDebt <> Неопределено Тогда
					СтрокаСведенияОНалогах.Задолженность =
						?(СтрокаСведенияОНалогах.Задолженность = Неопределено, 0, СтрокаСведенияОНалогах.Задолженность)
						+ Число(ЗначениеDebt);
				КонецЕсли;
				ЗначениеFine = ТекущееPaidTaxes.Получить("fine");
				Если ЗначениеFine <> Неопределено Тогда
					СтрокаСведенияОНалогах.Пени =
						?(СтрокаСведенияОНалогах.Пени = Неопределено, 0, СтрокаСведенияОНалогах.Пени)
						+ Число(ЗначениеFine);
				КонецЕсли;
				ЗначениеPenalty = ТекущееPaidTaxes.Получить("penalty");
				Если ЗначениеPenalty <> Неопределено Тогда
					СтрокаСведенияОНалогах.Штраф =
						?(СтрокаСведенияОНалогах.Штраф = Неопределено, 0, СтрокаСведенияОНалогах.Штраф)
						+ Число(ЗначениеPenalty);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры    

Процедура ЗаполнитьИсториюРеквизитовЮридическогоЛица(ТелоОтветаОбъект, Реквизиты)
	
	ЗначениеHistory = ТелоОтветаОбъект.Получить("history");
	Если ЗначениеHistory = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИсторияРеквизитов = Реквизиты.ИсторияРеквизитов;
	ЗаполнитьИсторияКПП(ЗначениеHistory.Получить("kpps"), ИсторияРеквизитов.КПП);
	ЗаполнитьИсторияНаименование(ЗначениеHistory.Получить("names"), ИсторияРеквизитов.Наименование);
	ЗаполнитьИсторияАдрес(ЗначениеHistory.Получить("addresses"), ИсторияРеквизитов.Адрес);
	ЗаполнитьИсторияСтатус(ЗначениеHistory.Получить("statuses"), ИсторияРеквизитов.Статус);
	ЗаполнитьИсторияРеквизитыДиректора(ЗначениеHistory.Получить("headPersons"), ИсторияРеквизитов.РеквизитыДиректора);
	
КонецПроцедуры


Процедура ЗаполнитьИсторияКПП(ИсторияKpp, Таблица)
	
	Если ТипЗнч(ИсторияKpp) <> Тип("Массив") Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ТекущееИсторияKpp Из ИсторияKpp Цикл
		
		НоваяСтрока = Таблица.Добавить();
		НоваяСтрока.Дата     = ДатаИзJSON(ТекущееИсторияKpp.Получить("fromDate"));
		НоваяСтрока.Значение = ТекущееИсторияKpp.Получить("value");
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьИсторияНаименование(ЗначениеNames, Таблица)
	
	Если ТипЗнч(ЗначениеNames) <> Тип("Массив") Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ЭлементСписка Из ЗначениеNames Цикл
		
		НоваяСтрока = Таблица.Добавить();
		НоваяСтрока.Дата = ДатаИзJSON(ЭлементСписка.Получить("fromDate"));
		
		НаименованиеСтруктура = Новый Структура;
		НаименованиеСтруктура.Вставить("НаименованиеПолное");
		НаименованиеСтруктура.Вставить("НаименованиеСокращенное");
		НаименованиеСтруктура.Вставить("Наименование");
		НаименованиеСтруктура.Вставить("НаименованиеПолноеЕГРЮЛ");
		НаименованиеСтруктура.Вставить("НаименованиеСокращенноеЕГРЮЛ");
		НаименованиеСтруктура.Вставить("НаименованиеПолноеНаАнглийском");
		НаименованиеСтруктура.Вставить("НаименованиеСокращенноеНаАнглийском");
		НаименованиеСтруктура.Вставить("ПравоваяФорма");
		ЗаполнитьНаименованияЮридическогоЛица(ЭлементСписка, НаименованиеСтруктура);
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока, НаименованиеСтруктура);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьИсторияАдрес(ЗначениеAddresses, Таблица)
	
	Если ТипЗнч(ЗначениеAddresses) <> Тип("Массив") Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ЭлементСписка Из ЗначениеAddresses Цикл
		
		НоваяСтрока = Таблица.Добавить();
		НоваяСтрока.Дата = ДатаИзJSON(ЭлементСписка.Получить("fromDate"));
		АдресСтруктура = АдресКИИзJSON(ЭлементСписка);
		ЗаполнитьЗначенияСвойств(НоваяСтрока, АдресСтруктура);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьИсторияСтатус(ЗначениеStatuses, Таблица)
	
	Если ТипЗнч(ЗначениеStatuses) <> Тип("Массив") Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ЭлементСписка Из ЗначениеStatuses Цикл
		
		НоваяСтрока = Таблица.Добавить();
		НоваяСтрока.Дата = ДатаИзJSON(ЭлементСписка.Получить("fromDate"));
		ЗначениеCode = ЭлементСписка.Получить("code");
		Если ЗначениеCode <> Неопределено Тогда
			НоваяСтрока.Код = ЗначениеCode;
		КонецЕсли;
		
		ЗначениеName = ЭлементСписка.Получить("name");
		Если ЗначениеName <> Неопределено Тогда
			НоваяСтрока.Наименование = ЗначениеName;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьИсторияРеквизитыДиректора(ЗначениеHeadPersons, Таблица)
	
	Если ТипЗнч(ЗначениеHeadPersons) <> Тип("Массив") Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ЭлементСписка Из ЗначениеHeadPersons Цикл
		
		НоваяСтрока = Таблица.Добавить();
		НоваяСтрока.Дата = ДатаИзJSON(ЭлементСписка.Получить("fromDate"));
		НоваяСтрока.ДатаОкончания = ДатаИзJSON(ЭлементСписка.Получить("toDate"));
		НоваяСтрока.ИНН = ЭлементСписка.Получить("inn");
		
		ЗначениеLastName = ЭлементСписка.Получить("lastName");
		Если ЗначениеLastName <> Неопределено Тогда
			НоваяСтрока.Фамилия = ЗначениеLastName;
		КонецЕсли;
		ЗначениеName = ЭлементСписка.Получить("name");
		Если ЗначениеName <> Неопределено Тогда
			НоваяСтрока.Имя = ЗначениеName;
		КонецЕсли;
		ЗначениеPatronymic = ЭлементСписка.Получить("patronymic");
		Если ЗначениеPatronymic <> Неопределено Тогда
			НоваяСтрока.Отчество = ЗначениеPatronymic;
		КонецЕсли;
		ЗначениеPositionType = ЭлементСписка.Получить("positionType");
		Если ЗначениеPositionType <> Неопределено Тогда
			НоваяСтрока.ВидДолжности = ЗначениеPositionType;
		КонецЕсли;
		ЗначениеPosition = ЭлементСписка.Получить("position");
		Если ЗначениеPosition <> Неопределено Тогда
			НоваяСтрока.НаименованиеДолжности = ЗначениеPosition;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры










Процедура ЗаполнитьСведенияОРуководителях(ТелоОтветаОбъект, Реквизиты)
	
	ЗначениеHeadPersonInfo = ТелоОтветаОбъект.Получить("headPersonInfo");
	Если ТипЗнч(ЗначениеHeadPersonInfo) <> Тип("Соответствие") Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьТаблицуРуководителей(Реквизиты.Руководители, ЗначениеHeadPersonInfo);
	
КонецПроцедуры

Процедура ЗаполнитьТаблицуРуководителей(ТаблицаРуководителей, ДанныеСервиса)
	
	ЗначениеDirector = ДанныеСервиса.Получить("director");
	Если ТипЗнч(ЗначениеDirector) = Тип("Соответствие") Тогда
		ЗаполнитьСтрокаРуководителя(ТаблицаРуководителей.Добавить(), ЗначениеDirector);
	КонецЕсли;
	
	ЗначениеOtherProxies = ДанныеСервиса.Получить("otherProxies");
	Если ТипЗнч(ЗначениеOtherProxies) = Тип("Массив") Тогда
		Для Каждого ТекущееOtherProxies Из ЗначениеOtherProxies Цикл
			Если ТипЗнч(ТекущееOtherProxies) = Тип("Соответствие") Тогда
				ЗаполнитьСтрокаРуководителя(ТаблицаРуководителей.Добавить(), ТекущееOtherProxies);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура УдалитьНеИспользуемыеКолонкиРуководителей(Руководители)

	// Удаление лишних полей в таблице Руководители.
	// Сервис для операции поиска по ИНН всегда возвращает
	// null для полей:
	//  - foundedCorporationsByPersonFullName;
	//  - headedCorporationsByInn;
	//  - headedCorporationsByPersonFullName;
	Если Руководители <> Неопределено Тогда
		КолонкиДляУдаления = Новый Массив;
		КолонкиДляУдаления.Добавить("ОрганизацииГдеРуководитель");
		КолонкиДляУдаления.Добавить("ОрганизацииГдеРуководительПоФИО");
		КолонкиДляУдаления.Добавить("ОрганизацииГдеУчредитель");
		КолонкиДляУдаления.Добавить("ОрганизацииГдеУчредительПоФИО");
		
		Для Каждого Колонка Из КолонкиДляУдаления Цикл
			Если Руководители.Колонки.Найти(Колонка) <> Неопределено Тогда
				Руководители.Колонки.Удалить(Колонка);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;


КонецПроцедуры

Функция НоваяРегистрацияВНалоговомОргане()
	
	Результат = Новый Структура;
	Результат.Вставить("Код");
	Результат.Вставить("Наименование");
	Результат.Вставить("ОКТМО");
	Результат.Вставить("ОКАТО");
	Результат.Вставить("ДатаРегистрации");
	Возврат Результат;
	
КонецФункции


Функция НоваяРегистрацияВПенсионномФонде()
	
	Результат = Новый Структура;
	Результат.Вставить("РегистрационныйНомерПФР");
	Результат.Вставить("КодОрганаПФР");
	Результат.Вставить("НаименованиеОрганаПФР");
	Результат.Вставить("ДатаРегистрации");
	Возврат Результат;
	
КонецФункции    

Функция НовыйДанныеСтатуса()
	
	Результат = Новый Структура;
	Результат.Вставить("Код"                , "");
	Результат.Вставить("Наименование"       , "");
	
	Возврат Результат;
	
КонецФункции



Функция НоваяРегистрацияВФСС()
	
	Результат = Новый Структура;
	Результат.Вставить("РегистрационныйНомерФСС");
	Результат.Вставить("КодПодчиненности");
	Результат.Вставить("КодОрганаФСС");
	Результат.Вставить("НаименованиеОрганаФСС");
	Результат.Вставить("ДатаРегистрации");
	Возврат Результат;
	
КонецФункции     

Функция НовыйДанныеРегистрирующегоОргана()
	
	Результат = Новый Структура;
	Результат.Вставить("Код"         , "");
	Результат.Вставить("Наименование", "");
	
	Возврат Результат;
	
КонецФункции    

Функция НоваяТаблицаСведенияОНалогах()
	
	ТипСтрока = Новый ОписаниеТипов("Строка");
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("Наименование", ТипСтрока);
	Результат.Колонки.Добавить("Уплачено");
	Результат.Колонки.Добавить("Задолженность");
	Результат.Колонки.Добавить("Штраф");
	Результат.Колонки.Добавить("Пени");
	Результат.Колонки.Добавить("Сортировка");
	
	Возврат Результат;
	
КонецФункции 

Функция НоваяТаблицаОрганизации()

	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("НаименованиеОрганизации", Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("ИНН",                     Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("КодСтатуса",              Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("НаименованиеСтатуса",     Новый ОписаниеТипов("Строка"));
	Возврат Результат;

КонецФункции
Функция НоваяТаблицаОрганизацииГдеУчредитель()

	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("ИНН", Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("НаименованиеОрганизации", Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("КодСтатуса",              Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("НаименованиеСтатуса",     Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("ПроцентКапитала", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 6)));
	Результат.Колонки.Добавить("СуммаКапитала",   Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	Возврат Результат;

КонецФункции      




Процедура ЗаполнитьСтрокаРуководителя(СтрокаРуководителя, ДанныеОбъект)
	
	ЗначениеLastName = ДанныеОбъект.Получить("lastName");
	Если ЗначениеLastName <> Неопределено Тогда
		СтрокаРуководителя.Фамилия = ЗначениеLastName;
	КонецЕсли;
	ЗначениеName = ДанныеОбъект.Получить("name");
	Если ЗначениеName <> Неопределено Тогда
		СтрокаРуководителя.Имя = ЗначениеName;
	КонецЕсли;
	ЗначениеPatronymic = ДанныеОбъект.Получить("patronymic");
	Если ЗначениеPatronymic <> Неопределено Тогда
		СтрокаРуководителя.Отчество = ЗначениеPatronymic;
	КонецЕсли;
	ЗначениеPosition = ДанныеОбъект.Получить("position");
	Если ЗначениеPosition <> Неопределено Тогда
		СтрокаРуководителя.Должность = ЗначениеPosition;
	КонецЕсли;
	ЗначениеInn = ДанныеОбъект.Получить("inn");
	Если ЗначениеInn <> Неопределено Тогда
		СтрокаРуководителя.ИНН = ЗначениеInn;
	КонецЕсли;
	ЗначениеFromDate = ДанныеОбъект.Получить("fromDate");
	Если ЗначениеFromDate <> Неопределено Тогда
		СтрокаРуководителя.ДатаЗаписи = ДатаИзJSON(ЗначениеFromDate);
	КонецЕсли;
	
	СтрокаРуководителя.Представление = СокрЛП(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='%1 %2 %3'"),
		СтрокаРуководителя.Фамилия,
		СтрокаРуководителя.Имя,
		СтрокаРуководителя.Отчество));
	
	СтрокаРуководителя.ОрганизацииГдеРуководитель = НоваяТаблицаОрганизации();
	СтрокаРуководителя.ОрганизацииГдеУчредитель = НоваяТаблицаОрганизацииГдеУчредитель();
	
	ЗаполнитьСвязанныеОрганизацииФизическогоЛица(
		ДанныеОбъект,
		СтрокаРуководителя,
		СтрокаРуководителя.ИНН);
	
	КонецПроцедуры    
	
	Процедура ЗаполнитьСвязанныеОрганизацииФизическогоЛица(ТелоОтветаОбъект, Результат, ИННФизЛица)
	
	// Организации, где это физическое лицо является руководителем.
	Если ЗначениеЗаполнено(ИННФизЛица) Тогда
		ЗначениеHeadedCorporations = ТелоОтветаОбъект.Получить("headedCorporationsByInn");
		ЗначениеFoundedCorporations = ТелоОтветаОбъект.Получить("foundedCorporationsByInn");
	Иначе
		ЗначениеHeadedCorporations = ТелоОтветаОбъект.Получить("headedCorporationsByPersonFullName");
		ЗначениеFoundedCorporations = ТелоОтветаОбъект.Получить("foundedCorporationsByPersonFullName");
		Результат.ОрганизацииГдеРуководительПоФИО = Истина;
		Результат.ОрганизацииГдеУчредительПоФИО = Истина;
	КонецЕсли;
	
	// Организации, где это физическое лицо является руководителем.
	Если ТипЗнч(ЗначениеHeadedCorporations) = Тип("Соответствие") Тогда
		ЗначениеCorporations = ЗначениеHeadedCorporations.Получить("corporations");
		Если ТипЗнч(ЗначениеCorporations) = Тип("Массив") Тогда
			Для Каждого ТекущееCorporations Из ЗначениеCorporations Цикл
				ЗаполнитьСтрокуОбОрганизации(ТекущееCorporations, Результат.ОрганизацииГдеРуководитель);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	// Организации, где это физическое лицо является учредителем.
	Если ТипЗнч(ЗначениеFoundedCorporations) = Тип("Соответствие") Тогда
		ЗначениеCorporations = ЗначениеFoundedCorporations.Получить("corporations");
		Если ТипЗнч(ЗначениеCorporations) = Тип("Массив") Тогда
			Для Каждого ТекущееCorporations Из ЗначениеCorporations Цикл
				ЗаполнитьСтрокуОбУчредителе(ТекущееCorporations, Результат.ОрганизацииГдеУчредитель);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры   

Функция ЗаполнитьСтрокуОбОрганизации(ОрганизацияОбъект, ТаблицаДанных)
	
	РеквизитыЮЛ = НовыеРеквизитыЮридическогоЛица();
	ЗаполнитьНаименованияЮридическогоЛица(ОрганизацияОбъект.Получить("name"), РеквизитыЮЛ);
	НоваяСтрока = ТаблицаДанных.Добавить();
	НоваяСтрока.НаименованиеОрганизации = РеквизитыЮЛ.НаименованиеСокращенное;
	НоваяСтрока.ИНН = ОрганизацияОбъект.Получить("inn");
	ЗаполнитьИнформациюОСтатусе(ОрганизацияОбъект, НоваяСтрока);
	Возврат НоваяСтрока;
	
КонецФункции  


Процедура ЗаполнитьСтрокуОбУчредителе(Объект, ТаблицаДанных)
	
	НоваяСтрока = ЗаполнитьСтрокуОбОрганизации(Объект, ТаблицаДанных);
	ЗначениеCapitalShare = Объект.Получить("capitalShare");
	
	Если ЗначениеCapitalShare <> Неопределено Тогда
		ЗначениеNominalValue = ЗначениеCapitalShare.Получить("nominalValue");
		Если ЗначениеNominalValue <> Неопределено Тогда
			НоваяСтрока.СуммаКапитала   = Число(ЗначениеNominalValue);
		КонецЕсли;
		ЗначениеPercent = ЗначениеCapitalShare.Получить("percent");
		Если ЗначениеPercent <> Неопределено Тогда
			НоваяСтрока.ПроцентКапитала = Число(ЗначениеPercent);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьИнформациюОСтатусе(ТелоОтветаОбъект, Данные)
	
	ЗначениеStatus = ТелоОтветаОбъект.Получить("status");
	Если ЗначениеStatus <> Неопределено Тогда
		Данные.КодСтатуса = ЗначениеStatus.Получить("code");
		Данные.НаименованиеСтатуса = ЗначениеStatus.Получить("name");
	КонецЕсли;
	
КонецПроцедуры



