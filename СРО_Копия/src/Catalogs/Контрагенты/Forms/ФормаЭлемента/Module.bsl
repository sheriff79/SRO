&НаКлиенте
Перем ОтключитьЗаполнениеПоИНН;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.КонтактнаяИнформация") Тогда
		МодульУправлениеКонтактнойИнформацией = ОбщегоНазначения.ОбщийМодуль("УправлениеКонтактнойИнформацией");
		ДополнительныеПараметрыКонтактнойИнформации = МодульУправлениеКонтактнойИнформацией.ПараметрыКонтактнойИнформации();
		ДополнительныеПараметрыКонтактнойИнформации.ТипПомещения = "Офис";
		МодульУправлениеКонтактнойИнформацией.ПриСозданииНаСервере(ЭтотОбъект, Объект, ДополнительныеПараметрыКонтактнойИнформации);
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ПодключаемыеКоманды") Тогда
		МодульУправлениеПечатью = ОбщегоНазначения.ОбщийМодуль("УправлениеПечатью");
	КонецЕсли;
	
	// СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов
	ЗапретРедактированияРеквизитовОбъектов.ЗаблокироватьРеквизиты(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства


	//ВидОрганизации = ?(ЗначениеЗаполнено(Объект.ИндивидуальныйПредприниматель), 1, 0);

	//// СтандартныеПодсистемы.СклонениеПредставленийОбъектов
	//СклонениеПредставленийОбъектов.ПриСозданииНаСервере(ЭтотОбъект, Объект.Наименование);	
	//// Конец СтандартныеПодсистемы.СклонениеПредставленийОбъектов
	
	ЭлементОтбора = ОтветственныеЛица.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
    ЭлементОтбора.ЛевоеЗначение    = Новый ПолеКомпоновкиДанных("КПК");
    ЭлементОтбора.ВидСравнения     = ВидСравненияКомпоновкиДанных.Равно;
    ЭлементОтбора.Использование    = Истина;
    ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
    ЭлементОтбора.ПравоеЗначение   = Объект.Ссылка;

КонецПроцедуры     

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.КонтактнаяИнформация") Тогда
		МодульУправлениеКонтактнойИнформацией = ОбщегоНазначения.ОбщийМодуль("УправлениеКонтактнойИнформацией");
		МодульУправлениеКонтактнойИнформацией.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства


КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.КонтактнаяИнформация") Тогда
		МодульУправлениеКонтактнойИнформацией = ОбщегоНазначения.ОбщийМодуль("УправлениеКонтактнойИнформацией");
		МодульУправлениеКонтактнойИнформацией.ОбработкаПроверкиЗаполненияНаСервере(ЭтотОбъект, Объект, Отказ);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.КонтактнаяИнформация") Тогда
		МодульУправлениеКонтактнойИнформацией = ОбщегоНазначения.ОбщийМодуль("УправлениеКонтактнойИнформацией");
		МодульУправлениеКонтактнойИнформацией.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства  	

	
	ОбновитьИнтерфейс = ТекущийОбъект.ЭтоНовый();
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	Если ОбновитьИнтерфейс Тогда
		ОбновитьИнтерфейс();
	КонецЕсли;
	
	Оповестить("Запись_Организация", Новый Структура, Объект.Ссылка);

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства

	
	//ОпределитьДоступностьПоляИндивидуальныйПредприниматель(Ложь);

КонецПроцедуры

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ПОДСИСТЕМЫ "КОНТАКТНАЯ ИНФОРМАЦИЯ"

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияПриИзменении(Элемент)
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.КонтактнаяИнформация") Тогда
		МодульУправлениеКонтактнойИнформациейКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеКонтактнойИнформациейКлиент");
		МодульУправлениеКонтактнойИнформациейКлиент.ПриИзменении(ЭтотОбъект, Элемент);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.КонтактнаяИнформация") Тогда
		МодульУправлениеКонтактнойИнформациейКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеКонтактнойИнформациейКлиент");
		МодульУправлениеКонтактнойИнформациейКлиент.НачалоВыбора(ЭтотОбъект, Элемент, , СтандартнаяОбработка);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияПриНажатии(Элемент, СтандартнаяОбработка)
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.КонтактнаяИнформация") Тогда
		МодульУправлениеКонтактнойИнформациейКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеКонтактнойИнформациейКлиент");
		МодульУправлениеКонтактнойИнформациейКлиент.НачалоВыбора(ЭтотОбъект, Элемент,, СтандартнаяОбработка);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияОчистка(Элемент, СтандартнаяОбработка)
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.КонтактнаяИнформация") Тогда
		МодульУправлениеКонтактнойИнформациейКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеКонтактнойИнформациейКлиент");
		МодульУправлениеКонтактнойИнформациейКлиент.Очистка(ЭтотОбъект, Элемент.Имя);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияВыполнитьКоманду(Команда)
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.КонтактнаяИнформация") Тогда
		МодульУправлениеКонтактнойИнформациейКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("УправлениеКонтактнойИнформациейКлиент");
		МодульУправлениеКонтактнойИнформациейКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда.Имя);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ОбновитьКонтактнуюИнформацию(Результат)
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.КонтактнаяИнформация") Тогда
		МодульУправлениеКонтактнойИнформацией = ОбщегоНазначения.ОбщийМодуль("УправлениеКонтактнойИнформацией");
		МодульУправлениеКонтактнойИнформацией.ОбновитьКонтактнуюИнформацию(ЭтотОбъект, Объект, Результат);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	//// СтандартныеПодсистемы.РаботаСФайлами
	//РаботаСФайлами.ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи, Параметры);
	//// Конец СтандартныеПодсистемы.РаботаСФайлами
	
	//// СтандартныеПодсистемы.СклонениеПредставленийОбъектов
	//СклонениеПредставленийОбъектов.ПриЗаписиНаСервере(ЭтотОбъект, Объект.Наименование, ТекущийОбъект.Ссылка);	
	//// Конец СтандартныеПодсистемы.СклонениеПредставленийОбъектов


КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	// СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов
	ЗапретРедактированияРеквизитовОбъектов.ЗаблокироватьРеквизиты(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоИНН(Команда)
	ЗаполнитьРеквизитыПоДаннымЕГРНаКлиенте();
КонецПроцедуры  

&НаКлиенте
Процедура ЗаполнитьРеквизитыПоДаннымЕГРНаКлиенте()
	
	ПолеПоискаИНННаименование = СокрЛП(Объект.ИНН);
	
	Если ПустаяСтрока(ПолеПоискаИНННаименование) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСТр("ru='Введите ИНН или Наименование'"),, "ПолеПоискаИНННаименование");
		Возврат;
	КонецЕсли;
	
	ЗаполнениеПоИНН = ЭтоИНН(ПолеПоискаИНННаименование);
	
	Если ЗаполнениеПоИНН Тогда

		ВыполнитьЗаполнениеРеквизитовПоИНН();
	//ИначеЕсли ЗначениеЗаполнено(Объект.Наименование) 
	//	ИЛИ (ЗначениеЗаполнено(КонтактнаяИнформацияПолеЮрАдресКонтрагента) 
	//	И КонтактнаяИнформацияПолеЮрАдресКонтрагента <> УправлениеКонтактнойИнформациейКлиентСервер.ТекстПустогоАдресаВВидеГиперссылки()) Тогда
	//	ТекстВопроса = НСтр("ru='Перезаполнить текущие реквизиты?'");
	//	ДопПараметры = Новый Структура;
	//	ДопПараметры.Вставить("СтрокаПоиска", ПолеПоискаИНННаименование);
	//	ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьРеквизитыПоДаннымЕГРЗавершение", ЭтотОбъект, ДопПараметры);
	//	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	//Иначе
	//	КонтрагентыФормыКлиент.ЗаполнитьРеквизитыПоНаименованиюНаКлиенте(ЭтотОбъект, ПолеПоискаИНННаименование);
	КонецЕсли;

КонецПроцедуры     

&НаКлиенте
Процедура ВыполнитьЗаполнениеРеквизитовПоИНН(ПроверитьИНН = Ложь)
	
	//Если ОтобразитьЗаполнениеПоДаннымЕГР Тогда
	//	// Если нужно проверить ИНН, то берем из объекта (используется для заполнению по наименованию)
	//	Если ПроверитьИНН Тогда
	//		ИННОбъекта = СокрП(Объект.ИНН);
	//	Иначе
	//		ИННОбъекта = СокрП(ПолеПоискаИНННаименование);
	//		// Запустим проверку после заполнения
	//		ПроверитьИНН = Истина;
	//	КонецЕсли;
	//	
	//	Объект.ОбособленноеПодразделение = Ложь;
	//	
	//Иначе
		ИННОбъекта = СокрП(Объект.ИНН);
	//КонецЕсли;
	
	ЭтоЮрЛицо = Истина; //(Объект.ЮридическоеФизическоеЛицо = ПредопределенноеЗначение("Перечисление.ЮридическоеФизическоеЛицо.ЮридическоеЛицо"));
	
	ДанныеДляЗаполнения = ДанныеЕдиныхГосРеестровПоИНН(ИННОбъекта, ЭтоЮрЛицо);
	
	//Если ЗначениеЗаполнено(ДанныеДляЗаполнения.ОписаниеОшибки) Тогда
	//	
	//	ОбработчикЗавершенияОбработкиОшибки = Новый ОписаниеОповещения(
	//		"ВыполнитьЗаполнениеРеквизитовПоИННЗавершение",
	//		ЭтотОбъект,
	//		ИННОбъекта);
	//	ДополнительныеПараметрыОбработкиОшибки =
	//		РаботаСКонтрагентамиКлиент.НовыйДополнительныеПараметрыОбработкиОшибки();
	//	ДополнительныеПараметрыОбработкиОшибки.ПредставлениеДействия    = НСтр("ru = 'Автоматическое заполнение реквизитов контрагентов'");
	//	ДополнительныеПараметрыОбработкиОшибки.ИдентификаторМестаВызова = "kontragent";
	//	ДополнительныеПараметрыОбработкиОшибки.Форма                    = ЭтотОбъект;
	//	
	//	РаботаСКонтрагентамиКлиент.ОбработатьОшибку(
	//		ДанныеДляЗаполнения.ОписаниеОшибки,
	//		ОбработчикЗавершенияОбработкиОшибки,
	//		ДополнительныеПараметрыОбработкиОшибки);
	//	
	//ИначеЕсли ДанныеДляЗаполнения.Свойство("ЮридическоеФизическоеЛицо") 
	//	И ДанныеДляЗаполнения.ЮридическоеФизическоеЛицо <> Объект.ЮридическоеФизическоеЛицо 
	//	И НЕ Параметры.Ключ.Пустая() Тогда
	//	
	//	ЭтоЮрЛицо = (ДанныеДляЗаполнения.ЮридическоеФизическоеЛицо = ПредопределенноеЗначение("Перечисление.ЮридическоеФизическоеЛицо.ЮридическоеЛицо"));
	//	
	//	ТекстВопроса = СтрШаблон(
	//		НСтр("ru='Заполнить по ИНН %1 %2?'"), 
	//		?(ЭтоЮрЛицо, НСтр("ru = 'юридического лица'"), НСтр("ru = 'предпринимателя'")),
	//		ДанныеДляЗаполнения.НаименованиеКонтрагента);
	//		
	//	ДополнительныеПараметры = Новый Структура("АдресРеквизитовКонтрагента, ПроверитьИНН", ДанныеДляЗаполнения.АдресРеквизитовКонтрагента, ПроверитьИНН);
	//		
	//	ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьРеквизитыПоИННЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	//	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	//ИначеЕсли ДанныеДляЗаполнения.Свойство("АдресРеквизитовКонтрагента") Тогда
	//	ЗаполнитьРеквизитыНаСервере(ДанныеДляЗаполнения.АдресРеквизитовКонтрагента, ПроверитьИНН)
	//КонецЕсли;
	//
	//Если ПроверкаКонтрагентовПоИННКППВозможна Тогда
	//	// Проверка юридического лица по данным сервиса ИФНС после заполнения реквизитов (мог измениться КПП).
	//	ЗапуститьПроверкуКонтрагента();
	//КонецЕсли;
	//
	//// ИнтернетПоддержкаПользователей.СПАРКРиски
	//ИндексыСПАРКРиски = Неопределено; // Сбросить полученные значения
	//ПодключитьОбработчикОжидания("Подключаемый_ОбновитьОтображениеИндексыСПАРК", 0.1, Истина);
	//// Конец ИнтернетПоддержкаПользователей.СПАРКРиски
	
КонецПроцедуры   

&НаСервереБезКонтекста
Функция ДанныеЕдиныхГосРеестровПоИНН(Знач ИННОбъекта, ЭтоЮрЛицо)
	
	Возврат РаботаСКонтрагентами.ДанныеЕдиныхГосРеестровПоИНН(ИННОбъекта, ЭтоЮрЛицо);

КонецФункции      

&НаКлиентеНаСервереБезКонтекста
Функция ЭтоИНН(СтрокаИНН)
	Возврат ЗначениеЗаполнено(СтрокаИНН)
		И (СтрДлина(СтрокаИНН) = 10 Или СтрДлина(СтрокаИНН) = 12)
		И СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(СтрокаИНН);
КонецФункции







#КонецОбласти
